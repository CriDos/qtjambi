<project default="all" basedir=".">

    <property environment="env"/>

    <tstamp/>

    <property file="buildpath.properties"/>
    <property file="build.properties"/>

    <property name="sourceDir" value="."/>
    <property name="outputDir" value="."/>

    <property name="jambiLib" value="${outputDir}/lib"/>

    <!--
        Classpath for Java compiling
    -->

    <path id="java.compile.classpath">
        <fileset dir="${jardir}" includes="*.jar"/>
    </path>

    <!--
        Macro for compiling Java sources and generating jars.
    -->

    <macrodef name="dojar">
        <attribute name="component"/>
        <sequential>
            <mkdir dir="${java.generated.srcdir}/@{component}"/>
            <mkdir dir="${java.outdir}/@{component}"/>
            <mkdir dir="${jardir}"/>
            <javac source="1.5" target="1.5" debug="true" deprecation="true"
                memorymaximumsize="1024m" fork="true"
                destdir="${java.outdir}/@{component}">
                <src path="${java.srcdir}/@{component}"/>
                <src path="${java.generated.srcdir}/@{component}"/>
                <classpath refid="java.compile.classpath"/>
            </javac>
            <copy todir="${java.outdir}/@{component}" includeemptydirs="false">
                <fileset dir="${java.srcdir}/@{component}">
                    <include name="**/*"/>
                    <exclude name="**/*.java"/>
                </fileset>
            </copy>
            <jar basedir="${java.outdir}/@{component}"
                destfile="${jardir}/@{component}.jar">
                <manifest>
                    <attribute name="Built-By" value="${user.name} - ${TODAY}"/>
                </manifest>
            </jar>
        </sequential>
    </macrodef>

    <!--
        Pure Java jar targets:

        * qtjambi-util.jar contains classes necessary for both the build system
          and the bundled libraries (TODO: remove the dependency on the bundled
          libraries...);
        * ant-qtjambi.jar contains the code for many ant tasks used along the
          file (qmake, make, generator, juic...);
        * qtjambi.jar is the core jar for Qt Jambi applications;
        * qtjambi-designer.jar is the Java equivalent of Qt Designer.

        Some of them, like jar.qtjambi, depend on other parts of this build
        file.
    -->

    <target name="jar.qtjambi-util">
        <dojar component="qtjambi-util"/>
    </target>

    <target name="jar.ant-qtjambi" depends="jar.qtjambi-util"
        description="Creates a .jar file containing all the Qt Jambi ant tasks.">
        <dojar component="ant-qtjambi"/>
        <!--
            We don't want ant-qtjambi.jar to be in the classpath: move it out of
            the way so that we don't have to worry about it anymore
        -->
        <mkdir dir="${jardir}/nobundle"/>
        <move file="${jardir}/ant-qtjambi.jar" todir="${jardir}/nobundle"/>
    </target>

    <target name="jar.qtjambi" depends="init, generator">
        <dojar component="qtjambi"/>
    </target>

    <target name="jar.qtjambi-designer" depends="init, jar.qtjambi">
        <dojar component="qtjambi-designer"/>
    </target>

    <!--
        TODO: the following two targets must go away
    -->

    <target name="library.java.bundle" depends="jar.qtjambi">
        <copy file="${jardir}/qtjambi.jar"
            tofile="qtjambi-${qtjambi.version}.jar"/>
    </target>

    <target name="library.designer.bundle" depends="jar.qtjambi-designer">
        <copy file="${jardir}/qtjambi-designer.jar"
            tofile="qtjambi-designer-${qtjambi.version}.jar"/>
    </target>

    <path id="java.src.qtjambi-examples">
        <fileset dir="${java.srcdir}/qtjambi-examples">
            <include name="com/trolltech/demos/**/*.java"/>
            <include name="com/trolltech/examples/**/*.java"/>
            <include name="com/trolltech/launcher/*.java"/>
            <exclude name="com/trolltech/demos/phonon/*.java"
                unless="qtjambi.phonon"/>
            <exclude name="com/trolltech/examples/phonon/*.java"
                unless="qtjambi.phonon"/>
            <exclude name="com/trolltech/demos/xmlpatterns/*.java"
                unless="qtjambi.xmlpatterns"/>
            <exclude name="com/trolltech/examples/xmlpatterns/*.java"
                unless="qtjambi.xmlpatterns"/>
            <exclude name="com/trolltech/demos/webkit/*.java"
                unless="qtjambi.webkit"/>
            <exclude name="com/trolltech/examples/webkit/*.java"
                unless="qtjambi.webkit"/>
            <exclude name="com/trolltech/demos/HelloGL.java"
                unless="qtjambi.opengl"/>
        </fileset>
    </path>

    <!--
        TODO: there are also pure Java jar targets but these need a HUGE rework
    -->

    <target name="examples.phonon" depends="init, jar.qtjambi"
        if="qtjambi.phonon">
        <javac destdir="${outputDir}" target="1.5" debug="true">
            <src path="${outputDir}"/>
            <src path="${sourceDir}"/>
            <include name="com/trolltech/demos/phonon/*.java"/>
            <include name="com/trolltech/examples/phonon/*.java"/>
            <classpath refid="java.compile.classpath"/>
        </javac>
    </target>

    <target name="examples.webkit" depends="init, jar.qtjambi"
        if="qtjambi.webkit">
        <javac destdir="${outputDir}" target="1.5" debug="true">
            <src path="${outputDir}"/>
            <src path="${sourceDir}"/>
            <include name="com/trolltech/demos/webkit/*.java"/>
            <include name="com/trolltech/examples/webkit/*.java"/>
            <classpath refid="java.compile.classpath"/>
        </javac>
    </target>

    <target name="examples.xmlpatterns" depends="init, jar.qtjambi"
        if="qtjambi.xmlpatterns">
        <javac destdir="${outputDir}" target="1.5" debug="true">
            <src path="${outputDir}"/>
            <src path="${sourceDir}"/>
            <include name="com/trolltech/demos/xmlpatterns/*.java"/>
            <include name="com/trolltech/examples/xmlpatterns/*.java"/>
            <classpath refid="java.compile.classpath"/>
        </javac>
    </target>

    <target name="examples.compile"
            depends="init, examples.phonon, examples.webkit, examples.xmlpatterns">
        <javac destdir="${outputDir}"
           debug="true"
           fork="true"
           memoryMaximumSize="1024m"
           target="1.5">
            <src path="${outputDir}"/>
            <src path="${sourceDir}"/>
            <include name="com/trolltech/demos/**/*.java"/>
            <include name="com/trolltech/examples/**/*.java"/>
            <include name="com/trolltech/launcher/*.java"/>
            <exclude name="com/trolltech/demos/phonon/*.java"/>
            <exclude name="com/trolltech/demos/xmlpatterns/*.java"/>
            <exclude name="com/trolltech/demos/webkit/*.java"/>
            <exclude name="com/trolltech/examples/phonon/*.java"/>
            <exclude name="com/trolltech/examples/xmlpatterns/*.java"/>
            <exclude name="com/trolltech/examples/webkit/*.java"/>
            <exclude name="com/trolltech/examples/generator/*.java"/>
            <exclude name="com/trolltech/demos/HelloGL.java"/>
            <exclude name="com/trolltech/examples/GeneratorExample.java"/>
            <classpath refid="java.compile.classpath"/>
        </javac>

        <copy todir="${outputDir}">
            <fileset dir="${sourceDir}">
                <include name="com/trolltech/examples/**/*"/>
                <include name="com/trolltech/demos/**/*"/>
                <include name="com/trolltech/launcher/*"/>
                <include name="com/trolltech/images/**/*"/>
                <exclude name="com/trolltech/**/*.java"/>
                <exclude name="com/trolltech/**/*.jui"/>
            </fileset>
        </copy>
    </target>


    <target name="examples.bundle"
        depends="examples.compile">
      <jar destfile="${outputDir}/qtjambi-examples-${qtjambi.version}.jar"
             basedir="${outputDir}/">
            <include name="com/trolltech/examples/**/*"/>
            <include name="com/trolltech/demos/**/*"/>
            <include name="com/trolltech/launcher/*"/>
            <include name="com/trolltech/images/**/*"/>
            <exclude name="com/trolltech/**/*.jui"/>
            <manifest>
                <attribute name="Built-By" value="${user.name} - ${TODAY}"/>
            </manifest>
        </jar>
    </target>

    <!--
        END of pure Java jar targets
    -->

    <target name="init.taskdef" depends="jar.ant-qtjambi">
        <taskdef resource="com/trolltech/tools/ant/ant-qtjambi.xml">
            <classpath>
                <pathelement path="${jardir}/qtjambi-util.jar"/>
                <pathelement path="${jardir}/nobundle/ant-qtjambi.jar"/>
            </classpath>
        </taskdef>
    </target>

    <condition property="examples.juicfiles.uptodate">
        <and>
            <not>
                <isset property="qtjambi.force" />
            </not>
            <uptodate targetfile=".juic.run">
              <srcfiles dir="${outputDir}/com/trolltech/examples" includes="**/*.jui"/>
              <srcfiles dir="${outputDir}/com/trolltech/launcher" includes="*.jui"/>
              <srcfiles dir="${outputDir}/com/trolltech/demos" includes="**/*.jui"/>
            </uptodate>
        </and>
    </condition>

    <target name="examples.juic" depends="init, library.native.compile"
        description="Generates Java source files from JUI files created by designer."
        unless="examples.juicfiles.uptodate">
        <juic message="Running Juic for all it is worth"
            outputDir="${outputDir}"
            trFunction=""
            classNamePrefix=""
            alwaysUpdate="true"
            classpath="${sourceDir}">
            <include name="com/**/**.jui"/>
        </juic>
        <touch file="${outputDir}/.juic.run"/>
    </target>

    <!-- 
	 ************************************************************
	 Library Compilation etc ...
	 ************************************************************
      -->

    <condition property="qtjambi.library.makefiles.uptodate">
        <and>
            <not>
                <isset property="qtjambi.force" />
            </not>
            <uptodate targetfile="${outputDir}/Makefile">
              <srcfiles dir="${outputDir}/cpp" includes="**/*.pri"/>
              <srcfiles dir="${outputDir}" includes="**/qtjambi_*.pro"/>
              <srcfiles dir="${outputDir}/juic" includes="juic.pro"/>
              <srcfiles dir="${outputDir}/qtjambi" includes="*.pr*"/>
              <srcfiles dir="${outputDir}/designer-integration" includes="**/*.pr*"/>
            </uptodate>
        </and>
    </condition>

    <target name="library.native.qmake" depends="init, generator.run"
        description="Runs qmake on the Qt Jambi project."
	    unless="qtjambi.library.makefiles.uptodate">
        <delete dir="${jambiLib}"/>
        <qmake recursive="true"
            dir="${outputDir}"
            pro="${sourceDir}/java.pro"
            config="${qtjambi.configuration} ${qtjambi.config.jumptable}"
            debugTools="${qtjambi.debug-tools}"/>
    </target>

    <target name="library.native.compile" depends="init, library.native.qmake"
        description="Compiles the C++ Qt Jambi library">
        <make dir="${outputDir}"/>
    </target>

    <target name="library.native.bundle" depends="init"
            description="Creates a .jar file file containing native libraries.">

        <qtjambi-platform-jar cacheKey="${qtjambi.compiler}-${DSTAMP}-${TSTAMP}"
                              outdir="${outputDir}/platform-output">

            <!-- Qt Libraries... -->
            <library name="QtCore"    type="qt" rootPath="${qtjambi.qtdir}" />
            <library name="QtGui"     type="qt" rootPath="${qtjambi.qtdir}" />
            <library name="QtXml"     type="qt" rootPath="${qtjambi.qtdir}" />
            <library name="QtSql"     type="qt" rootPath="${qtjambi.qtdir}" />
            <library name="QtSvg"     type="qt" rootPath="${qtjambi.qtdir}" load="yes" />
            <library name="QtNetwork" type="qt" rootPath="${qtjambi.qtdir}" />
            <library name="QtOpenGL"  type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.opengl}"/>
            <library name="QtWebKit"  type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.webkit}"/>
            <library name="QtXmlPatterns" type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.xmlpatterns}"/>
            <library name="phonon"    type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.phonon}"/>
            <library name="QtDBus"    type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.dbus}"/>
            <library name="phonon_ds9" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/phonon_backend" load="never" if="${qtjambi.phonon_ds9}" />
            <library name="phonon_gstreamer" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/phonon_backend" load="never" if="${qtjambi.phonon_gstreamer}" />
            <library name="phonon_qt7" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/phonon_backend" load="never" if="${qtjambi.phonon_qt7}" />

            <!-- Qt Plugins... -->
            <library name="qjpeg" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qgif" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qmng" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qtiff" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qsvg" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qsvgicon" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/iconengines" load="never"/>
            <library name="qcncodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never" />
            <library name="qjpcodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never" />
            <library name="qkrcodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never" />
            <library name="qtwcodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never" />
            <library name="qtaccessiblewidgets" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/accessible" load="never"/>
            <library name="qsqlite" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/sqldrivers" load="never" if="${qtjambi.sqlite}" />

            <!-- Qt Jambi Libraries -->
            <library name="qtjambi"                  type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_core"    type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_gui"     type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_xml"     type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_sql"     type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_svg"     type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_network" type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_opengl"  type="qtjambi" rootPath="${outputDir}" />
            <library name="com_trolltech_qt_phonon"  type="qtjambi" rootPath="${outputDir}" if="${qtjambi.phonon}"/>
            <library name="com_trolltech_qt_webkit"  type="qtjambi" rootPath="${outputDir}" if="${qtjambi.webkit}"/>
            <library name="com_trolltech_qt_xmlpatterns"  type="qtjambi" rootPath="${outputDir}" if="${qtjambi.xmlpatterns}"/>

        <plugin path="plugins" />

        </qtjambi-platform-jar>

        <jar destfile="${outputDir}/qtjambi-${qtjambi.osname}-${qtjambi.compiler}-${qtjambi.version}.jar">
            <fileset dir="${outputDir}/platform-output" />
            <manifest>
                <attribute name="Built-By" value="${user.name} - ${TODAY}"/>
            </manifest>
        </jar>

        <delete dir="${outputDir}/platform-output"/>
    </target>



    <!-- 
	 ************************************************************
	 Building and running the Generator...
	 ************************************************************
      -->
    <condition property="qtjambi.generator_pro.uptodate">
        <and>
            <not>
                <isset property="qtjambi.force" />
            </not>    
            <uptodate targetfile="${outputDir}/generator/Makefile">
              <srcfiles dir="${sourceDir}/generator" includes="generator.pr*"/>
              <srcfiles dir="${sourceDir}/generator/parser" includes="rxx.pr*"/>
              <srcfiles dir="${sourceDir}/generator/parser/rpp" includes="rpp.pri"/>
            </uptodate>
        </and>
    </condition>

    <target name="generator.qmake"
            depends="init, generator.xmlmerge"
            description="Runs qmake on the generator project." 
	    unless="qtjambi.generator_pro.uptodate">
      <mkdir dir="${outputDir}/generator"/>
      <qmake config="${qtjambi.configuration}"
             dir="${outputDir}/generator"
             pro="${sourceDir}/generator/generator.pro"
             debugTools="${qtjambi.debug-tools}"/>
    </target>

    <target name="generator.compile" depends="init, generator.qmake"
        description="Compiles the Qt Jambi generator.">
        <make dir="${outputDir}/generator"/>
    </target>

    <available file="${outputDir}/generator/.run.timestamp" type="file"
        property="qtjambi.generator_run.uptodate"/>

    <target name="generator.run" depends="init, generator.compile"
        unless="qtjambi.generator_run.uptodate"
        description="Runs the Qt Jambi generator on the Qt sources, using the Qt version found at the QTDIR variable.">
        <mkdir dir="${generator.outputdir}"/>
        <generator dir="${outputDir}/generator"
            outputDirectory="${generator.outputdir}"
            typesystem="${sourceDir}/generator/build_all.txt"
            header="${sourceDir}/generator/qtjambi_masterinclude.h"
            options="${qtjambi.generator.jumptable}"/>
        <!--
            Copy the cpp/ directory to the root.
        -->
        <copy todir="${outputDir}">
            <fileset dir="${generator.outputdir}" includes="cpp/**/*"/>
        </copy>
        <!--
            Copy the generated Java source files in
            ${java.generated.srcdir}/@{component}, where component is qtjambi
            or qtjambi-designer.

            This, and probably the above, should probably be moved to their own
            targets.
        -->
        <mkdir dir="${java.generated.srcdir}/qtjambi"/>
        <copy todir="${outputDir}" includeemptydirs="false">
            <fileset dir="${generator.outputdir}">
                <include name="**/*"/>
                <exclude name="cpp/**/*"/>
            </fileset>
        </copy>
        <mkdir dir="${java.generated.srcdir}/qtjambi-designer"/>
        <copy todir="${java.generated.srcdir}/qtjambi"
            includeemptydirs="false">
            <fileset dir="${generator.outputdir}">
                <include name="**/*"/>
                <exclude name="com/trolltech/tools/designer/**"/>
                <exclude name="cpp/**/*"/>
            </fileset>
        </copy>
        <copy todir="${java.generated.srcdir}/qtjambi-designer"
            includeemptydirs="false">
            <fileset dir="${generator.outputdir}"
                includes="com/trolltech/tools/designer/**"/>
        </copy>
        <touch file="${outputDir}/generator/.run.timestamp"/>
    </target>



    <!-- 
        ************************************************************
        XML Merging for the generator...
        ************************************************************
    -->

    <macrodef name="xmlmerge">
        <attribute name="victim"/>
        <sequential>
            <xslt force="true" style="${generator.xmlmerge.srcdir}/merge.xsl"
                in="${generator.xmlmerge.srcdir}/typesystem_@{victim}-common.xml"
                out="${generator.xmlmerge.outputdir}/typesystem_@{victim}.xml">
                <param name="source"
                    expression="typesystem_@{victim}-java.xml"/>
            </xslt>
        </sequential>
    </macrodef>

    <target name="generator.xmlmerge"
        description="Merges the XML files used by the Qt Jambi generator.">
        <xmlmerge victim="core"/>
        <xmlmerge victim="gui"/>
        <xmlmerge victim="xml"/>
        <xmlmerge victim="network"/>
        <xmlmerge victim="opengl"/>
        <xmlmerge victim="sql"/>
        <xmlmerge victim="svg"/>
        <xmlmerge victim="webkit"/>
        <xmlmerge victim="phonon"/>
        <xmlmerge victim="xmlpatterns"/>
        <xmlmerge victim="designer"/>
    </target>

    <target name="init"
        depends="jar.ant-qtjambi, init.taskdef"
        description="Initializes the Qt Jambi build environment." >
      <qtjambi-initialize verbose="true" configuration="${qtjambi.config}" />
    </target>

    <target name="generator"
        depends="init, generator.xmlmerge, generator.qmake, generator.compile, generator.run"
        description="Compiles and runs the Qt Jambi Generator."/>

    <target name="library.native"
        depends="library.native.qmake, library.native.compile, library.native.bundle"
        description="Compiles and bundles the Qt Jambi native libraries."/>

    <target name="library.java"
        depends="jar.qtjambi, library.java.bundle"
        description="Compiles and bundles the Qt Jambi java libraries."/>

    <target name="library.designer"
        depends="jar.qtjambi-designer, library.designer.bundle"
        description="Compiles and bundles the Qt Jambi designer libraries."/>

    <target name="library"
        depends="init, library.native, library.java, library.designer"
        description="Compiles and bundles the Qt Jambi libraries.">
        <copy file="${jardir}/qtjambi-util.jar"
            tofile="qtjambi-util-${qtjambi.version}.jar"/>
    </target>

    <target name="examples"
        depends="init, examples.juic, examples.bundle"
        description="Compiles and bundles the Qt Jambi examples."/>

    <target name="all"
            description="Generates, builds and bundles the Qt Jambi libraries."
            depends="init, generator, library, examples" />

    <available file="Makefile" type="file" property="global.makefile.present"/>
    <available file="generator/Makefile" type="file"
        property="generator.makefile.present"/>

    <target name="make.clean.global" if="global.makefile.present"
        depends="init.taskdef">
        <make target="clean"/>
        <delete file="Makefile"/>
        <delete>
            <fileset dir="." includes="**/Makefile*"
                excludes="generator/Makefile*"/>
        </delete>
    </target>

    <target name="make.clean.generator" if="generator.makefile.present"
        depends="init.taskdef">
        <make dir="generator" target="clean"/>
        <delete>
            <fileset dir="generator" includes="Makefile*"/>
        </delete>
    </target>

    <target name="clean" description="Cleans everything"
        depends="make.clean.global, make.clean.generator">
        <delete dir="${java.outdir}"/>
        <delete dir="${jardir}"/>
        <delete dir="${java.generated.srcdir}"/>
        <delete dir="${generator.outputdir}"/>
        <delete>
            <fileset dir="${generator.xmlmerge.outputdir}" includes="*.xml"/>
        </delete>
      <delete file="${outputDir}/qtjambi-${qtjambi.version}.jar"/>
      <delete file="${outputDir}/qtjambi-examples-${qtjambi.version}.jar"/>
      <delete file="${outputDir}/qtjambi-designer-${qtjambi.version}.jar"/>
      <delete file="${outputDir}/qtjambi-${qtjambi.osname}-${qtjambi.compiler}-${qtjambi.version}.jar"/>
      <delete file="${outputDir}/generator/.run.timestamp"/>
      <delete dir="${outputDir}/bin"/>
      <delete dir="${outputDir}/lib"/>
      <delete dir="${outputDir}/cpp"/>
    </target>

    <target name="help" description="Provides detailed help.">
        <echo>
To build Qt Jambi, run ant without parameters. Run:

Edit the build.properties file if you want to change the behaviour of the build system:

* whether you want to build a release bundle or a debug bundle,
* whether you want to use a native jump table (EXPERIMENTAL).

You can use:

ant -Dqtjambi.force=true

to force the regeneration of all targets.

To get a description of all tasks run: ant -projecthelp

You can also see the Qt Jambi intallation document at:
http://doc.trolltech.com/qtjambi/com/trolltech/qt/qtjambi-installation.html
        </echo>
    </target>

</project>
