<project default="all" basedir=".">

    <property environment="env"/>

    <tstamp/>

    <property file="buildpath.properties"/>
    <property file="build.properties"/>

    <property name="sourceDir" value="."/>
    <property name="outputDir" value="."/>

    <!--
        Classpath for Java compiling
    -->

    <path id="java.compile.classpath">
        <fileset dir="${jardir}" includes="*.jar"/>
    </path>

    <!--
        Macro for creating a timestamp
    -->

    <macrodef name="dostamp">
        <attribute name="stampfile"/>
        <sequential>
        <mkdir dir="${timestamp.dir}"/>
            <touch file="${timestamp.dir}/@{stampfile}"/>
        </sequential>
    </macrodef>

    <!--
        Macro for compiling Java sources and generating jars.
    -->

    <macrodef name="dojar">
        <attribute name="component"/>
        <sequential>
            <!--
                Unfortunately, the javac task (well, even the javac command for
                that matter) does not support filesets, only dirsets. As we want
                to exclude some files (see the java.src.examples fileset below)
                from being compiled, we work around it by copying all source
                files to ${java.generated.srcdir}.
            -->
            <mkdir dir="${java.generated.srcdir}/@{component}"/>
            <copy todir="${java.generated.srcdir}/@{component}">
                <fileset refid="java.src.@{component}"/>
            </copy>
            <mkdir dir="${java.outdir}/@{component}"/>
            <mkdir dir="${jardir}"/>
            <javac source="1.5" target="1.5" debug="true" deprecation="true"
                memorymaximumsize="1024m" fork="true"
                destdir="${java.outdir}/@{component}">
                <src path="${java.generated.srcdir}/@{component}"/>
                <classpath refid="java.compile.classpath"/>
            </javac>
            <copy todir="${java.outdir}/@{component}" includeemptydirs="false">
                <fileset dir="${java.srcdir}/@{component}">
                    <include name="**/*"/>
                    <exclude name="**/*.java"/>
                </fileset>
            </copy>
            <!--
                We also want to exclude juic files in the jar: get rid of them
                here.
            -->
            <jar basedir="${java.outdir}/@{component}" excludes="**/*.jui"
                destfile="${jardir}/@{component}.jar">
                <manifest>
                    <attribute name="Built-By" value="${user.name} - ${TODAY}"/>
                </manifest>
            </jar>
        </sequential>
    </macrodef>

    <target name="setenv">
        <ant antfile="setenv.xml"/>
        <property file="env.properties"/>
    </target>

    <target name="tools.generator.qmake" depends="init, generator.xmlmerge">
        <qmake dir="generator" pro="generator/generator.pro"
        config="${qtjambi.configuration}"/>
    </target>

    <target name="tools.generator.make" depends="tools.generator.qmake">
        <make dir="generator"/>
    </target>

    <target name="tools.juic.qmake" depends="init">
        <qmake dir="juic" pro="juic/juic.pro" config="${qtjambi.configuration}"/>
    </target>

    <target name="tools.juic.make" depends="tools.juic.qmake">
        <make dir="juic"/>
    </target>

    <macrodef name="dojuic">
        <attribute name="module"/>
        <sequential>
            <mkdir dir="${java.generated.srcdir}/@{module}"/>
            <juic message="Running juic for @{module}..." alwaysupdate="true"
                classnameprefix="" trfunction=""
                classpath="${java.srcdir}/@{module}"
                outputdir="${java.generated.srcdir}/@{module}">
                <include name="**/*.jui"/>
            </juic>
        </sequential>
    </macrodef>

    <target name="jar.qtjambi-examples.juic" depends="tools.juic.make">
        <dojuic module="qtjambi-examples"/>
    </target>

    <!--
        Pure Java jar targets:

        * qtjambi-util.jar contains classes necessary for both the build system
          and the bundled libraries (TODO: remove the dependency on the bundled
          libraries...);
        * ant-qtjambi.jar contains the code for many ant tasks used along the
          file (qmake, make, generator, juic...);
        * qtjambi.jar is the core jar for Qt Jambi applications;
        * qtjambi-designer.jar is the Java equivalent of Qt Designer.

        Some of them, like jar.qtjambi, depend on other parts of this build
        file.
    -->

    <fileset id="java.src.qtjambi-util" dir="${java.srcdir}/qtjambi-util"
        includes="**/*.java"/>

    <target name="jar.qtjambi-util">
        <dojar component="qtjambi-util"/>
    </target>

    <fileset id="java.src.ant-qtjambi" dir="${java.srcdir}/ant-qtjambi"
        includes="**/*.java"/>

    <target name="jar.ant-qtjambi" depends="jar.qtjambi-util"
        description="Creates a .jar file containing all the Qt Jambi ant tasks.">
        <dojar component="ant-qtjambi"/>
        <!--
            We don't want ant-qtjambi.jar to be in the classpath: move it out of
            the way so that we don't have to worry about it anymore
        -->
        <mkdir dir="${jardir}/nobundle"/>
        <move file="${jardir}/ant-qtjambi.jar" todir="${jardir}/nobundle"/>
    </target>

    <fileset id="java.src.qtjambi" dir="${java.srcdir}/qtjambi"
        includes="**/*.java"/>

    <target name="jar.qtjambi" depends="init, jar.qtjambi-util, generator">
        <dojar component="qtjambi"/>
    </target>

    <fileset id="java.src.qtjambi-designer"
        dir="${java.srcdir}/qtjambi-designer"
        includes="**/*.java"/>

    <target name="jar.qtjambi-designer" depends="init, jar.qtjambi">
        <dojar component="qtjambi-designer"/>
    </target>

    <!--
        TODO: the following two targets must go away
    -->

    <target name="library.java.bundle" depends="jar.qtjambi">
        <copy file="${jardir}/qtjambi.jar"
            tofile="qtjambi-${qtjambi.version}.jar"/>
    </target>

    <target name="library.designer.bundle" depends="jar.qtjambi-designer">
        <copy file="${jardir}/qtjambi-designer.jar"
            tofile="qtjambi-designer-${qtjambi.version}.jar"/>
    </target>

    <fileset id="java.src.qtjambi-examples"
        dir="${java.srcdir}/qtjambi-examples">
        <include name="**/*.java"/>
        <exclude name="com/trolltech/demos/phonon/*.java"
            unless="qtjambi.phonon"/>
        <exclude name="com/trolltech/examples/phonon/*.java"
            unless="qtjambi.phonon"/>
        <exclude name="com/trolltech/demos/xmlpatterns/*.java"
            unless="qtjambi.xmlpatterns"/>
        <exclude name="com/trolltech/examples/xmlpatterns/*.java"
            unless="qtjambi.xmlpatterns"/>
        <exclude name="com/trolltech/demos/webkit/*.java"
            unless="qtjambi.webkit"/>
        <exclude name="com/trolltech/examples/webkit/*.java"
            unless="qtjambi.webkit"/>
        <exclude name="com/trolltech/examples/opengl/*.java"
            unless="qtjambi.opengl"/>
        <exclude name="com/trolltech/demos/opengl/*.java"
            unless="qtjambi.opengl"/>
    </fileset>

    <target name="jar.qtjambi-examples"
        depends="jar.qtjambi-designer, jar.qtjambi-examples.juic">
        <dojar component="qtjambi-examples"/>
    </target>

    <target name="examples.bundle" depends="jar.qtjambi-examples">
        <copy file="${jardir}/qtjambi-examples.jar"
            tofile="qtjambi-examples-${qtjambi.version}.jar"/>
    </target>

    <!--
        END of pure Java jar targets
    -->

    <target name="init.taskdef" depends="setenv, jar.ant-qtjambi">
        <taskdef resource="com/trolltech/tools/ant/ant-qtjambi.xml">
            <classpath>
                <pathelement path="${jardir}/qtjambi-util.jar"/>
                <pathelement path="${jardir}/nobundle/ant-qtjambi.jar"/>
            </classpath>
        </taskdef>
    </target>

    <!-- 
        ************************************************************
        Library Compilation etc ...
        ************************************************************
    -->

    <condition property="qtjambi.library.makefiles.uptodate">
        <uptodate targetfile="${outputDir}/Makefile">
            <srcfiles dir="${outputDir}/cpp" includes="**/*.pri"/>
            <srcfiles dir="${outputDir}" includes="**/qtjambi_*.pro"/>
            <srcfiles dir="${outputDir}/qtjambi" includes="*.pr*"/>
            <srcfiles dir="${outputDir}/designer-integration"
                includes="**/*.pr*"/>
        </uptodate>
    </condition>

    <target name="library.native.qmake" depends="init, generator.run"
        description="Runs qmake on the Qt Jambi project."
        unless="qtjambi.library.makefiles.uptodate">
        <delete dir="lib"/>
        <qmake recursive="true"
            dir="${outputDir}"
            pro="${sourceDir}/java.pro"
            config="${qtjambi.configuration} ${qtjambi.config.jumptable}"
            debugTools="${qtjambi.debug-tools}"/>
    </target>

    <target name="library.native.compile" depends="library.native.qmake"
        description="Compiles the C++ Qt Jambi library">
        <make dir="${outputDir}"/>
    </target>

    <target name="library.native.bundle" depends="library.native.compile"
            description="Creates a .jar file file containing native libraries.">

        <qtjambi-platform-jar cacheKey="${qtjambi.compiler}-${DSTAMP}-${TSTAMP}"
                              outdir="${outputDir}/platform-output">

            <!-- Qt Libraries... -->
            <library name="QtCore"    type="qt" rootPath="${qtjambi.qtdir}"/>
            <library name="QtGui"     type="qt" rootPath="${qtjambi.qtdir}"/>
            <library name="QtXml"     type="qt" rootPath="${qtjambi.qtdir}"/>
            <library name="QtSql"     type="qt" rootPath="${qtjambi.qtdir}"/>
            <library name="QtSvg"     type="qt" rootPath="${qtjambi.qtdir}" load="yes"/>
            <library name="QtNetwork" type="qt" rootPath="${qtjambi.qtdir}"/>
            <library name="QtOpenGL"  type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.opengl}"/>
            <library name="QtWebKit"  type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.webkit}"/>
            <library name="QtXmlPatterns" type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.xmlpatterns}"/>
            <library name="phonon"    type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.phonon}"/>
            <library name="QtDBus"    type="qt" rootPath="${qtjambi.qtdir}" if="${qtjambi.dbus}"/>
            <library name="phonon_ds9" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/phonon_backend" load="never" if="${qtjambi.phonon_ds9}"/>
            <library name="phonon_gstreamer" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/phonon_backend" load="never" if="${qtjambi.phonon_gstreamer}"/>
            <library name="phonon_qt7" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/phonon_backend" load="never" if="${qtjambi.phonon_qt7}"/>

            <!-- Qt Plugins... -->
            <library name="qjpeg" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qgif" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qmng" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qtiff" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qsvg" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/imageformats" load="never"/>
            <library name="qsvgicon" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/iconengines" load="never"/>
            <library name="qcncodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never"/>
            <library name="qjpcodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never"/>
            <library name="qkrcodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never"/>
            <library name="qtwcodecs" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/codecs" load="never"/>
            <library name="qtaccessiblewidgets" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/accessible" load="never"/>
            <library name="qsqlite" type="plugin" rootPath="${qtjambi.qtdir}" subdir="plugins/sqldrivers" load="never" if="${qtjambi.sqlite}"/>

            <!-- Qt Jambi Libraries -->
            <library name="qtjambi"                  type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_core"    type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_gui"     type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_xml"     type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_sql"     type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_svg"     type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_network" type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_opengl"  type="qtjambi" rootPath="${outputDir}"/>
            <library name="com_trolltech_qt_phonon"  type="qtjambi" rootPath="${outputDir}" if="${qtjambi.phonon}"/>
            <library name="com_trolltech_qt_webkit"  type="qtjambi" rootPath="${outputDir}" if="${qtjambi.webkit}"/>
            <library name="com_trolltech_qt_xmlpatterns"  type="qtjambi" rootPath="${outputDir}" if="${qtjambi.xmlpatterns}"/>

        <plugin path="plugins"/>

        </qtjambi-platform-jar>

        <jar destfile="${outputDir}/qtjambi-${qtjambi.osname}-${qtjambi.compiler}-${qtjambi.version}.jar">
            <fileset dir="${outputDir}/platform-output"/>
            <manifest>
                <attribute name="Built-By" value="${user.name} - ${TODAY}"/>
            </manifest>
        </jar>

        <delete dir="${outputDir}/platform-output"/>
    </target>



    <!-- 
        ************************************************************
        Building and running the Generator...
        ************************************************************
    -->

    <available file="${timestamp.dir}/generator.run" type="file"
        property="qtjambi.generator_run.uptodate"/>

    <target name="generator.run" depends="init, tools.generator.make"
        unless="qtjambi.generator_run.uptodate"
        description="Runs the Qt Jambi generator on the Qt sources, using the Qt version found at the QTDIR variable.">
        <mkdir dir="${generator.outputdir}"/>
        <generator dir="${outputDir}/generator"
            outputDirectory="${generator.outputdir}"
            typesystem="${sourceDir}/generator/build_all.txt"
            header="${sourceDir}/generator/qtjambi_masterinclude.h"
            options="${qtjambi.generator.jumptable}"/>
        <!--
            Copy the cpp/ directory to the root.
        -->
        <copy todir="${outputDir}">
            <fileset dir="${generator.outputdir}" includes="cpp/**/*"/>
        </copy>
        <!--
            Copy the generated Java source files in
            ${java.generated.srcdir}/@{component}, where component is qtjambi
            or qtjambi-designer.

            This, and probably the above, should probably be moved to their own
            targets.
        -->
        <mkdir dir="${java.generated.srcdir}/qtjambi"/>
        <copy todir="${java.generated.srcdir}/qtjambi"
            includeemptydirs="false">
            <fileset dir="${generator.outputdir}">
                <include name="**/*"/>
                <exclude name="com/trolltech/tools/designer/**"/>
                <exclude name="cpp/**/*"/>
            </fileset>
        </copy>
        <mkdir dir="${java.generated.srcdir}/qtjambi-designer"/>
        <copy todir="${java.generated.srcdir}/qtjambi-designer"
            includeemptydirs="false">
            <fileset dir="${generator.outputdir}"
                includes="com/trolltech/tools/designer/**"/>
        </copy>
        <dostamp stampfile="generator.run"/>
    </target>



    <!-- 
        ************************************************************
        XML Merging for the generator...
        ************************************************************
    -->

    <macrodef name="xmlmerge">
        <attribute name="victim"/>
        <sequential>
            <xslt force="true" style="${generator.xmlmerge.srcdir}/merge.xsl"
                in="${generator.xmlmerge.srcdir}/typesystem_@{victim}-common.xml"
                out="${generator.xmlmerge.outputdir}/typesystem_@{victim}.xml">
                <param name="source"
                    expression="typesystem_@{victim}-java.xml"/>
            </xslt>
        </sequential>
    </macrodef>

    <target name="generator.xmlmerge"
        description="Merges the XML files used by the Qt Jambi generator.">
        <xmlmerge victim="core"/>
        <xmlmerge victim="gui"/>
        <xmlmerge victim="xml"/>
        <xmlmerge victim="network"/>
        <xmlmerge victim="opengl"/>
        <xmlmerge victim="sql"/>
        <xmlmerge victim="svg"/>
        <xmlmerge victim="webkit"/>
        <xmlmerge victim="phonon"/>
        <xmlmerge victim="xmlpatterns"/>
        <xmlmerge victim="designer"/>
    </target>

    <target name="init" depends="init.taskdef"
        description="Initializes the Qt Jambi build environment." >
        <qtjambi-initialize verbose="true" configuration="${qtjambi.config}"/>
    </target>

    <target name="generator" depends="generator.run"
        description="Compiles and runs the Qt Jambi Generator."/>

    <target name="library.native" depends="library.native.bundle"
        description="Compiles and bundles the Qt Jambi native libraries."/>

    <target name="library.java" depends="library.java.bundle"
        description="Compiles and bundles the Qt Jambi java libraries."/>

    <target name="library.designer" depends="library.designer.bundle"
        description="Compiles and bundles the Qt Jambi designer libraries."/>

    <target name="library" depends="library.native, library.java, library.designer"
        description="Compiles and bundles the Qt Jambi libraries.">
        <copy file="${jardir}/qtjambi-util.jar"
            tofile="qtjambi-util-${qtjambi.version}.jar"/>
    </target>

    <target name="examples" depends="examples.bundle"
        description="Compiles and bundles the Qt Jambi examples."/>

    <target name="all" depends="generator, library, examples"
        description="Generates, builds and bundles the Qt Jambi libraries."/>

    <!--
        CLEAN TARGETS
    -->

    <available file="Makefile" type="file" property="global.makefile.present"/>
    <available file="juic/Makefile" type="file"
        property="juic.makefile.present"/>
    <available file="generator/Makefile" type="file"
        property="generator.makefile.present"/>

    <target name="make.clean.global" if="global.makefile.present"
        depends="init.taskdef">
        <make target="clean"/>
        <delete file="Makefile"/>
        <delete>
            <fileset dir=".">
                <include name="**/Makefile*"/>
                <exclude name="juic/Makefile*"/>
                <exclude name="generator/Makefile*"/>
            </fileset>
        </delete>
    </target>

    <target name="make.clean.juic" if="juic.makefile.present"
        depends="init.taskdef">
        <make dir="juic" target="clean"/>
        <delete>
            <fileset dir="juic">
                <include name="Makefile*"/>
                <include name="juic"/>
            </fileset>
        </delete>
    </target>

    <target name="make.clean.generator" if="generator.makefile.present"
        depends="init.taskdef">
        <make dir="generator" target="clean"/>
        <delete>
            <fileset dir="generator">
                <include name="Makefile*"/>
                <include name="generator"/>
                <include name="mjb_*.log"/>
                <include name=".preprocessed.tmp"/>
            </fileset>
        </delete>
    </target>

    <target name="clean" description="Cleans everything"
        depends="make.clean.global, make.clean.generator, make.clean.juic">
        <delete>
            <fileset dir="${generator.xmlmerge.outputdir}" includes="*.xml"/>
        </delete>
        <delete>
            <dirset dir=".">
                <include name="${java.outdir}"/>
                <include name="${jardir}"/>
                <include name="${java.generated.srcdir}"/>
                <include name="${generator.outputdir}"/>
                <include name="${timestamp.dir}"/>
                <include name="bin"/>
                <include name="lib"/>
                <include name="cpp"/>
                <include name="plugins/*"/>
                <exclude name="plugins/qtjambi"/>
            </dirset>
        </delete>
        <delete>
            <fileset dir=".">
                <include name="*.jar"/>
                <include name="env.properties"/>
            </fileset>
        </delete>
    </target>

    <target name="help" description="Provides detailed help.">
        <echo>
To build Qt Jambi, run ant without parameters. Run:

Edit the build.properties file if you want to change the behaviour of the build system:

* whether you want to build a release bundle or a debug bundle,
* whether you want to use a native jump table (EXPERIMENTAL).

To get a description of all tasks run: ant -projecthelp

You can also see the Qt Jambi intallation document at:
http://doc.trolltech.com/qtjambi/com/trolltech/qt/qtjambi-installation.html
        </echo>
    </target>

</project>
