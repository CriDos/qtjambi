<typesystem package="com.trolltech.autotests.generated" default-superclass="com.trolltech.qt.QtObject">

  <load-typesystem name="../generator/typesystem_core.txt" generate="no" />
  <load-typesystem name="../generator/typesystem_gui.txt" generate="no" />

  <value-type name="Tulip">
    <include file-name="tulip.h" location="local"/>
  </value-type>

  <value-type name="Variants">
    <include file-name="variants.h" location="local"/>
  </value-type>

  <object-type name="SignalsAndSlots">
    <include file-name="signalsandslots.h" location="local"/>
  </object-type>

  <object-type name="AbstractClass">
    <include file-name="abstractclass.h" location="local"/>
  </object-type>

  <object-type name="CustomPaintEngine" />
  <object-type name="OtherCustomPaintEngine">
	<extra-includes>
		<include file-name="QVarLengthArray" location="global" />
        </extra-includes>
  </object-type>

  <object-type name="AnotherNonAbstractSubclass">
    <include file-name="abstractclass.h" location="local"/>
  </object-type>

  <object-type name="NativePointerTester">
    <include file-name="nativepointertester.h" location="local"/>
  </object-type>

  <object-type name="OrdinarySuperclass" />
  <object-type name="OrdinaryDestroyed" />
  <object-type name="QObjectDestroyed" />

  <object-type name="SetupLayout" />

  <object-type name="Threads"/>
  
  <object-type name="PolymorphicType">
    <modify-function signature="getButtonStyleOption()">
        <modify-argument index="return">
           <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>        
    </modify-function>
    <modify-function class="native" signature="getButtonStyleOption()">
        <modify-argument index="return">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>       
        </modify-argument>        
    </modify-function>
    <modify-function signature="getCustomStyleOption(int)">
        <modify-argument index="return">
           <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>        
    </modify-function>
    <modify-function class="native" signature="getCustomStyleOption(int)">
        <modify-argument index="return">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>       
        </modify-argument>        
    </modify-function>    
    <modify-function signature="getUnmappedCustomStyleOption()">
        <modify-argument index="return">
            <replace-type modified-type="com.trolltech.qt.gui.QStyleOption" />
            <conversion-rule>
                jobject %out = qtjambi_from_object(__jni_env, %in, "QStyleOption", "com/trolltech/qt/gui/", "Lcom_trolltech_qt_gui_QStyleOption_2");
            </conversion-rule>
        </modify-argument>        
    </modify-function>
    <modify-function class="native" signature="getUnmappedCustomStyleOption()">
        <modify-argument index="return">
            <conversion-rule>
                QStyleOption *%out = (QStyleOption *) qtjambi_to_object(__jni_env, %in);
            </conversion-rule>       
        </modify-argument>        
    </modify-function>
  </object-type>
  
  <object-type name="CustomEvent" 
               polymorphic-id-expression="int(%1->type()) == QEvent::User + 1" />
  
  <value-type name="CustomStyleOption"
              polymorphic-id-expression="%1-&gt;type == QStyleOption::SO_CustomBase + 1" /> 
 
   
</typesystem>
