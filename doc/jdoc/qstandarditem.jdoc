<class name="QStandardItem" doc="/**
<p>The QStandardItem class provides an item for use with the QStandardItemModel class.</p>
<p>Items usually contain text, icons, or checkboxes.</p>
<p>Each item can have its own background brush which is set with the setBackground() function. The current background brush can be found with background(). The text label for each item can be rendered with its own font and brush. These are specified with the setFont() and setForeground() functions, and read with font() and foreground().</p>
<p>By default, items are enabled, editable, selectable, checkable, and can be used both as the source of a drag and drop operation and as a drop target. Each item's flags can be changed by calling setFlags(). Checkable items can be checked and unchecked with the setCheckState() function. The corresponding checkState() function indicates whether the item is currently checked.</p>
<p>You can store application-specific data in an item by calling setData().</p>
<p>Each item can have a two-dimensional table of child items. This makes it possible to build hierarchies of items. The typical hierarchy is the tree, in which case the child table is a table with a single column (a list).</p>
<p>The dimensions of the child table can be set with setRowCount() and setColumnCount(). Items can be positioned in the child table with setChild(). Get a pointer to a child item with child(). New rows and columns of children can also be inserted with insertRow() and insertColumn(), or appended with appendRow() and appendColumn(). When using the append and insert functions, the dimensions of the child table will grow as needed.</p>
<p>An existing row of children can be removed with removeRow() or takeRow(); correspondingly, a column can be removed with removeColumn() or takeColumn().</p>
<p>An item's children can be sorted by calling sortChildren().</p>
<a name=&quote;subclassing&quote;></a>
<h3>Subclassing</h3>
<p>When subclassing QStandardItem to provide custom items, it is possible to define new types for them so that they can be distinguished from the base class. The type() function should be reimplemented to return a new type value equal to or greater than UserType.</p>
<p>Reimplement data() and setData() if you want to perform custom handling of data queries and/or control how an item's data is represented.</p>
<p>Reimplement clone() if you want QStandardItemModel to be able to create instances of your custom item class on demand (see QStandardItemModel::setItemPrototype()).</p>
<p>Reimplement read() and write() if you want to control how items are represented in their serialized form.</p>
<p>Reimplement operator&lt;() if you want to control the semantics of item comparison. operator&lt;() determines the sorted order when sorting items with sortChildren() or with QStandardItemModel::sort().</p>

*/">
    <method name="public QStandardItem()" doc="/**
<p>Constructs an item.</p>

*/"/>
    <method name="public QStandardItem(com.trolltech.qt.gui.QIcon icon__0, java.lang.String text__1)" doc="/**
<p>Constructs an item with the given <i>icon</i> and <i>text</i>.</p>

*/"/>
    <method name="protected QStandardItem(com.trolltech.qt.gui.QStandardItem other__0)" doc="/**
<p>Constructs a copy of <i>other</i>. Note that model() is not copied.</p>
<p>This function is useful when reimplementing clone().</p>

*/"/>
    <method name="public QStandardItem(java.lang.String text__0)" doc="/**
<p>Constructs an item with the given <i>text</i>.</p>

*/"/>
    <method name="public QStandardItem(int rows__0, int columns__1)" doc="/**
<p>Constructs an item with <i>rows</i> rows and <i>columns</i> columns of child items.</p>

*/"/>
    <method name="public final java.lang.String accessibleDescription()" doc="/**
<p>Returns the item's accessible description.</p>
<p>The accessible description is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</p>

*/"/>
    <method name="public final java.lang.String accessibleText()" doc="/**
<p>Returns the item's accessible text.</p>
<p>The accessible text is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</p>

*/"/>
    <method name="public final void appendColumn(java.util.List&lt;com.trolltech.qt.gui.QStandardItem&gt; items__0)" doc="/**
<p>Appends a column containing <i>items</i>. If necessary, the row count is increased to the size of <i>items</i>.</p>

*/"/>
    <method name="public final void appendRow(com.trolltech.qt.gui.QStandardItem item__0)" doc="/**
<p>Appends a row containing <i>item</i>.</p>
<p>When building a list or a tree that has only one column, this function provides a convenient way to append a single new item.</p>

*/"/>
    <method name="public final void appendRow(java.util.List&lt;com.trolltech.qt.gui.QStandardItem&gt; items__0)" doc="/**
<p>Appends a row containing <i>items</i>. If necessary, the column count is increased to the size of <i>items</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QBrush background()" doc="/**
<p>Returns the brush used to render the item's background.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.CheckState checkState()" doc="/**
<p>Returns the checked state of the item.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QStandardItem child(int row__0, int column__1)" doc="/**
<p>Returns the child item at (<i>row</i>, <i>column</i>) if one has been set; otherwise returns 0.</p>

*/"/>
    <method name="public final int column()" doc="/**
<p>Returns the column where the item is located in its parent's child table, or -1 if the item has no parent.</p>

*/"/>
    <method name="public final int columnCount()" doc="/**
<p>Returns the number of child item columns that the item has.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.ItemFlags flags()" doc="/**
<p>Returns the item flags for the item.</p>
<p>The item flags determine how the user can interact with the item.</p>
<p>By default, items are enabled, editable, selectable, checkable, and can be used both as the source of a drag and drop operation and as a drop target.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QFont font()" doc="/**
<p>Returns the font used to render the item's text.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QBrush foreground()" doc="/**
<p>Returns the brush used to render the item's foreground (e.g. text).</p>

*/"/>
    <method name="public final boolean hasChildren()" doc="/**
<p>Returns true if this item has any children; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QIcon icon()" doc="/**
<p>Returns the item's icon.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QModelIndex index()" doc="/**
<p>Returns the QModelIndex associated with this item.</p>
<p>When you need to invoke item functionality in a QModelIndex-based API (e.g. QAbstractItemView), you can call this function to obtain an index that corresponds to the item's location in the model.</p>
<p>If the item is not associated with a model, an invalid QModelIndex is returned.</p>

*/"/>
    <method name="public final void insertColumn(int column__0, java.util.List&lt;com.trolltech.qt.gui.QStandardItem&gt; items__1)" doc="/**
<p>Inserts a column at <i>column</i> containing <i>items</i>. If necessary, the row count is increased to the size of <i>items</i>.</p>

*/"/>
    <method name="public final void insertColumns(int column__0, int count__1)" doc="/**
<p>Inserts <i>count</i> columns of child items at column <i>column</i>.</p>

*/"/>
    <method name="public final void insertRow(int row__0, com.trolltech.qt.gui.QStandardItem item__1)" doc="/**
<p>Inserts a row at <i>row</i> containing <i>item</i>.</p>
<p>When building a list or a tree that has only one column, this function provides a convenient way to insert a single new item.</p>

*/"/>
    <method name="public final void insertRow(int row__0, java.util.List&lt;com.trolltech.qt.gui.QStandardItem&gt; items__1)" doc="/**
<p>Inserts a row at <i>row</i> containing <i>items</i>. If necessary, the column count is increased to the size of <i>items</i>.</p>

*/"/>
    <method name="public final void insertRows(int row__0, int count__1)" doc="/**
<p>Inserts <i>count</i> rows of child items at row <i>row</i>.</p>

*/"/>
    <method name="public final boolean isCheckable()" doc="/**
<p>Returns whether the item is user-checkable.</p>
<p>The default value is false.</p>

*/"/>
    <method name="public final boolean isDragEnabled()" doc="/**
<p>Returns whether the item is drag enabled. An item that is drag enabled can be dragged by the user.</p>
<p>The default value is true.</p>
<p>Note that item dragging must be enabled in the view for dragging to work; see QAbstractItemView::dragEnabled.</p>

*/"/>
    <method name="public final boolean isDropEnabled()" doc="/**
<p>Returns whether the item is drop enabled. When an item is drop enabled, it can be used as a drop target.</p>
<p>The default value is true.</p>

*/"/>
    <method name="public final boolean isEditable()" doc="/**
<p>Returns whether the item can be edited by the user.</p>
<p>When an item is editable (and enabled), the user can edit the item by invoking one of the view's edit triggers; see QAbstractItemView::editTriggers.</p>
<p>The default value is true.</p>

*/"/>
    <method name="public final boolean isEnabled()" doc="/**
<p>Returns whether the item is enabled.</p>
<p>When an item is enabled, the user can interact with it. The possible types of interaction are specified by the other item flags, such as isEditable() and isSelectable().</p>
<p>The default value is true.</p>

*/"/>
    <method name="public final boolean isSelectable()" doc="/**
<p>Returns whether the item is selectable by the user.</p>
<p>The default value is true.</p>

*/"/>
    <method name="public final boolean isTristate()" doc="/**
<p>Returns whether the item is tristate; that is, if it's checkable with tree separate states.</p>
<p>The default value is false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QStandardItemModel model()" doc="/**
<p>Returns the QStandardItemModel that this item belongs to.</p>
<p>If the item is not a child of another item that belongs to the model, this function returns 0.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QStandardItem parent()" doc="/**
<p>Returns the item's parent item, or 0 if the item has no parent.</p>

*/"/>
    <method name="public final void removeColumn(int column__0)" doc="/**
<p>Removes the given <i>column</i>. The items that were in the column are deleted.</p>

*/"/>
    <method name="public final void removeColumns(int column__0, int count__1)" doc="/**
<p>Removes <i>count</i> columns at column <i>column</i>. The items that were in those columns are deleted.</p>

*/"/>
    <method name="public final void removeRow(int row__0)" doc="/**
<p>Removes the given <i>row</i>. The items that were in the row are deleted.</p>

*/"/>
    <method name="public final void removeRows(int row__0, int count__1)" doc="/**
<p>Removes <i>count</i> rows at row <i>row</i>. The items that were in those rows are deleted.</p>

*/"/>
    <method name="public final int row()" doc="/**
<p>Returns the row where the item is located in its parent's child table, or -1 if the item has no parent.</p>

*/"/>
    <method name="public final int rowCount()" doc="/**
<p>Returns the number of child item rows that the item has.</p>

*/"/>
    <method name="public final void setAccessibleDescription(java.lang.String accessibleDescription__0)" doc="/**
<p>Sets the item's accessible description to the string specified by <i>accessibleDescription</i>.</p>
<p>The accessible description is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</p>

*/"/>
    <method name="public final void setAccessibleText(java.lang.String accessibleText__0)" doc="/**
<p>Sets the item's accessible text to the string specified by <i>accessibleText</i>.</p>
<p>The accessible text is used by assistive technologies (i.e. for users who cannot use conventional means of interaction).</p>

*/"/>
    <method name="public final void setBackground(com.trolltech.qt.gui.QBrush brush__0)" doc="/**
<p>Sets the item's background brush to the specified <i>brush</i>.</p>

*/"/>
    <method name="public final void setCheckState(com.trolltech.qt.core.Qt.CheckState checkState__0)" doc="/**
<p>Sets the check state of the item to be <i>state</i>.</p>

*/"/>
    <method name="public final void setCheckable(boolean checkable__0)" doc="/**
<p>Sets whether the item is user-checkable. If <i>checkable</i> is true, the item can be checked by the user; otherwise, the user cannot check the item.</p>
<p>The item delegate will render a checkable item with a check box next to the item's text.</p>

*/"/>
    <method name="public final void setChild(int row__0, com.trolltech.qt.gui.QStandardItem item__1)" doc="/**
<p>Sets the child at <i>row</i> to <i>item</i>.</p>

*/"/>
    <method name="public final void setChild(int row__0, int column__1, com.trolltech.qt.gui.QStandardItem item__2)" doc="/**
<p>Sets the child item at (<i>row</i>, <i>column</i>) to <i>item</i>. This item (the parent item) takes ownership of <i>item</i>. If necessary, the row count and column count are increased to fit the item.</p>

*/"/>
    <method name="public final void setColumnCount(int columns__0)" doc="/**
<p>Sets the number of child item columns to <i>columns</i>. If this is less than columnCount(), the data in the unwanted columns is discarded.</p>

*/"/>
    <method name="public final void setDragEnabled(boolean dragEnabled__0)" doc="/**
<p>Sets whether the item is drag enabled. If <i>dragEnabled</i> is true, the item can be dragged by the user; otherwise, the user cannot drag the item.</p>
<p>Note that you also need to ensure that item dragging is enabled in the view; see QAbstractItemView::dragEnabled.</p>

*/"/>
    <method name="public final void setDropEnabled(boolean dropEnabled__0)" doc="/**
<p>Sets whether the item is drop enabled. If <i>dropEnabled</i> is true, the item can be used as a drop target; otherwise, it cannot.</p>
<p>Note that you also need to ensure that drops are enabled in the view; see QWidget::acceptDrops(); and that the model supports the desired drop actions; see QAbstractItemModel::supportedDropActions().</p>

*/"/>
    <method name="public final void setEditable(boolean editable__0)" doc="/**
<p>Sets whether the item is editable. If <i>editable</i> is true, the item can be edited by the user; otherwise, the user cannot edit the item.</p>
<p>How the user can edit items in a view is determined by the view's edit triggers; see QAbstractItemView::editTriggers.</p>

*/"/>
    <method name="public final void setEnabled(boolean enabled__0)" doc="/**
<p>Sets whether the item is enabled. If <i>enabled</i> is true, the item is enabled, meaning that the user can interact with the item; if <i>enabled</i> is false, the user cannot interact with the item.</p>
<p>This flag takes presedence over the other item flags; e.g. if an item is not enabled, it cannot be selected by the user, even if the Qt::ItemIsSelectable flag has been set.</p>

*/"/>
    <method name="public final void setFlags(com.trolltech.qt.core.Qt.ItemFlags flags__0)" doc="/**
<p>Sets the item flags for the item to <i>flags</i>.</p>
<p>The item flags determine how the user can interact with the item.</p>

*/"/>
    <method name="public final void setFont(com.trolltech.qt.gui.QFont font__0)" doc="/**
<p>Sets the font used to display the item's text to the given <i>font</i>.</p>

*/"/>
    <method name="public final void setForeground(com.trolltech.qt.gui.QBrush brush__0)" doc="/**
<p>Sets the brush used to display the item's foreground (e.g. text) to the given <i>brush</i>.</p>

*/"/>
    <method name="public final void setIcon(com.trolltech.qt.gui.QIcon icon__0)" doc="/**
<p>Sets the item's icon to the <i>icon</i> specified.</p>

*/"/>
    <method name="public final void setRowCount(int rows__0)" doc="/**
<p>Sets the number of child item rows to <i>rows</i>. If this is less than rowCount(), the data in the unwanted rows is discarded.</p>

*/"/>
    <method name="public final void setSelectable(boolean selectable__0)" doc="/**
<p>Sets whether the item is selectable. If <i>selectable</i> is true, the item can be selected by the user; otherwise, the user cannot select the item.</p>
<p>You can control the selection behavior and mode by manipulating their view properties; see QAbstractItemView::selectionMode and QAbstractItemView::selectionBehavior.</p>

*/"/>
    <method name="public final void setSizeHint(com.trolltech.qt.core.QSize sizeHint__0)" doc="/**
<p>Sets the size hint for the item to be <i>size</i>. If no size hint is set, the item delegate will compute the size hint based on the item data.</p>

*/"/>
    <method name="public final void setStatusTip(java.lang.String statusTip__0)" doc="/**
<p>Sets the item's status tip to the string specified by <i>statusTip</i>.</p>

*/"/>
    <method name="public final void setText(java.lang.String text__0)" doc="/**
<p>Sets the item's text to the <i>text</i> specified.</p>

*/"/>
    <method name="public final void setTextAlignment(com.trolltech.qt.core.Qt.Alignment textAlignment__0)" doc="/**
<p>Sets the text alignment for the item's text to the <i>alignment</i> specified.</p>

*/"/>
    <method name="public final void setToolTip(java.lang.String toolTip__0)" doc="/**
<p>Sets the item's tooltip to the string specified by <i>toolTip</i>.</p>

*/"/>
    <method name="public final void setTristate(boolean tristate__0)" doc="/**
<p>Sets whether the item is tristate. If <i>tristate</i> is true, the item is checkable with three separate states; otherwise, the item is checkable with two states. (Note that this also requires that the item is checkable; see isCheckable().)</p>

*/"/>
    <method name="public final void setWhatsThis(java.lang.String whatsThis__0)" doc="/**
<p>Sets the item's &quot;What's This?&quot; help to the string specified by <i>whatsThis</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize sizeHint()" doc="/**
<p>Returns the size hint set for the item, or an invalid QSize if no size hint has been set.</p>
<p>If no size hint has been set, the item delegate will compute the size hint based on the item data.</p>

*/"/>
    <method name="public final void sortChildren(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sorts the children of the item using the given <i>order</i>, by the values in the given <i>column</i>.</p>

*/"/>
    <method name="public final java.lang.String statusTip()" doc="/**
<p>Returns the item's status tip.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QStandardItem takeChild(int row__0, int column__1)" doc="/**
<p>Removes the child item at (<i>row</i>, <i>column</i>) without deleting it, and returns a pointer to the item. If there was no child at the given location, then this function returns 0.</p>
<p>Note that this function, unlike takeRow() and takeColumn(), does not affect the dimensions of the child table.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QStandardItem&gt; takeColumn(int column__0)" doc="/**
<p>Removes <i>column</i> without deleting the column items, and returns a list of pointers to the removed items. For items in the column that have not been set, the corresponding pointers in the list will be 0.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QStandardItem&gt; takeRow(int row__0)" doc="/**
<p>Removes <i>row</i> without deleting the row items, and returns a list of pointers to the removed items. For items in the row that have not been set, the corresponding pointers in the list will be 0.</p>

*/"/>
    <method name="public final java.lang.String text()" doc="/**
<p>Returns the item's text. This is the text that's presented to the user in a view.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Alignment textAlignment()" doc="/**
<p>Returns the text alignment for the item's text.</p>

*/"/>
    <method name="public final java.lang.String toolTip()" doc="/**
<p>Returns the item's tooltip.</p>

*/"/>
    <method name="public final java.lang.String whatsThis()" doc="/**
<p>Returns the item's &quot;What's This?&quot; help.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QStandardItem clone()" doc="/**
<p>Returns a copy of this item. The item's children are not copied.</p>
<p>When subclassing QStandardItem, you can reimplement this function to provide QStandardItemModel with a factory that it can use to create new items on demand.</p>

*/"/>
    <method name="public java.lang.Object data(int role__0)" doc="/**
<p>Returns the item's data for the given <i>role</i>, or an invalid QVariant if there is no data for the role.</p>

*/"/>
    <method name="public void read(com.trolltech.qt.core.QDataStream in__0)" doc="/**
<p>Reads the item from stream <i>in</i>. Only the data and flags of the item are read, not the child items.</p>

*/"/>
    <method name="public void setData(java.lang.Object value__0, int role__1)" doc="/**
<p>Sets the item's data for the given <i>role</i> to the specified <i>value</i>.</p>

*/"/>
    <method name="public int type()" doc="/**
<p>Returns the type of this item. The type is used to distinguish custom items from the base class. When subclassing QStandardItem, you should reimplement this function and return a new value greater than or equal to UserType.</p>

*/"/>
    <method name="public void write(com.trolltech.qt.core.QDataStream out__0)" doc="/**
<p>Writes the item to stream <i>out</i>. Only the data and flags of the item are written, not the child items.</p>

*/"/>
    <enum name="ItemType" doc="/**
<p>This enum describes the types that are used to describe standard items.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The default type for standard items.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The minimum value for custom types. Values below UserType are reserved by Qt.</td></tr>
</table></p>
<p>You can define new user types in QStandardItem subclasses to ensure that custom items are treated specially; for example, when items are sorted.</p>

*/"/>
</class>
