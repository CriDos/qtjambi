<class name="QTranslator" doc="/**
<p>The QTranslator class provides internationalization support for text output.</p>
<p>An object of this class contains a set of translations from a source language to a target language. QTranslator provides functions to look up translations in a translation file. Translation files are created using Qt Linguist.</p>
<p>The most common use of QTranslator is to: load a translation file, install it using QApplication::installTranslator(), and use it via QObject::tr(). Here's the <tt>main()</tt> function from the Hello tr() example:</p>
<pre>    int main(int argc, char *argv[])
    {
        QApplication app(argc, argv);

        QTranslator translator;
        translator.load(&quot;hellotr_la&quot;);
        app.installTranslator(&amp;translator);

        QPushButton hello(QPushButton::tr(&quot;Hello world!&quot;));
        hello.resize(100, 30);

        hello.show();
        return app.exec();
    }</pre>
<p>Note that the translator must be created <i>before</i> the application's widgets.</p>
<p>Most applications will never need to do anything else with this class. The other functions provided by this class are useful for applications that work on translator files.</p>
<p>It is possible to lookup a translation using translate() (as tr() and QApplication::translate() do). The translate() function takes up to three parameters:</p>
<ul>
<li>The <i>context</i> - usually the class name for the tr() caller.</li>
<li>The <i>source text</i> - usually the argument to tr().</li>
<li>The <i>comment</i> - an optional comment that helps disambiguate different uses of the same text in the same context.</li>
</ul>
<p>For example, the &quot;Cancel&quot; in a dialog might have &quot;Anuluj&quot; when the program runs in Polish (in this case the source text would be &quot;Cancel&quot;). The context would (normally) be the dialog's class name; there would normally be no comment, and the translated text would be &quot;Anuluj&quot;.</p>
<p>But it's not always so simple. The Spanish version of a printer dialog with settings for two-sided printing and binding would probably require both &quot;Activado&quot; and &quot;Activada&quot; as translations for &quot;Enabled&quot;. In this case the source text would be &quot;Enabled&quot; in both cases, and the context would be the dialog's class name, but the two items would have disambiguating comments such as &quot;two-sided printing&quot; for one and &quot;binding&quot; for the other. The comment enables the translator to choose the appropriate gender for the Spanish version, and enables Qt to distinguish between translations.</p>

*/">
    <method name="public QTranslator(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs an empty message file object with parent <i>parent</i> that is not connected to any file.</p>

*/"/>
    <method name="public final boolean load(java.lang.String filename__0, java.lang.String directory__1, java.lang.String search_delimiters__2, java.lang.String suffix__3)" doc="/**
<p>Loads <i>filename</i> + <i>suffix</i> (&quot;.qm&quot; if the <i>suffix</i> is not specified), which may be an absolute file name or relative to <i>directory</i>. The previous contents of this translator object is discarded.</p>
<p>If the file name does not exist, other file names are tried in the following order:</p>
<ol type=&quote;1&quote;>
<li>File name without <i>suffix</i> appended.</li>
<li>File name with text after a character in <i>search_delimiters</i> stripped (&quot;_.&quot; is the default for <i>search_delimiters</i> if it is an empty string) and <i>suffix</i>.</li>
<li>File name stripped without <i>suffix</i> appended.</li>
<li>File name stripped further, etc.</li>
</ol>
<p>For example, an application running in the fr_CA locale (French-speaking Canada) might call load(&quot;foo.fr_ca&quot;, &quot;/opt/foolib&quot;). load() would then try to open the first existing readable file from this list:</p>
<ol type=&quote;1&quote;>
<li><tt>/opt/foolib/foo.fr_ca.qm</tt></li>
<li><tt>/opt/foolib/foo.fr_ca</tt></li>
<li><tt>/opt/foolib/foo.fr.qm</tt></li>
<li><tt>/opt/foolib/foo.fr</tt></li>
<li><tt>/opt/foolib/foo.qm</tt></li>
<li><tt>/opt/foolib/foo</tt></li>
</ol>

*/"/>
    <method name="public final boolean load(com.trolltech.qt.QNativePointer data__0, int len__1)" doc="/**
<p>Loads the .qm file data <i>data</i> of length <i>len</i> into the translator.</p>
<p>The data is not copied. The caller must be able to guarantee that <i>data</i> will not be deleted or modified.</p>

*/"/>
    <method name="public final java.lang.String translate(com.trolltech.qt.QNativePointer context__0, com.trolltech.qt.QNativePointer sourceText__1, com.trolltech.qt.QNativePointer comment__2, int n__3)" doc="/**
<p>Returns the translation for the key (<i>context</i>, <i>sourceText</i>, <i>comment</i>). If none is found, also tries (<i>context</i>, <i>sourceText</i>, &quot;&quot;). If that still fails, returns an empty string.</p>
<p>If <i>n</i> is not -1, it is used to choose an appropriate form for the translation (e.g. &quot;%n file found&quot; vs. &quot;%n files found&quot;).</p>

*/"/>
    <method name="public boolean isEmpty()" doc="/**
<p>Returns true if this translator is empty, otherwise returns false. This function works with stripped and unstripped translation files.</p>

*/"/>
    <method name="public java.lang.String translate(com.trolltech.qt.QNativePointer context__0, com.trolltech.qt.QNativePointer sourceText__1, com.trolltech.qt.QNativePointer comment__2)" doc="/**
<p>Returns the translation for the key (<i>context</i>, <i>sourceText</i>, <i>comment</i>). If none is found, also tries (<i>context</i>, <i>sourceText</i>, &quot;&quot;). If that still fails, returns an empty string.</p>

*/"/>
</class>
