<class name="QPicture" doc="/**
<p>The QPicture class is a paint device that records and replays QPainter commands.</p>
<p>A picture serializes painter commands to an IO device in a platform-independent format. They are sometimes referred to as meta-files.</p>
<p>Qt pictures use a proprietary binary format. Unlike native picture (meta-file) formats on many window systems, Qt pictures have no limitations regarding their contents. Everything that can be painted on a widget or pixmap (e.g., fonts, pixmaps, regions, transformed graphics, etc.) can also be stored in a picture.</p>
<p>QPicture is resolution independent, i.e. a QPicture can be displayed on different devices (for example svg, pdf, ps, printer and screen) looking the same. This is, for instance, needed for WYSIWYG print preview. QPicture runs in the default system dpi, and scales the painter to match differences in resolution depending on the window system.</p>
<p>Example of how to record a picture:</p>
<pre>            QPicture picture;
            QPainter painter;
            painter.begin(&amp;picture);           <span class=&quote;comment&quote;>// paint in picture</span>
            painter.drawEllipse(10,20, 80,70); <span class=&quote;comment&quote;>// draw an ellipse</span>
            painter.end();                     <span class=&quote;comment&quote;>// painting done</span>
            picture.save(&quot;drawing.pic&quot;);       <span class=&quote;comment&quote;>// save picture</span></pre>
<p>Note that the list of painter commands is reset on each call to the QPainter::begin() function.</p>
<p>Example of how to replay a picture:</p>
<pre>            QPicture picture;
            picture.load(&quot;drawing.pic&quot;);           <span class=&quote;comment&quote;>// load picture</span>
            QPainter painter;
            painter.begin(&amp;myWidget);              <span class=&quote;comment&quote;>// paint in myWidget</span>
            painter.drawPicture(0, 0, picture);    <span class=&quote;comment&quote;>// draw the picture at (0,0)</span>
            painter.end();                         <span class=&quote;comment&quote;>// painting done</span></pre>
<p>Pictures can also be drawn using play(). Some basic data about a picture is available, for example, size(), isNull() and boundingRect().</p>

*/">
    <method name="public QPicture(int formatVersion__0)" doc="/**
<p>Constructs an empty picture.</p>
<p>The <i>formatVersion</i> parameter may be used to <i>create</i> a QPicture that can be read by applications that are compiled with earlier versions of Qt.</p>
<p>Note that the default formatVersion is -1 which signifies the current release, i.e. for Qt 4.0 a formatVersion of 7 is the same as the default formatVersion of -1.</p>
<p>Reading pictures generated by earlier versions of Qt is not supported in Qt 4.0.</p>

*/"/>
    <method name="public QPicture(com.trolltech.qt.gui.QPicture arg__0)" doc="/**
<p>Constructs a copy of <i>pic</i>.</p>
<p>This constructor is fast thanks to implicit sharing.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect boundingRect()" doc="/**
<p>Returns the picture's bounding rectangle or an invalid rectangle if the picture contains no data.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer data()" doc="/**
<p>Returns a pointer to the picture data. The pointer is only valid until the next non-const function is called on this picture. The returned pointer is 0 if the picture contains no data.</p>

*/"/>
    <method name="public final void detach()" doc="/**
<p>Detaches from shared picture data and makes sure that this picture is the only one referring to the data.</p>
<p>If multiple pictures share common data, this picture makes a copy of the data and detaches itself from the sharing mechanism. Nothing is done if there is just a single reference.</p>

*/"/>
    <method name="public final boolean isDetached()"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if the picture contains no data; otherwise returns false.</p>

*/"/>
    <method name="public final boolean load(com.trolltech.qt.core.QIODevice dev__0, com.trolltech.qt.QNativePointer format__1)" doc="/**
<p><i>dev</i> is the device to use for loading.</p>

*/"/>
    <method name="public final boolean load(java.lang.String fileName__0, com.trolltech.qt.QNativePointer format__1)" doc="/**
<p>Loads a picture from the file specified by <i>fileName</i> and returns true if successful; otherwise returns false.</p>
<p>By default, the file will be interpreted as being in the native QPicture format. Specifying the <i>format</i> string is optional and is only needed for importing picture data stored in a different format.</p>

*/"/>
    <method name="public final boolean play(com.trolltech.qt.gui.QPainter p__0)" doc="/**
<p>Replays the picture using <i>painter</i>, and returns true if successful; otherwise returns false.</p>
<p>This function does exactly the same as QPainter::drawPicture() with (x, y) = (0, 0).</p>

*/"/>
    <method name="public final boolean save(com.trolltech.qt.core.QIODevice dev__0, com.trolltech.qt.QNativePointer format__1)" doc="/**
<p><i>dev</i> is the device to use for saving.</p>

*/"/>
    <method name="public final boolean save(java.lang.String fileName__0, com.trolltech.qt.QNativePointer format__1)" doc="/**
<p>Saves a picture to the file specified by <i>fileName</i> and returns true if successful; otherwise returns false.</p>
<p>Specifying the file <i>format</i> string is optional. By default the data will be saved in the native QPicture file format.</p>

*/"/>
    <method name="public final void setBoundingRect(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Sets the picture's bounding rectangle to <i>r</i>. The automatically calculated value is overridden.</p>

*/"/>
    <method name="public final int size()" doc="/**
<p>Returns the size of the picture data.</p>

*/"/>
    <method name="public int depth()"/>
    <method name="public int devType()"/>
    <method name="public int metric(com.trolltech.qt.gui.QPaintDevice.PaintDeviceMetric m__0)" doc="/**
<p>Internal implementation of the virtual QPaintDevice::metric() function.</p>
<p>A picture has the following hard-coded values: numcolors=16777216 and depth=24.</p>
<p><i>m</i> is the metric to get.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QPaintEngine paintEngine()"/>
    <method name="public boolean paintingActive()"/>
    <method name="public void setData(com.trolltech.qt.QNativePointer data__0, int size__1)" doc="/**
<p>Sets the picture data directly from <i>data</i> and <i>size</i>. This function copies the input data.</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; inputFormatList()" doc="/**
<p>Returns a list of picture formats that are supported for picture input.</p>
<p>Note that if you want to iterate over the list, you should iterate over a copy, e.g.</p>
<pre>            QStringList list = QPicture::inputFormatList();
            foreach (QString string, list)
                myProcessing(string);</pre>

*/"/>
    <method name="public native static java.util.List&lt;com.trolltech.qt.core.QByteArray&gt; inputFormats()" doc="/**
<p>Returns a list of picture formats that are supported for picture input.</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; outputFormatList()" doc="/**
<p>Returns a list of picture formats that are supported for picture output.</p>
<p>Note that if you want to iterate over the list, you should iterate over a copy, e.g.</p>
<pre>            QStringList list = QPicture::outputFormatList();
            foreach (QString string, list)
                myProcessing(string);</pre>

*/"/>
    <method name="public native static java.util.List&lt;com.trolltech.qt.core.QByteArray&gt; outputFormats()" doc="/**
<p>Returns a list of picture formats that are supported for picture output.</p>

*/"/>
    <method name="public native static com.trolltech.qt.QNativePointer pictureFormat(java.lang.String fileName__0)" doc="/**
<p>Returns a string that specifies the picture format of the file <i>fileName</i>, or 0 if the file cannot be read or if the format is not recognized.</p>
<p>The QPictureIO documentation lists the guaranteed supported picture formats, or use QPicture::inputFormats() and QPicture::outputFormats() to get lists that include the installed formats.</p>

*/"/>
</class>
