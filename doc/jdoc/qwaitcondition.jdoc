<class name="QWaitCondition" doc="/**
<p>The QWaitCondition class provides a condition variable for synchronizing threads.</p>
<p>QWaitCondition allows a thread to tell other threads that some sort of condition has been met. One or many threads can block waiting for a QWaitCondition to set a condition with wakeOne() or wakeAll(). Use wakeOne() to wake one randomly selected condition or wakeAll() to wake them all.</p>
<p>For example, let's suppose that we have three tasks that should be performed whenever the user presses a key. Each task could be split into a thread, each of which would have a run() body like this:</p>
<pre>    forever {
        mutex.lock();
        keyPressed.wait(&amp;mutex);
        do_something();
        mutex.unlock();
    }</pre>
<p>Here, the <tt>keyPressed</tt> variable is a global variable of type QWaitCondition.</p>
<p>A fourth thread would read key presses and wake the other three threads up every time it receives one, like this:</p>
<pre>    forever {
        getchar();
        keyPressed.wakeAll();
    }</pre>
<p>The order in which the three threads are woken up is undefined. Also, if some of the threads are still in <tt>do_something()</tt> when the key is pressed, they won't be woken up (since they're not waiting on the condition variable) and so the task will not be performed for that key press. This issue can be solved using a counter and a QMutex to guard it. For example, here's the new code for the worker threads:</p>
<pre>    forever {
        mutex.lock();
        keyPressed.wait(&amp;mutex);
        ++count;
        mutex.unlock();

        do_something();

        mutex.lock();
        --count;
        mutex.unlock();
    }</pre>
<p>Here's the code for the fourth thread:</p>
<pre>    forever {
        getchar();

        mutex.lock();
        <span class=&quote;comment&quote;>// Sleep until there are no busy worker threads</span>
        while (count &gt; 0) {
            mutex.unlock();
            sleep(1);
            mutex.lock();
        }
        mutex.unlock();
        keyPressed.wakeAll();
    }</pre>
<p>The mutex is necessary because the results of two threads attempting to change the value of the same variable simultaneously are unpredictable.</p>
<p>Wait conditions are a powerful thread synchronization primitive. The Wait Conditions example shows how to use QWaitCondition as an alternative to QSemaphore for controlling access to a circular buffer shared by a producer thread and a consumer thread.</p>

*/">
    <method name="public QWaitCondition()" doc="/**
<p>Constructs a new wait condition object.</p>

*/"/>
    <method name="public final boolean wait(com.trolltech.qt.core.QMutex mutex__0, int time__1)" doc="/**
<p>Releases the locked <i>mutex</i> and wait on the wait condition. The <i>mutex</i> must be initially locked by the calling thread. If <i>mutex</i> is not in a locked state, this function returns immediately. If <i>mutex</i> is a recursive mutex, this function returns immediately. The <i>mutex</i> will be unlocked, and the calling thread will block until either of these conditions is met:</p>
<ul>
<li>Another thread signals it using wakeOne() or wakeAll(). This function will return true in this case.</li>
<li><i>time</i> milliseconds has elapsed. If <i>time</i> is <tt>ULONG_MAX</tt> (the default), then the wait will never timeout (the event must be signalled). This function will return false if the wait timed out.</li>
</ul>
<p>The mutex will be returned to the same locked state. This function is provided to allow the atomic transition from the locked state to the wait state.</p>

*/"/>
    <method name="public final void wakeAll()" doc="/**
<p>Wakes all threads waiting on the wait condition. The order in which the threads are woken up depends on the operating system's scheduling policies and cannot be controlled or predicted.</p>

*/"/>
    <method name="public final void wakeOne()" doc="/**
<p>Wakes one thread waiting on the wait condition. The thread that is woken up depends on the operating system's scheduling policies, and cannot be controlled or predicted.</p>
<p>If you want to wake up a specific thread, the solution is typically to use different wait conditions and have different threads wait on different conditions.</p>

*/"/>
</class>
