<class name="QTextBlock" doc="/**
<p>The QTextBlock class provides a container for text fragments in a QTextDocument.</p>
<p>A text block encapsulates a block or paragraph of text in a QTextDocument. QTextBlock provides read-only access to the block/paragraph structure of QTextDocuments. It is mainly of use if you want to implement your own layouts for the visual representation of a QTextDocument, or if you want to iterate over a document and write out the contents in your own custom format.</p>
<p>Text blocks are created by their parent documents. If you need to create a new text block, or modify the contents of a document while examining its contents, use the cursor-based interface provided by QTextCursor instead.</p>
<p>Each text block is located at a specific position() in a document(). The contents of the block can be obtained by using the text() function. The length() function determines the block's size within the document (including formatting characters). The visual properties of the block are determined by its text layout(), its charFormat(), and its blockFormat().</p>
<p>The next() and previous() functions enable iteration over consecutive valid blocks in a document under the condition that the document is not modified by other means during the iteration process. Note that, although blocks are returned in sequence, adjacent blocks may come from different places in the document structure. The validity of a block can be determined by calling isValid().</p>
<p>QTextBlock provides comparison operators to make it easier to work with blocks: operator==() compares two block for equality, operator!=() compares two blocks for inequality, and operator&lt;() determines whether a block precedes another in the same document.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qtextblock-sequence.png]</font></p>
*/">
    <method name="public QTextBlock()"/>
    <method name="public QTextBlock(com.trolltech.qt.gui.QTextBlock o__0)" doc="/**
<p>Copies the <i>other</i> text block's attributes to this text block.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextBlock_iterator begin()" doc="/**
<p>Returns a text block iterator pointing to the beginning of the text block.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextBlockFormat blockFormat()" doc="/**
<p>Returns the QTextBlockFormat that describes block-specific properties.</p>

*/"/>
    <method name="public final int blockFormatIndex()" doc="/**
<p>Returns an index into the document's internal list of block formats for the text block's format.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextCharFormat charFormat()" doc="/**
<p>Returns the QTextCharFormat that describes the block's character format. This is mainly used to draw block-specific additions such as e.g. list markers.</p>

*/"/>
    <method name="public final int charFormatIndex()" doc="/**
<p>Returns an index into the document's internal list of character formats for the text block's character format.</p>

*/"/>
    <method name="public final boolean contains(int position__0)" doc="/**
<p>Returns true if the given <i>position</i> is located within the text block; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextDocument document()" doc="/**
<p>Returns the text document this text block belongs to, or 0 if the text block does not belong to any document.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextBlock_iterator end()" doc="/**
<p>Returns a text block iterator pointing to the end of the text block.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if this text block is valid; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextLayout layout()" doc="/**
<p>Returns the QTextLayout that is used to lay out and display the block's contents.</p>

*/"/>
    <method name="public final int length()" doc="/**
<p>Returns the length of the block in characters.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextBlock next()" doc="/**
<p>Returns the text block in the document after this block, or an empty text block if this is the last one.</p>
<p>Note that the next block may be in a different frame or table to this block.</p>

*/"/>
    <method name="public final int position()" doc="/**
<p>Returns the index of the block's first character within the document.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextBlock previous()" doc="/**
<p>Returns the text block in the document before this block, or an empty text block if this is the first one.</p>
<p>Note that the next block may be in a different frame or table to this block.</p>

*/"/>
    <method name="public final void setUserData(com.trolltech.qt.gui.QTextBlockUserData data__0)" doc="/**
<p>Attaches the given <i>data</i> object to the text block.</p>
<p>QTextBlockUserData can be used to store custom settings. The ownership is passed to the underlying text document, i.e. the provided QTextBlockUserData object will be deleted if the corresponding text block gets deleted. The user data object is not stored in the undo history, so it will not be available after undoing the deletion of a text block.</p>
<p>For example, if you write a programming editor in an IDE, you may want to let your user set breakpoints visually in your code for an integrated debugger. In a programming editor a line of text usually corresponds to one QTextBlock. The QTextBlockUserData interface allows the developer to store data for each QTextBlock, like for example in which lines of the source code the user has a breakpoint set. Of course this could also be stored externally, but by storing it inside the QTextDocument, it will for example be automatically deleted when the user deletes the associated line. It's really just a way to store custom information in the QTextDocument without using custom properties in QTextFormat which would affect the undo/redo stack.</p>

*/"/>
    <method name="public final void setUserState(int state__0)" doc="/**
<p>Stores the specified <i>state</i> integer value in the text block. This may be useful for example in a syntax highlighter to store a text parsing state.</p>

*/"/>
    <method name="public final java.lang.String text()" doc="/**
<p>Returns the block's contents as plain text.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextList textList()" doc="/**
<p>If the block represents a list item, returns the list that the item belongs to; otherwise returns 0.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextBlockUserData userData()" doc="/**
<p>Returns a pointer to a QTextBlockUserData object if previously set with setUserData() or a null pointer.</p>

*/"/>
    <method name="public final int userState()" doc="/**
<p>Returns the integer value previously set with setUserState() or -1.</p>

*/"/>
</class>
