<class name="QSvgWidget" doc="/**
<p>The QSvgWidget class provides a widget that is used to display the contents of Scalable Vector Graphics (SVG) files.</p>
<p>This class enables developers to display SVG drawings alongside standard widgets, and is used in much the same way as QLabel is used for displaying text and bitmap images.</p>
<p>Since QSvgWidget is a subclass of QWidget, SVG drawings are rendered using the properties of the display. More control can be exercised over the rendering process with the QSvgRenderer class, as this can be used to paint onto other paint devices, such as QImage and QGLWidget. The renderer used by the widget can be obtained with the renderer() function.</p>
<p>Each QSvgWidget can be constructed with the file name of a SVG file, or they can be constructed without a specific file to render and one can be supplied later. The load() functions provide two different ways to load an SVG file: they accept either the file name of an SVG file or a QByteArray containing the serialized XML representation of an SVG file.</p>
<p>By default, the widget provides a size hint to reflect the size of the drawing that it displays. If no data has been loaded, the widget provides the default QWidget size hint. Subclass this class and reimplement sizeHint() if you need to customize this behavior.</p>

*/">
    <method name="public QSvgWidget(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a new SVG display widget with the given <i>parent</i>.</p>

*/"/>
    <method name="public QSvgWidget(java.lang.String file__0, com.trolltech.qt.gui.QWidget parent__1)" doc="/**
<p>Constructs a new SVG display widget with the given <i>parent</i> and loads the contents of the specified <i>file</i>.</p>

*/"/>
    <method name="public final void load(java.lang.String file__0)" doc="/**
<p>Loads the contents of the specified SVG <i>file</i> and updates the widget.</p>

*/"/>
    <method name="public final void load(com.trolltech.qt.core.QByteArray contents__0)" doc="/**
<p>Loads the specified SVG format <i>contents</i> and updates the widget.</p>

*/"/>
    <method name="public final com.trolltech.qt.svg.QSvgRenderer renderer()" doc="/**
<p>Returns the renderer used to display the contents of the widget.</p>

*/"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent event__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
</class>
