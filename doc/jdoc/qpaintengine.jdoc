<class name="QPaintEngine" doc="/**
<p>The QPaintEngine class provides an abstract definition of how QPainter draws to a given device on a given platform.</p>
<p>Qt 4.0 provides several premade implementations of QPaintEngine for the different painter backends we support. We provide one paint engine for each window system and painting framework we support. This includes X11 on Unix/Linux and CoreGraphics on Mac OS X. In addition we provide QPaintEngine implementations for OpenGL (accessible through QGLWidget) and PostScript (accessible through QPSPrinter on X11). Additionally there is a raster-based paint engine that is a fallback for when an engine does not support a certain capability.</p>
<p>If one wants to use QPainter to draw to a different backend, one must subclass QPaintEngine and reimplement all its virtual functions. The QPaintEngine implementation is then made available by subclassing QPaintDevice and reimplementing the virtual function QPaintDevice::paintEngine().</p>
<p>QPaintEngine is created and owned by the QPaintDevice that created it.</p>
<p>The big advantage of the QPaintEngine approach opposed to Qt 3's QPainter/QPaintDevice::cmd() approach is that it is now possible to adapt to multiple technologies on each platform and take advantage of each to the fullest.</p>

*/">
    <method name="public QPaintEngine(com.trolltech.qt.gui.QPaintEngine.PaintEngineFeatures features__0)" doc="/**
<p>Creates a paint engine with the featureset specified by <i>caps</i>.</p>

*/"/>
    <method name="public final void clearDirty(com.trolltech.qt.gui.QPaintEngine.DirtyFlags df__0)"/>
    <method name="public final void fix_neg_rect(com.trolltech.qt.QNativePointer x__0, com.trolltech.qt.QNativePointer y__1, com.trolltech.qt.QNativePointer w__2, com.trolltech.qt.QNativePointer h__3)"/>
    <method name="public final boolean hasFeature(com.trolltech.qt.gui.QPaintEngine.PaintEngineFeatures feature__0)" doc="/**
<p>Returns true if the paint engine supports the specified <i>feature</i>; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isActive()" doc="/**
<p>Returns true if the paint engine is actively drawing; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPaintDeviceInterface paintDevice()" doc="/**
<p>Returns the engine that this engine is painting on, if painting is active; otherwise returns 0.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPainter painter()" doc="/**
<p>Returns the paint engine's painter.</p>

*/"/>
    <method name="public final void setActive(boolean newState__0)" doc="/**
<p>Sets the active state of the paint engine to <i>state</i>.</p>

*/"/>
    <method name="public final void setDirty(com.trolltech.qt.gui.QPaintEngine.DirtyFlags df__0)"/>
    <method name="public final void setPaintDevice(com.trolltech.qt.gui.QPaintDeviceInterface device__0)" doc="/**
<p>Sets the paintdevice that this engine operates on to <i>device</i></p>

*/"/>
    <method name="public final void setSystemClip(com.trolltech.qt.gui.QRegion baseClip__0)" doc="/**
<p>Sets the system clip for this engine. The system clip defines the basis area that the engine has to draw in. All clips that are set must be an intersection with the system clip.</p>
<p>Reset the systemclip to no clip by setting an empty region.</p>

*/"/>
    <method name="public final void setSystemRect(com.trolltech.qt.core.QRect rect__0)" doc="/**
<p>Sets the target rect for drawing within the backing store. This function should ONLY be used by the backing store.</p>

*/"/>
    <method name="public final void syncState()" doc="/**
<p>Updates all dirty states in this engine. This function should ONLY be used when drawing with native handles directly and immediate sync from QPainters state to the native state is required.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion systemClip()" doc="/**
<p>Returns the system clip. The system clip is read only while the painter is active. An empty region indicates that system clip is not in use.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect systemRect()" doc="/**
<p>Retreives the rect for drawing within the backing store. This function should ONLY be used by the backing store.</p>

*/"/>
    <method name="public final boolean testDirty(com.trolltech.qt.gui.QPaintEngine.DirtyFlags df__0)"/>
    <method name="public abstract boolean begin(com.trolltech.qt.gui.QPaintDeviceInterface pdev__0)" doc="/**
<p>Reimplement this function to initialise your paint engine when painting is to start on the paint device <i>pdev</i>. Return true if the initialization was successful; otherwise return false.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QPoint coordinateOffset()" doc="/**
<p>Returns the offset from the painters origo to the engines origo. This value is used by QPainter for engines who have internal double buffering.</p>
<p>This function only makes sense when the engine is active.</p>

*/"/>
    <method name="public void drawEllipse(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>The default implementation of this function calls the floating point version of this function</p>

*/"/>
    <method name="public void drawEllipse(com.trolltech.qt.core.QRectF r__0)" doc="/**
<p>Reimplement this function to draw the largest ellipse that can be contained within rectangle <i>rect</i>.</p>
<p>The default implementation calls drawPolygon().</p>

*/"/>
    <method name="public void drawImage(com.trolltech.qt.core.QRectF r__0, com.trolltech.qt.gui.QImage pm__1, com.trolltech.qt.core.QRectF sr__2, com.trolltech.qt.core.Qt.ImageConversionFlags flags__3)" doc="/**
<p>Reimplement this function to draw the part of the <i>image</i> specified by the <i>sr</i> rectangle in the given <i>rectangle</i> using the given conversion flags <i>flags</i>, to convert it to a pixmap.</p>

*/"/>
    <method name="public void drawPath(com.trolltech.qt.gui.QPainterPath path__0)" doc="/**
<p>The default implementation ignores the <i>path</i> and does nothing.</p>

*/"/>
    <method name="public abstract void drawPixmap(com.trolltech.qt.core.QRectF r__0, com.trolltech.qt.gui.QPixmap pm__1, com.trolltech.qt.core.QRectF sr__2)" doc="/**
<p>Reimplement this function to draw the part of the <i>pm</i> specified by the <i>sr</i> rectangle in the given <i>r</i>.</p>

*/"/>
    <method name="public void drawTextItem(com.trolltech.qt.core.QPointF p__0, com.trolltech.qt.gui.QTextItem textItem__1)" doc="/**
<p>This function draws the text item <i>textItem</i> at position <i>p</i>. The default implementation of this function converts the text to a QPainterPath and paints the resulting path.</p>

*/"/>
    <method name="public void drawTiledPixmap(com.trolltech.qt.core.QRectF r__0, com.trolltech.qt.gui.QPixmap pixmap__1, com.trolltech.qt.core.QPointF s__2)" doc="/**
<p>Reimplement this function to draw the <i>pixmap</i> in the given <i>rect</i>, starting at the given <i>p</i>. The pixmap will be drawn repeatedly until the <i>rect</i> is filled.</p>

*/"/>
    <method name="public abstract boolean end()" doc="/**
<p>Reimplement this function to finish painting on the current paint device. Return true if painting was finished successfully; otherwise return false.</p>

*/"/>
    <method name="public abstract com.trolltech.qt.gui.QPaintEngine.Type type()" doc="/**
<p>Reimplement this function to return the paint engine Type.</p>

*/"/>
    <method name="public abstract void updateState(com.trolltech.qt.gui.QPaintEngineState state__0)" doc="/**
<p>Reimplement this function to update the state of a paint engine.</p>
<p>When implemented, this function is responsible for checking the paint engine's current <i>state</i> and update the properties that are changed. Use the QPaintEngineState::state() function to find out which properties that must be updated, then use the corresponding <a href=&quote;qpaintenginestate.jdoc#getfunction&quote;>get function</a> to retrieve the current values for the given properties.</p>

*/"/>
    <enum name="PolygonDrawMode" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The polygon should be drawn using OddEven fill rule.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The polygon should be drawn using Winding fill rule.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The polygon is a convex polygon and can be drawn using specialized algorithms where available.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Only the outline of the polygon should be drawn.</td></tr>
</table></p>

*/"/>
    <enum name="Type" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Mac OS X's Quartz2D (CoreGraphics)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Mac OS X's QuickDraw</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Qtopia Core</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QPicture format</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Scalable Vector Graphics XML format</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>First user type ID</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Last user type ID</td></tr>
</table></p>

*/"/>
    <enum name="PaintEngineFeature" doc="/**
<p>This enum is used to describe the features or capabilities that the paint engine has. If a feature is not supported by the engine, QPainter will do a best effort to emulate that feature through other means and pass on an alpha blended QImage to the engine with the emulated results. Some features cannot be emulated: AlphaBlend and PorterDuff.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine has support for transforming drawing primitives.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine has support for transforming brush patterns.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine can transform pixmaps, including rotation and shearing.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine is capable of rendering brushes with the brush patterns specified in Qt::BrushStyle.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine supports linear gradient fills.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine supports radial gradient fills.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine supports conical gradient fills.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine can alpha blend primitives.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine supports Porter-Duff operations</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine has path support.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine can use antialising to improve the appearance of rendered primitives.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine supports drawing strokes that contain brushes as fills, not just solid colors (e.g. a dashed gradient line of width 2).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine supports the feature provided by QPainter::setOpacity().</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine is capable of rendering brushes that has a texture with an alpha channel or a mask.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The engine is capable of painting outside of paint events.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
</table></p>

*/"/>
    <enum name="DirtyFlag" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The pen is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The brush is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The brush origin is dirty and needs to updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The font is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The background is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The background mode is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The transform is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The clip region is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The clip path is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The render hints is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The composition mode is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether clipping is enabled or not is dirty and needs to be updated.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The constant opacity has changed and needs to be updated as part of the state change in QPaintEngine::updateState().</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Convenience enum used internally.</td></tr>
</table></p>
<p>These types are used by QPainter to trigger lazy updates of the various states in the QPaintEngine using QPaintEngine::updateState().</p>
<p>A paint engine must update every dirty state.</p>

*/"/>
    <method name="protected final com.trolltech.qt.gui.QPaintEngineState state()"/>
    <method name="protected final void setState(com.trolltech.qt.gui.QPaintEngineState state)"/>
    <method name="protected final com.trolltech.qt.gui.QPaintEngine.PaintEngineFeatures gccaps()"/>
    <method name="protected final void setGccaps(com.trolltech.qt.gui.QPaintEngine.PaintEngineFeatures gccaps)"/>
</class>
