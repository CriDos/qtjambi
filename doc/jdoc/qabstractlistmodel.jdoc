<class name="QAbstractListModel" doc="/**
<p>The QAbstractListModel class provides an abstract model that can be subclassed to create one-dimensional list models.</p>
<p>QAbstractListModel provides a standard interface for models that represent their data as a simple non-hierarchical sequence of items. It is not used directly, but must be subclassed.</p>
<p>Since the model provides a more specialized interface than QAbstractItemModel, it is not suitable for use with tree views; you will need to subclass QAbstractItemModel if you want to provide a model for that purpose. If you need to use a number of list models to manage data, it may be more appropriate to subclass QAbstractTableModel class instead.</p>
<p>Simple models can be created by subclassing this class and implementing the minimum number of required functions. For example, we could implement a simple read-only QStringList-based model that provides a list of strings to a QListView widget. In such a case, we only need to implement the rowCount() function to return the number of items in the list, and the data() function to retrieve items from the list.</p>
<p>Since the model represents a one-dimensional structure, the rowCount() function returns the total number of items in the model. The columnCount() function is implemented for interoperability with all kinds of views, but by default informs views that the model contains only one column.</p>
<a name=&quote;subclassing&quote;></a>
<h3>Subclassing</h3>
<p><b>Note:</b> Some general guidelines for subclassing models are available in the Model Subclassing Reference.</p>
<p>When subclassing QAbstractListModel, you must provide implementations of the rowCount() and data() functions. Well behaved models also provide a headerData() implementation.</p>
<p>For editable list models, you must also provide an implementation of setData(), implement the flags() function so that it returns a value containing Qt::ItemIsEditable.</p>
<p>Note that QAbstractListModel provides a default implementation of columnCount() that informs views that there is only a single column of items in this model.</p>
<p>Models that provide interfaces to resizable list-like data structures can provide implementations of insertRows() and removeRows(). When implementing these functions, it is important to call the appropriate functions so that all connected views are aware of any changes:</p>
<ul>
<li>An insertRows() implementation must call beginInsertRows() <i>before</i> inserting new rows into the data structure, and it must call endInsertRows() <i>immediately afterwards</i>.</li>
<li>A removeRows() implementation must call beginRemoveRows() <i>before</i> the rows are removed from the data structure, and it must call endRemoveRows() <i>immediately afterwards</i>.</li>
</ul>

*/">
    <method name="public QAbstractListModel(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs an abstract list model with the given <i>parent</i>.</p>

*/"/>
    <method name="@Deprecated public final int columnCount(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Returns the number of columns in the list with the given <i>parent</i>.</p>

*/"/>
    <method name="@Deprecated public final boolean hasChildren(com.trolltech.qt.core.QModelIndex parent__0)"/>
    <method name="@Deprecated public final com.trolltech.qt.core.QModelIndex parent(com.trolltech.qt.core.QModelIndex child__0)" doc="/**
<p>Returns the parent of the model item with the given <i>index</i>.</p>

*/"/>
    <method name="public boolean dropMimeData(com.trolltech.qt.gui.QMimeData data__0, com.trolltech.qt.core.Qt.DropAction action__1, int row__2, int column__3, com.trolltech.qt.core.QModelIndex parent__4)"/>
    <method name="public com.trolltech.qt.core.QModelIndex index(int row__0, int column__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Returns the index of the data in <i>row</i> and <i>column</i> with <i>parent</i>.</p>

*/"/>
</class>
