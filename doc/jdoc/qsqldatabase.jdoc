<class name="QSqlDatabase" doc="/**
<p>The QSqlDatabase class represents a connection to a database.</p>
<p>The QSqlDatabase class provides an abstract interface for accessing database backends. It relies on database-specific QSqlDrivers to actually access and manipulate data.</p>
<p>The following code shows how to initialize a connection:</p>
<pre>        QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QPSQL&quot;);
        db.setHostName(&quot;acidalia&quot;);
        db.setDatabaseName(&quot;customdb&quot;);
        db.setUserName(&quot;mojito&quot;);
        db.setPassword(&quot;J0a1m8&quot;);
        bool ok = db.open();</pre>
<p>Once a QSqlDatabase object has been created you can set the connection parameters with setDatabaseName(), setUserName(), setPassword(), setHostName(), setPort(), and setConnectOptions(). Once the parameters have been set up you can call open() to open the connection.</p>
<p>The connection defined above is a nameless connection. If is the default connection and can be accessed using database() later on:</p>
<pre>        QSqlDatabase db = QSqlDatabase::database();</pre>
<p>To make programming more convenient, QSqlDatabase is a value class. Any changes done to a database connection through one QSqlDatabase object will affect other QSqlDatabase objects representing the same connection. Call cloneConnection() if you want to create an independent database connection based on an existing one.</p>
<p>If you need multiple database connections simultaneously, specify an arbitrary name to addDatabase() and database(). Call removeDatabase() to remove connections. QSqlDatabase will output a warning if you try to remove a connection referenced by other QSqlDatabase objects. Use contains() to see if a given connection name is in the list of connections.</p>
<p>Once a connection is established you can see what tables the database offers with tables(), find the primary index for a table with primaryIndex(), get meta-information about a table's fields (e.g., their names) with record(), and execute a query with exec().</p>
<p>If transactions are supported, you can use transaction() to start a transaction, and then commit() or rollback() to complete it. You can find out whether transactions are supported using QSqlDriver::hasFeature().</p>
<p>If an error occurred, it is given by lastError().</p>
<p>The names of the underlying SQL drivers are available from drivers(); you can check for a particular driver with isDriverAvailable(). If you have created your own custom driver, you can register it with registerSqlDriver().</p>

*/">
    <method name="protected QSqlDatabase(com.trolltech.qt.sql.QSqlDriver driver__0)" doc="/**
<p>Creates a database connection using the given <i>driver</i>.</p>

*/"/>
    <method name="public QSqlDatabase(com.trolltech.qt.sql.QSqlDatabase other__0)" doc="/**
<p>Creates a copy of <i>other</i>.</p>

*/"/>
    <method name="protected QSqlDatabase(java.lang.String type__0)" doc="/**
<p>Creates a QSqlDatabase connection that uses the driver referred to by <i>type</i>. If the <i>type</i> is not recognized, the database connection will have no functionality.</p>
<p>The currently available driver types are:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Driver Type</th><th>Description</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QDB2</td><td>IBM DB2</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QIBASE</td><td>Borland InterBase Driver</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QMYSQL</td><td>MySQL Driver</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QOCI</td><td>Oracle Call Interface Driver</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QODBC</td><td>ODBC Driver (includes Microsoft SQL Server)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QPSQL</td><td>PostgreSQL Driver</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QSQLITE</td><td>SQLite version 3 or above</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QSQLITE2</td><td>SQLite version 2</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QTDS</td><td>Sybase Adaptive Server</td></tr>
</table></p>
<p>Additional third party drivers, including your own custom drivers, can be loaded dynamically.</p>

*/"/>
    <method name="public QSqlDatabase()" doc="/**
<p>Creates an empty, invalid QSqlDatabase object. Use addDatabase(), removeDatabase(), and database() to get valid QSqlDatabase objects.</p>

*/"/>
    <method name="public final void close()" doc="/**
<p>Closes the database connection, freeing any resources acquired. This will also affect copies of this QSqlDatabase object.</p>

*/"/>
    <method name="public final boolean commit()" doc="/**
<p>Commits a transaction to the database if the driver supports transactions and a transaction() has been started. Returns true if the operation succeeded; otherwise returns false.</p>
<p>Note that on some databases, this function will not work if there is an active QSqlQuery on the database. Use the lastError() function to retrieve database-specific error data about the error that occurred.</p>

*/"/>
    <method name="public final java.lang.String connectOptions()" doc="/**
<p>Returns the connection options string used for this connection. The string may be empty.</p>

*/"/>
    <method name="public final java.lang.String databaseName()" doc="/**
<p>Returns the connection's database name; it may be empty.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlDriver driver()" doc="/**
<p>Returns the database driver used to access the database connection.</p>

*/"/>
    <method name="public final java.lang.String driverName()" doc="/**
<p>Returns the connection's driver name.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlQuery exec(java.lang.String query__0)" doc="/**
<p>Executes a SQL statement on the database and returns a QSqlQuery object. Use lastError() to retrieve error information. If <i>query</i> is empty, an empty, invalid query is returned and lastError() is not affected.</p>

*/"/>
    <method name="public final java.lang.String hostName()" doc="/**
<p>Returns the connection's host name. It may be empty.</p>

*/"/>
    <method name="public final boolean isOpen()" doc="/**
<p>Returns true if the database connection is currently open; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isOpenError()" doc="/**
<p>Returns true if there was an error opening the database connection; otherwise returns false. Error information can be retrieved using the lastError() function.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the QSqlDatabase has a valid driver.</p>
<p>Example:</p>
<pre>    QSqlDatabase db;
    qDebug() &lt;&lt; db.isValid();    <span class=&quote;comment&quote;>// Returns false</span>

    db = QSqlDatabase::database(&quot;sales&quot;);
    qDebug() &lt;&lt; db.isValid();    <span class=&quote;comment&quote;>// Returns true if &quot;sales&quot; connection exists</span>

    QSqlDatabase::removeDatabase(&quot;sales&quot;);
    qDebug() &lt;&lt; db.isValid();    <span class=&quote;comment&quote;>// Returns false</span></pre>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlError lastError()" doc="/**
<p>Returns information about the last error that occurred on the database.</p>
<p>Failures that occur in conjunction with an individual query are reported by QSqlQuery::lastError().</p>

*/"/>
    <method name="public final boolean open()" doc="/**
<p>Opens the database connection using the current connection values. Returns true on success; otherwise returns false. Error information can be retrieved using lastError().</p>

*/"/>
    <method name="public final boolean open(java.lang.String user__0, java.lang.String password__1)" doc="/**
<p>Opens the database connection using the given <i>user</i> name and <i>password</i>. Returns true on success; otherwise returns false. Error information can be retrieved using the lastError() function.</p>
<p>This function does not store the password it is given. Instead, the password is passed directly to the driver for opening the connection and it is then discarded.</p>

*/"/>
    <method name="public final java.lang.String password()" doc="/**
<p>Returns the connection's password. If the password was not set with setPassword(), and if the password was given in the open() call, or if no password was used, an empty string is returned.</p>

*/"/>
    <method name="public final int port()" doc="/**
<p>Returns the connection's port number. The value is undefined if the port number has not been set.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlIndex primaryIndex(java.lang.String tablename__0)" doc="/**
<p>Returns the primary index for table <i>tablename</i>. If no primary index exists an empty QSqlIndex is returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlRecord record(java.lang.String tablename__0)" doc="/**
<p>Returns a QSqlRecord populated with the names of all the fields in the table (or view) called <i>tablename</i>. The order in which the fields appear in the record is undefined. If no such table (or view) exists, an empty record is returned.</p>

*/"/>
    <method name="public final boolean rollback()" doc="/**
<p>Rolls a transaction back on the database if the driver supports transactions and a transaction() has been started. Returns true if the operation succeeded; otherwise returns false.</p>

*/"/>
    <method name="public final void setConnectOptions(java.lang.String options__0)" doc="/**
<p>Sets database-specific <i>options</i>. This must be done before the connection is opened or it has no effect (or you can close() the connection, call this function and open() the connection again).</p>
<p>The format of the <i>options</i> string is a semicolon separated list of option names or option=value pairs. The options depend on the database client used:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>ODBC</th><th>MySQL</th><th>PostgreSQL</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><ul>
<li>SQL_ATTR_ACCESS_MODE</li>
<li>SQL_ATTR_LOGIN_TIMEOUT</li>
<li>SQL_ATTR_CONNECTION_TIMEOUT</li>
<li>SQL_ATTR_CURRENT_CATALOG</li>
<li>SQL_ATTR_METADATA_ID</li>
<li>SQL_ATTR_PACKET_SIZE</li>
<li>SQL_ATTR_TRACEFILE</li>
<li>SQL_ATTR_TRACE</li>
<li>SQL_ATTR_CONNECTION_POOLING</li>
</ul>
</td><td><ul>
<li>CLIENT_COMPRESS</li>
<li>CLIENT_FOUND_ROWS</li>
<li>CLIENT_IGNORE_SPACE</li>
<li>CLIENT_SSL</li>
<li>CLIENT_ODBC</li>
<li>CLIENT_NO_SCHEMA</li>
<li>CLIENT_INTERACTIVE</li>
<li>UNIX_SOCKET</li>
</ul>
</td><td><ul>
<li>connect_timeout</li>
<li>options</li>
<li>tty</li>
<li>requiressl</li>
<li>service</li>
</ul>
</td></tr>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>DB2</th><th>OCI</th><th>TDS</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><ul>
<li>SQL_ATTR_ACCESS_MODE</li>
<li>SQL_ATTR_LOGIN_TIMEOUT</li>
</ul>
</td><td><ul>
<li>OCI_ATTR_PREFETCH_ROWS</li>
<li>OCI_ATTR_PREFETCH_MEMORY</li>
</ul>
</td><td><i>none</i></td></tr>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>SQLite</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><ul>
<li>QSQLITE_BUSY_TIMEOUT</li>
</ul>
</td></tr>
</table></p>
<p>Examples:</p>
<pre>    ...
<span class=&quote;comment&quote;>    // MySQL connection</span>
    db.setConnectOptions(&quot;CLIENT_SSL=1;CLIENT_IGNORE_SPACE=1&quot;); <span class=&quote;comment&quote;>// use an SSL connection to the server</span>
    if (!db.open()) {
        db.setConnectOptions(); <span class=&quote;comment&quote;>// clears the connect option string</span>
        ...
    }
    ...
<span class=&quote;comment&quote;>    // PostgreSQL connection</span>
    db.setConnectOptions(&quot;requiressl=1&quot;); <span class=&quote;comment&quote;>// enable PostgreSQL SSL connections</span>
    if (!db.open()) {
        db.setConnectOptions(); <span class=&quote;comment&quote;>// clear options</span>
        ...
    }
    ...
<span class=&quote;comment&quote;>    // ODBC connection</span>
    db.setConnectOptions(&quot;SQL_ATTR_ACCESS_MODE=SQL_MODE_READ_ONLY;SQL_ATTR_TRACE=SQL_OPT_TRACE_ON&quot;); <span class=&quote;comment&quote;>// set ODBC options</span>
    if (!db.open()) {
        db.setConnectOptions(); <span class=&quote;comment&quote;>// don't try to set this option</span>
        ...
    }</pre>
<p>Refer to the client library documentation for more information about the different options.</p>

*/"/>
    <method name="public final void setDatabaseName(java.lang.String name__0)" doc="/**
<p>Sets the connection's name to <i>name</i>. This must be done before the connection is opened or it has no effect; (or you can close() the connection, call this function and open() the connection again). The name is database-specific.</p>
<p>For the QOCI (Oracle) driver, the database name is the TNS Service Name.</p>
<p>For the QODBC driver, the <i>name</i> can either be a DSN, a DSN filename (in which case the file must have a <tt>.dsn</tt> extension), or a connection string.</p>
<p>For example, Microsoft Access users can use the following connection string to open an <tt>.mdb</tt> file directly, instead of having to create a DSN entry in the ODBC manager:</p>
<pre>    ...
    db = QSqlDatabase::addDatabase(&quot;QODBC&quot;);
    db.setDatabaseName(&quot;DRIVER={Microsoft Access Driver (*.mdb)};FIL={MS Access};DBQ=myaccessfile.mdb&quot;);
    if (db.open()) {
        <span class=&quote;comment&quote;>// success!</span>
    }
    ...</pre>
<p>There is no default value.</p>

*/"/>
    <method name="public final void setHostName(java.lang.String host__0)" doc="/**
<p>Sets the connection's host name to <i>host</i>. This must be done before the connection is opened or it has no effect (or you can close() the connection, call this function and open() the connection again).</p>
<p>There is no default value.</p>

*/"/>
    <method name="public final void setPassword(java.lang.String password__0)" doc="/**
<p>Sets the connection's password to <i>password</i>. This must be done before the connection is opened or it has no effect (or you can close() the connection, call this function and open() the connection again).</p>
<p>There is no default value.</p>
<p><b>Warning:</b> This function stores the password in plain text within Qt. Use the open() call that takes a password as parameter to avoid this behavior.</p>

*/"/>
    <method name="public final void setPort(int p__0)" doc="/**
<p>Sets the connection's port number to <i>port</i>. This must be done before the connection is opened or it has no effect (or you can close() the connection, call this function and open() the connection again).</p>
<p>There is no default value.</p>
<p>setDatabaseName() setConnectOptions() open()</p>

*/"/>
    <method name="public final void setUserName(java.lang.String name__0)" doc="/**
<p>Sets the connection's user name to <i>name</i>. This must be done before the connection is opened or it has no effect (or you can close() the connection, call this function and open() the connection again).</p>
<p>There is no default value.</p>
<p>setPort() setConnectOptions() open()</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; tables(com.trolltech.qt.sql.QSql.TableType type__0)" doc="/**
<p>Returns a list of the database's tables, system tables and views, as specified by the parameter <i>type</i>.</p>

*/"/>
    <method name="public final boolean transaction()" doc="/**
<p>Begins a transaction on the database if the driver supports transactions. Returns true if the operation succeeded; otherwise returns false.</p>

*/"/>
    <method name="public final java.lang.String userName()" doc="/**
<p>Returns the connection's user name; it may be empty.</p>

*/"/>
    <method name="public native static com.trolltech.qt.sql.QSqlDatabase addDatabase(java.lang.String type__0, java.lang.String connectionName__1)" doc="/**
<p>Adds a database to the list of database connections using the driver <i>type</i> and the connection name <i>connectionName</i>. If there already exists a database connection called <i>connectionName</i>, that connection is removed.</p>
<p>The database connection is referred to by <i>connectionName</i>. The newly added database connection is returned.</p>
<p>If <i>connectionName</i> is not specified, the newly added database connection becomes the default database connection for the application, and subsequent calls to database() without a database name parameter will return a reference to it. If <i>connectionName</i> is given, use database(<i>connectionName</i>) to retrieve a pointer to the database connection.</p>
<p><b>Warning:</b> If you add a database with the same name as an existing database, the new database will replace the old one. This will happen automatically if you call this function more than once without specifying <i>connectionName</i>.</p>
<p>To make use of the connection, you will need to set it up, for example by calling some or all of setDatabaseName(), setUserName(), setPassword(), setHostName(), setPort(), and setConnectOptions(), and then you'll need to open() the connection.</p>

*/"/>
    <method name="public final static com.trolltech.qt.sql.QSqlDatabase addDatabase(com.trolltech.qt.sql.QSqlDriver driver__0, java.lang.String connectionName__1)" doc="/**
<p>This function is useful if you need to set up the database connection and instantiate the driver yourself. If you do this, it is recommended that you include the driver code in your own application. For example, setting up a custom PostgreSQL connection and instantiating the QPSQL driver can be done like this:</p>
<pre>    #include &quot;qtdir/src/sql/drivers/psql/qsql_psql.cpp&quot;</pre>
<p>(We assume that <tt>qtdir</tt> is the directory where Qt is installed.) This will pull in the code that is needed to use the PostgreSQL client library and to instantiate a QPSQLDriver object, assuming that you have the PostgreSQL headers somewhere in your include search path.</p>
<pre>    PGconn *con = PQconnectdb(&quot;host=server user=bart password=simpson dbname=springfield&quot;);
    QPSQLDriver *drv =  new QPSQLDriver(con);
    QSqlDatabase db = QSqlDatabase::addDatabase(drv); <span class=&quote;comment&quote;>// becomes the new default connection</span>
    QSqlQuery query;
    query.exec(&quot;SELECT NAME, ID FROM STAFF&quot;);
    ...</pre>
<p>The above code sets up a PostgreSQL connection and instantiates a QPSQLDriver object. Next, addDatabase() is called to add the connection to the known connections so that it can be used by the Qt SQL classes. When a driver is instantiated with a connection handle (or set of handles), Qt assumes that you have already opened the database connection.</p>
<p>Remember that you must link your application against the database client library as well. The simplest way to do this is to add lines like the ones below to your <tt>.pro</tt> file:</p>
<pre>    unix:LIBS += -lpq
    win32:LIBS += libpqdll.lib</pre>
<p>You will need to have the client library in your linker's search path.</p>
<p>The method described above will work for all the drivers, the only difference is the arguments the driver constructors take. Below is an overview of the drivers and their constructor arguments.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Driver</th><th>Class name</th><th>Constructor arguments</th><th>File to include</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QPSQL</td><td>QPSQLDriver</td><td>PGconn *connection</td><td><tt>qsql_psql.cpp</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QMYSQL</td><td>QMYSQLDriver</td><td>MYSQL *connection</td><td><tt>qsql_mysql.cpp</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QOCI</td><td>QOCIDriver</td><td>OCIEnv *environment, OCISvcCtx *serviceContext</td><td><tt>qsql_oci.cpp</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QODBC</td><td>QODBCDriver</td><td>SQLHANDLE environment, SQLHANDLE connection</td><td><tt>qsql_odbc.cpp</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QDB2</td><td>QDB2</td><td>SQLHANDLE environment, SQLHANDLE connection</td><td><tt>qsql_db2.cpp</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QTDS</td><td>QTDSDriver</td><td>LOGINREC *loginRecord, DBPROCESS *dbProcess, const QString &amp;hostName</td><td><tt>qsql_tds.cpp</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>QSQLITE</td><td>QSQLiteDriver</td><td>sqlite *connection</td><td><tt>qsql_sqlite.cpp</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QIBASE</td><td>QIBaseDriver</td><td>isc_db_handle connection</td><td><tt>qsql_ibase.cpp</tt></td></tr>
</table></p>
<p>The host name (or service name) is needed when constructing the QTDSDriver for creating new connections for internal queries. This is to prevent the simultaneous usage of several QSqlQuery/QSqlCursor objects from blocking each other.</p>
<p><b>Warning:</b> If you add a database with the same name as an existing database, the new database will replace the old one.</p>
<p><b>Warning:</b> The SQL framework takes ownership of the <i>driver</i> pointer, and it should not be deleted. If you want to explicitly remove the connection, use removeDatabase().</p>

*/"/>
    <method name="public final static com.trolltech.qt.sql.QSqlDatabase cloneDatabase(com.trolltech.qt.sql.QSqlDatabase other__0, java.lang.String connectionName__1)" doc="/**
<p>Clones the database connection <i>other</i> and and stores it as <i>connectionName</i>. All the settings from the original database, e.g. databaseName(), hostName(), etc., are copied across. Does nothing if <i>other</i> is an invalid database. Returns the newly created database connection.</p>
<p>Note that the connection is not opened, to use it, it is neccessary to call open() first.</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; connectionNames()" doc="/**
<p>Returns a list containing the names of all connections.</p>

*/"/>
    <method name="public native static boolean contains(java.lang.String connectionName__0)" doc="/**
<p>Returns true if the list of database connections contains <i>connectionName</i>; otherwise returns false.</p>

*/"/>
    <method name="public native static com.trolltech.qt.sql.QSqlDatabase database(java.lang.String connectionName__0, boolean open__1)" doc="/**
<p>Returns the database connection called <i>connectionName</i>. The database connection must have been previously added with addDatabase(). If <i>open</i> is true (the default) and the database connection is not already open it is opened now. If no <i>connectionName</i> is specified the default connection is used. If <i>connectionName</i> does not exist in the list of databases, an invalid connection is returned.</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; drivers()" doc="/**
<p>Returns a list of all the available database drivers.</p>

*/"/>
    <method name="public native static boolean isDriverAvailable(java.lang.String name__0)" doc="/**
<p>Returns true if a driver called <i>name</i> is available; otherwise returns false.</p>

*/"/>
    <method name="public final static void registerSqlDriver(java.lang.String name__0, com.trolltech.qt.sql.QSqlDriverCreatorBase creator__1)" doc="/**
<p>This function registers a new SQL driver called <i>name</i>, within the SQL framework. This is useful if you have a custom SQL driver and don't want to compile it as a plugin.</p>
<p>Example:</p>
<pre>    QSqlDatabase::registerSqlDriver(&quot;MYDRIVER&quot;,
                                    new QSqlDriverCreator&lt;MyDatabaseDriver&gt;);
    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;MYDRIVER&quot;);</pre>
<p>QSqlDatabase takes ownership of the <i>creator</i> pointer, so you mustn't delete it yourself.</p>

*/"/>
    <method name="public native static void removeDatabase(java.lang.String connectionName__0)" doc="/**
<p>Removes the database connection <i>connectionName</i> from the list of database connections.</p>
<p><b>Warning:</b> There should be no open queries on the database connection when this function is called, otherwise a resource leak will occur.</p>
<p>Example:</p>
<pre><span class=&quote;comment&quote;>    // WRONG</span>
    QSqlDatabase db = QSqlDatabase::database(&quot;sales&quot;);
    QSqlQuery query(&quot;SELECT NAME, DOB FROM EMPLOYEES&quot;, db);
    QSqlDatabase::removeDatabase(&quot;sales&quot;); <span class=&quote;comment&quote;>// will output a warning</span>

<span class=&quote;comment&quote;>    // &quot;db&quot; is now a dangling invalid database connection,</span>
<span class=&quote;comment&quote;>    // &quot;query&quot; contains an invalid result set</span></pre>
<p>The correct way to do it:</p>
<pre>    {
        QSqlDatabase db = QSqlDatabase::database(&quot;sales&quot;);
        QSqlQuery query(&quot;SELECT NAME, DOB FROM EMPLOYEES&quot;, db);
    }
<span class=&quote;comment&quote;>    // Both &quot;db&quot; and &quot;query&quot; are destroyed because they are out of scope</span>
    QSqlDatabase::removeDatabase(&quot;sales&quot;); <span class=&quote;comment&quote;>// correct</span></pre>

*/"/>
</class>
