<class name="QTime" doc="/**
<p>The QTime class provides clock time functions.</p>
<p>A QTime object contains a clock time, i.e. the number of hours, minutes, seconds, and milliseconds since midnight. It can read the current time from the system clock and measure a span of elapsed time. It provides functions for comparing times and for manipulating a time by adding a number of milliseconds.</p>
<p>QTime uses the 24-hour clock format; it has no concept of AM/PM. Unlike QDateTime, QTime knows nothing about time zones or daylight savings time (DST).</p>
<p>A QTime object is typically created either by giving the number of hours, minutes, seconds, and milliseconds explicitly, or by using the static function currentTime(), which creates a QTime object that contains the system's local time. Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.</p>
<p>The hour(), minute(), second(), and msec() functions provide access to the number of hours, minutes, seconds, and milliseconds of the time. The same information is provided in textual format by the toString() function.</p>
<p>QTime provides a full set of operators to compare two QTime objects. One time is considered smaller than another if it is earlier than the other.</p>
<p>The time a given number of seconds or milliseconds later than a given time can be found using the addSecs() or addMSecs() functions. Correspondingly, the number of seconds or milliseconds between two times can be found using secsTo() or msecsTo().</p>
<p>QTime can be used to measure a span of elapsed time using the start(), restart(), and elapsed() functions.</p>

*/">
    <method name="public QTime()" doc="/**
<p>Constructs a null time object. A null time is identical to a QTime(0, 0, 0, 0) (i.e., midnight), except that isNull() and isValid() return false.</p>

*/"/>
    <method name="public QTime(int h__0, int m__1, int s__2, int ms__3)" doc="/**
<p>Constructs a time with hour <i>h</i>, minute <i>m</i>, seconds <i>s</i> and milliseconds <i>ms</i>.</p>
<p><i>h</i> must be in the range 0 to 23, <i>m</i> and <i>s</i> must be in the range 0 to 59, and <i>ms</i> must be in the range 0 to 999.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTime addMSecs(int ms__0)" doc="/**
<p>Returns a QTime object containing a time <i>ms</i> milliseconds later than the time of this object (or earlier if <i>ms</i> is negative).</p>
<p>Note that the time will wrap if it passes midnight. See addSecs() for an example.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTime addSecs(int secs__0)" doc="/**
<p>Returns a QTime object containing a time <i>nsecs</i> seconds later than the time of this object (or earlier if <i>nsecs</i> is negative).</p>
<p>Note that the time will wrap if it passes midnight.</p>
<p>Example:</p>
<pre>    QTime n(14, 0, 0);                <span class=&quote;comment&quote;>// n == 14:00:00</span>
    QTime t;
    t = n.addSecs(70);                <span class=&quote;comment&quote;>// t == 14:01:10</span>
    t = n.addSecs(-70);               <span class=&quote;comment&quote;>// t == 13:58:50</span>
    t = n.addSecs(10 * 60 * 60 + 5);  <span class=&quote;comment&quote;>// t == 00:00:05</span>
    t = n.addSecs(-15 * 60 * 60);     <span class=&quote;comment&quote;>// t == 23:00:00</span></pre>

*/"/>
    <method name="public final int elapsed()" doc="/**
<p>Returns the number of milliseconds that have elapsed since the last time start() or restart() was called.</p>
<p>Note that the counter wraps to zero 24 hours after the last call to start() or restart.</p>
<p>Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.</p>
<p><b>Warning:</b> If the system's clock setting has been changed since the last time start() or restart() was called, the result is undefined. This can happen when daylight savings time is turned on or off.</p>

*/"/>
    <method name="public final int hour()" doc="/**
<p>Returns the hour part (0 to 23) of the time.</p>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if the time is null (i.e., the QTime object was constructed using the default constructor); otherwise returns false. A null time is also an invalid time.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the time is valid; otherwise returns false. For example, the time 23:30:55.746 is valid, but 24:12:30 is invalid.</p>

*/"/>
    <method name="public final int minute()" doc="/**
<p>Returns the minute part (0 to 59) of the time.</p>

*/"/>
    <method name="public final int msec()" doc="/**
<p>Returns the millisecond part (0 to 999) of the time.</p>

*/"/>
    <method name="public final int msecsTo(com.trolltech.qt.core.QTime arg__0)" doc="/**
<p>Returns the number of milliseconds from this time to <i>t</i>. If <i>t</i> is earlier than this time, the number of milliseconds returned is negative.</p>
<p>Because QTime measures time within a day and there are 86400 seconds in a day, the result is always between -86400000 and 86400000 ms.</p>

*/"/>
    <method name="public final int restart()" doc="/**
<p>Sets this time to the current time and returns the number of milliseconds that have elapsed since the last time start() or restart() was called.</p>
<p>This function is guaranteed to be atomic and is thus very handy for repeated measurements. Call start() to start the first measurement, and restart() for each later measurement.</p>
<p>Note that the counter wraps to zero 24 hours after the last call to start() or restart().</p>
<p><b>Warning:</b> If the system's clock setting has been changed since the last time start() or restart() was called, the result is undefined. This can happen when daylight savings time is turned on or off.</p>

*/"/>
    <method name="public final int second()" doc="/**
<p>Returns the second part (0 to 59) of the time.</p>

*/"/>
    <method name="public final int secsTo(com.trolltech.qt.core.QTime arg__0)" doc="/**
<p>Returns the number of seconds from this time to <i>t</i>. If <i>t</i> is earlier than this time, the number of seconds returned is negative.</p>
<p>Because QTime measures time within a day and there are 86400 seconds in a day, the result is always between -86400 and 86400.</p>

*/"/>
    <method name="public final boolean setHMS(int h__0, int m__1, int s__2, int ms__3)" doc="/**
<p>Sets the time to hour <i>h</i>, minute <i>m</i>, seconds <i>s</i> and milliseconds <i>ms</i>.</p>
<p><i>h</i> must be in the range 0 to 23, <i>m</i> and <i>s</i> must be in the range 0 to 59, and <i>ms</i> must be in the range 0 to 999. Returns true if the set time is valid; otherwise returns false.</p>

*/"/>
    <method name="public final void start()" doc="/**
<p>Sets this time to the current time. This is practical for timing:</p>
<pre>    QTime t;
    t.start();
    some_lengthy_task();
    qDebug(&quot;Time elapsed: %d ms&quot;, t.elapsed());</pre>

*/"/>
    <method name="public final java.lang.String toString(java.lang.String format__0)" doc="/**
<p>Returns the time as a string. The <i>format</i> parameter determines the format of the result string.</p>
<p>These expressions may be used:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>h</td><td>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>hh</td><td>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>H</td><td>the hour without a leading zero (0 to 23, even with AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>HH</td><td>the hour with a leading zero (00 to 23, even with AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>m</td><td>the minute without a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>mm</td><td>the minute with a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>s</td><td>the second whithout a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ss</td><td>the second whith a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>z</td><td>the milliseconds without leading zeroes (0 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>zzz</td><td>the milliseconds with leading zeroes (000 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>AP or A</td><td>use AM/PM display. <i>AP</i> will be replaced by either &quot;AM&quot; or &quot;PM&quot;.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ap or a</td><td>use am/pm display. <i>ap</i> will be replaced by either &quot;am&quot; or &quot;pm&quot;.</td></tr>
</table></p>
<p>All other input characters will be ignored. Any sequence of characters that are enclosed in singlequotes will be treated as text and not be used as an expression.</p>
<p>Example format strings (assuming that the QTime is 14:13:09.042)</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Format</th><th>Result</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>hh:mm:ss.zzz</td><td>14:13:09.042</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>h:m:s ap</td><td>2:13:9 pm</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>H:m:s a</td><td>14:13:9 pm</td></tr>
</table></p>
<p>If the datetime is invalid, an empty string will be returned.</p>

*/"/>
    <method name="public final java.lang.String toString(com.trolltech.qt.core.Qt.DateFormat f__0)" doc="/**
<p>Returns the time as a string. Milliseconds are not included. The <i>f</i> parameter determines the format of the string.</p>
<p>If <i>f</i> is Qt::TextDate, the string format is HH:MM:SS; e.g. 1 second before midnight would be &quot;23:59:59&quot;.</p>
<p>If <i>f</i> is Qt::ISODate, the string format corresponds to the ISO 8601 extended specification for representations of dates, which is also HH:MM:SS.</p>
<p>If <i>f</i> is Qt::LocalDate or Qt::SystemLocaleDate, the string format depends on the locale settings of the system. Identical to calling QLocale::system().toString(time, QLocale::ShortFormat). <i>Qt::LocalDate has been deprecated, please use Qt::SystemLocaleDate instead.</i></p>
<p>If <i>f</i> is Qt::LocaleDate, the string format depends on the default application locale. This is the locale set with QLocale::setDefault(), or the system locale if no default locale has been set. Identical to calling QLocale().toString(time, QLocale::ShortFormat);</p>
<p>If <i>f</i> is Qt::LocalDate, the string format depends on the locale settings of the system.</p>
<p>If the datetime is invalid, an empty string will be returned.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QTime currentTime()" doc="/**
<p>Returns the current time as reported by the system clock.</p>
<p>Note that the accuracy depends on the accuracy of the underlying operating system; not all systems provide 1-millisecond accuracy.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QTime fromString(java.lang.String s__0, java.lang.String format__1)" doc="/**
<p>Returns the QTime represented by the <i>string</i>, using the <i>format</i> given, or an invalid time if the string cannot be parsed.</p>
<p>These expressions may be used for the format:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>h</td><td>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>hh</td><td>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>m</td><td>the minute without a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>mm</td><td>the minute with a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>s</td><td>the second whithout a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ss</td><td>the second whith a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>z</td><td>the milliseconds without leading zeroes (0 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>zzz</td><td>the milliseconds with leading zeroes (000 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>AP</td><td>interpret as an AM/PM time. <i>AP</i> must be either &quot;AM&quot; or &quot;PM&quot;.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ap</td><td>Interpret as an AM/PM time. <i>ap</i> must be either &quot;am&quot; or &quot;pm&quot;.</td></tr>
</table></p>
<p>All other input characters will be treated as text. Any sequence of characters that are enclosed in single quotes will also be treated as text and not be used as an expression.</p>
<pre>    QTime time = QTime::fromString(&quot;1mm12car00&quot;, &quot;m'mm'hcarss&quot;);
<span class=&quote;comment&quote;>    // time is 12:01.00</span></pre>
<p>If the format is not satisfied an invalid QTime is returned. Expressions that do not expect leading zeroes to be given (h, m, s and z) are greedy. This means that they will use two digits even if this puts them outside the range of accepted values and leaves too few digits for other sections. For example, the following string could have meant 00:07:10, but the m will grab two digits, resulting in an invalid time:</p>
<pre>    QTime time = QTime::fromString(&quot;00:710&quot;, &quot;hh:ms&quot;); <span class=&quote;comment&quote;>// invalid</span></pre>
<p>Any field that is not represented in the format will be set to zero. For example:</p>
<pre>    QTime time = QTime::fromString(&quot;1.30&quot;, &quot;m.s&quot;);
<span class=&quote;comment&quote;>    // time is 00:01:30.000</span></pre>
<p>QDateTime::toString() QTime::toString()</p>

*/"/>
    <method name="public final static com.trolltech.qt.core.QTime fromString(java.lang.String s__0, com.trolltech.qt.core.Qt.DateFormat f__1)" doc="/**
<p>Returns the time represented in the <i>string</i> as a QTime using the <i>format</i> given, or an invalid time if this is not possible.</p>
<p><b>Warning:</b> Note that Qt::LocalDate cannot be used here.</p>

*/"/>
    <method name="public native static boolean isValid(int h__0, int m__1, int s__2, int ms__3)" doc="/**
<p>Returns true if the specified time is valid; otherwise returns false.</p>
<p>The time is valid if <i>h</i> is in the range 0 to 23, <i>m</i> and <i>s</i> are in the range 0 to 59, and <i>ms</i> is in the range 0 to 999.</p>
<p>Example:</p>
<pre>    QTime::isValid(21, 10, 30); <span class=&quote;comment&quote;>// returns true</span>
    QTime::isValid(22, 5,  62); <span class=&quote;comment&quote;>// returns false</span></pre>

*/"/>
</class>
