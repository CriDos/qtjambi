<class name="QInputMethodEvent" doc="/**
<p>The QInputMethodEvent class provides parameters for input method events.</p>
<p>Input method events are sent to widgets when an input method is used to enter text into a widget. Input methods are widely used to enter text for languages with non-Latin alphabets.</p>
<p>Note that when creating custom text editing widgets, the Qt::WA_InputMethodEnabled window attribute must be set explicitly (using the QWidget::setAttribute() function) in order to receive input method events.</p>
<p>The events are of interest to authors of keyboard entry widgets who want to be able to correctly handle languages with complex character input. Text input in such languages is usually a three step process:</p>
<ol type=&quote;1&quote;>
<li><b>Starting to Compose</b><p>When the user presses the first key on a keyboard, an input context is created. This input context will contain a string of the typed characters.</p>
</li>
<li><b>Composing</b><p>With every new key pressed, the input method will try to create a matching string for the text typed so far called preedit string. While the input context is active, the user can only move the cursor inside the string belonging to this input context.</p>
</li>
<li><b>Completing</b><p>At some point, the user will activate a user interface component (perhaps using a particular key) where they can choose from a number of strings matching the text they have typed so far. The user can either confirm their choice cancel the input; in either case the input context will be closed.</p>
</li>
</ol>
<p>QInputMethodEvent models these three stages, and transfers the information needed to correctly render the intermediate result. A QInputMethodEvent has two main parameters: preeditString() and commitString(). The preeditString() parameter gives the currently active preedit string. The commitString() parameter gives a text that should get added to (or replace parts of) the text of the editor widget. It usually is a result of the input operations and has to be inserted to the widgets text directly before the preedit string.</p>
<p>If the commitString() should replace parts of the of the text in the editor, replacementLength() will contain the number of characters to be replaced. replacementStart() contains the position at which characters are to be replaced relative from the start of the preedit string.</p>
<p>A number of attributes control the visual appearance of the preedit string (the visual appearance of text outside the preedit string is controlled by the widget only). The AttributeType enum describes the different attributes that can be set.</p>
<p>A class implementing QWidget::inputMethodEvent() should at least understand and honor the TextFormat and Cursor attributes.</p>
<p>Since input methods need to be able to query certain properties from the widget, the widget must also implement QWidget::inputMethodQuery().</p>
<p>When receiving an input method event, the text widget has to performs the following steps:</p>
<ol type=&quote;1&quote;>
<li>If the widget has selected text, the selected text should get removed.</li>
<li>Remove the text starting at replacementStart() with length replacementLength() and replace it by the commitString(). If replacementLength() is 0, replacementStart() gives the insertion position for the commitString().<p>When doing replacement the area of the preedit string is ignored, thus a replacement starting at -1 with a length of 2 will remove the last character before the preedit string and the first character afterwards, and insert the commit string directly before the preedit string.</p>
<p>If the widget implements undo/redo, this operation gets added to the undo stack.</p>
</li>
<li>If there is no current preedit string, insert the preeditString() at the current cursor position; otherwise replace the previous preeditString with the one received from this event.<p>If the widget implements undo/redo, the preeditString() should not influence the undo/redo stack in any way.</p>
<p>The widget should examine the list of attributes to apply to the preedit string. It has to understand at least the TextFormat and Cursor attributes and render them as specified.</p>
</li>
</ol>

*/">
    <method name="public QInputMethodEvent(java.lang.String preeditText__0, java.util.List&lt;com.trolltech.qt.gui.QInputMethodEvent_Attribute&gt; attributes__1)" doc="/**
<p>Construcs an event of type QEvent::InputMethod. The preedit text is set to <i>preeditText</i>, the attributes to <i>attributes</i>.</p>
<p>The commitString(), replacementStart(), and replacementLength() values can be set using setCommitString().</p>

*/"/>
    <method name="public QInputMethodEvent(com.trolltech.qt.gui.QInputMethodEvent other__0)" doc="/**
<p>Constructs a copy of <i>other</i>.</p>

*/"/>
    <method name="public QInputMethodEvent()" doc="/**
<p>Constructs an event of type QEvent::InputMethod. The attributes(), preeditString(), commitString(), replacementStart(), and replacementLength() are initialized to default values.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QInputMethodEvent_Attribute&gt; attributes()" doc="/**
<p>Returns the list of attributes passed to the QInputMethodEvent constructor. The attributes control the visual appearance of the preedit string (the visual appearance of text outside the preedit string is controlled by the widget only).</p>

*/"/>
    <method name="public final java.lang.String commitString()" doc="/**
<p>Returns the text that should get added to (or replace parts of) the text of the editor widget. It usually is a result of the input operations and has to be inserted to the widgets text directly before the preedit string.</p>

*/"/>
    <method name="public final java.lang.String preeditString()" doc="/**
<p>Returns the preedit text, i.e. the text before the user started editing it.</p>

*/"/>
    <method name="public final int replacementLength()" doc="/**
<p>Returns the number of characters to be replaced in the preedit string.</p>

*/"/>
    <method name="public final int replacementStart()" doc="/**
<p>Returns the position at which characters are to be replaced relative from the start of the preedit string.</p>

*/"/>
    <method name="public final void setCommitString(java.lang.String commitString__0, int replaceFrom__1, int replaceLength__2)" doc="/**
<p>Sets the commit string to <i>commitString</i>.</p>
<p>The commit string is the text that should get added to (or replace parts of) the text of the editor widget. It usually is a result of the input operations and has to be inserted to the widgets text directly before the preedit string.</p>
<p>If the commit string should replace parts of the of the text in the editor, <i>replaceLength</i> specifies the number of characters to be replaced. <i>replaceFrom</i> specifies the position at which characters are to be replaced relative from the start of the preedit string.</p>

*/"/>
    <enum name="AttributeType" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A QTextCharFormat for the part of the preedit string specified by start and length. value contains a QVariant of type QTextFormat specifying rendering of this part of the preedit string. There should be at most one format for every part of the preedit string. If several are specified for any character in the string the behaviour is undefined. A conforming implementation has to at least honour the backgroundColor, textColor and fontUnderline properties of the format.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>If set, a cursor should be shown inside the preedit string at position start. The length variable determines whether the cursor is visible or not. If the length is 0 the cursor is invisible. If value is a QVariant of type QColor this color will be used for rendering the cursor, otherwise the color of the surrounding text will be used. There should be at most one Cursor attribute per event. If several are specified the behaviour is undefined.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The variant contains a QLocale object specifying the language of a certain part of the preedit string. There should be at most one language set for every part of the preedit string. If several are specified for any character in the string the behaviour is undefined.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The ruby text for a part of the preedit string. There should be at most one ruby text set for every part of the preedit string. If several are specified for any character in the string the behaviour is undefined.</td></tr>
</table></p>

*/"/>
</class>
