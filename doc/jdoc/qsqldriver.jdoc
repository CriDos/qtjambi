<class name="QSqlDriver" doc="/**
<p>The QSqlDriver class is an abstract base class for accessing specific SQL databases.</p>
<p>This class should not be used directly. Use QSqlDatabase instead.</p>
<p>If you want to create your own SQL drivers, you can subclass this class and reimplement its pure virtual functions and those virtual functions that you need. See How to Write Your Own Database Driver for more information.</p>

*/">
    <method name="public QSqlDriver(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a new driver with the given <i>parent</i>.</p>

*/"/>
    <method name="public final boolean isOpenError()" doc="/**
<p>Returns true if the there was an error opening the database connection; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlError lastError()" doc="/**
<p>Returns a QSqlError object which contains information about the last error that occurred on the database.</p>

*/"/>
    <method name="public boolean beginTransaction()" doc="/**
<p>This function is called to begin a transaction. If successful, return true, otherwise return false. The default implementation does nothing and returns false.</p>

*/"/>
    <method name="public abstract void close()" doc="/**
<p>Derived classes must reimplement this pure virtual function in order to close the database connection. Return true on success, false on failure.</p>

*/"/>
    <method name="public boolean commitTransaction()" doc="/**
<p>This function is called to commit a transaction. If successful, return true, otherwise return false. The default implementation does nothing and returns false.</p>

*/"/>
    <method name="public abstract com.trolltech.qt.sql.QSqlResult createResult()" doc="/**
<p>Creates an empty SQL result on the database. Derived classes must reimplement this function and return a QSqlResult object appropriate for their database to the caller.</p>

*/"/>
    <method name="public java.lang.String escapeIdentifier(java.lang.String identifier__0, com.trolltech.qt.sql.QSqlDriver.IdentifierType type__1)" doc="/**
<p>Returns the <i>identifier</i> escaped according to the database rules. <i>identifier</i> can either be a table name or field name, dependent on <i>type</i>.</p>
<p>The default implementation does nothing.</p>

*/"/>
    <method name="public java.lang.String formatValue(com.trolltech.qt.sql.QSqlField field__0, boolean trimStrings__1)" doc="/**
<p>Returns a string representation of the <i>field</i> value for the database. This is used, for example, when constructing INSERT and UPDATE statements.</p>
<p>The default implementation returns the value formatted as a string according to the following rules:</p>
<ul>
<li>If <i>field</i> is character data, the value is returned enclosed in single quotation marks, which is appropriate for many SQL databases. Any embedded single-quote characters are escaped (replaced with two single-quote characters). If <i>trimStrings</i> is true (the default is false), all trailing whitespace is trimmed from the field.</li>
<li>If <i>field</i> is date/time data, the value is formatted in ISO format and enclosed in single quotation marks. If the date/time data is invalid, &quot;NULL&quot; is returned.</li>
<li>If <i>field</i> is bytearray data, and the driver can edit binary fields, the value is formatted as a hexadecimal string.</li>
<li>For any other field type, toString() is called on its value and the result of this is returned.</li>
</ul>

*/"/>
    <method name="public java.lang.Object handle()" doc="/**
<p>Returns the low-level database handle wrapped in a QVariant or an invalid variant if there is no handle.</p>
<p><b>Warning:</b> Use this with uttermost care and only if you know what you're doing.</p>
<p><b>Warning:</b> The handle returned here can become a stale pointer if the connection is modified (for example, if you close the connection).</p>
<p><b>Warning:</b> The handle can be NULL if the connection is not open yet.</p>
<p>The handle returned here is database-dependent, you should query the type name of the variant before accessing it.</p>
<p>This example retrieves the handle for a connection to sqlite:</p>
<pre>    QSqlDatabase db = ...;
    QVariant v = db.driver()-&gt;handle();
    if (v.isValid() &amp;&amp; v.typeName() == &quot;sqlite3*&quot;) {
        <span class=&quote;comment&quote;>// v.data() returns a pointer to the handle</span>
        sqlite3 *handle = *static_cast&lt;sqlite3 **&gt;(v.data());
        if (handle != 0) { <span class=&quote;comment&quote;>// check that it is not NULL</span>
            ...
        }
    }</pre>
<p>This snippet returns the handle for PostgreSQL or MySQL:</p>
<pre>    if (v.typeName() == &quot;PGconn*&quot;) {
        PGconn *handle = *static_cast&lt;PGconn **&gt;(v.data());
        if (handle != 0) ...
    }

    if (v.typeName() == &quot;MYSQL*&quot;) {
        MYSQL *handle = *static_cast&lt;MYSQL **&gt;(v.data());
        if (handle != 0) ...
    }</pre>

*/"/>
    <method name="public abstract boolean hasFeature(com.trolltech.qt.sql.QSqlDriver.DriverFeature f__0)" doc="/**
<p>Returns true if the driver supports feature <i>feature</i>; otherwise returns false.</p>
<p>Note that some databases need to be open() before this can be determined.</p>

*/"/>
    <method name="public boolean isOpen()" doc="/**
<p>Returns true if the database connection is open; otherwise returns false.</p>

*/"/>
    <method name="public abstract boolean open(java.lang.String db__0, java.lang.String user__1, java.lang.String password__2, java.lang.String host__3, int port__4, java.lang.String connOpts__5)" doc="/**
<p>Derived classes must reimplement this pure virtual function to open a database connection on database <i>db</i>, using user name <i>user</i>, password <i>password</i>, host <i>host</i>, port <i>port</i> and connection options <i>options</i>.</p>
<p>The function must return true on success and false on failure.</p>

*/"/>
    <method name="public com.trolltech.qt.sql.QSqlIndex primaryIndex(java.lang.String tableName__0)" doc="/**
<p>Returns the primary index for table <i>tableName</i>. Returns an empty QSqlIndex if the table doesn't have a primary index. The default implementation returns an empty index.</p>

*/"/>
    <method name="public com.trolltech.qt.sql.QSqlRecord record(java.lang.String tableName__0)" doc="/**
<p>Returns a QSqlRecord populated with the names of the fields in table <i>tableName</i>. If no such table exists, an empty record is returned. The default implementation returns an empty record.</p>

*/"/>
    <method name="public boolean rollbackTransaction()" doc="/**
<p>This function is called to rollback a transaction. If successful, return true, otherwise return false. The default implementation does nothing and returns false.</p>

*/"/>
    <method name="protected void setLastError(com.trolltech.qt.sql.QSqlError e__0)" doc="/**
<p>This function is used to set the value of the last error, <i>error</i>, that occurred on the database.</p>

*/"/>
    <method name="protected void setOpen(boolean o__0)" doc="/**
<p>This function sets the open state of the database to <i>open</i>. Derived classes can use this function to report the status of open().</p>

*/"/>
    <method name="protected void setOpenError(boolean e__0)" doc="/**
<p>This function sets the open error state of the database to <i>error</i>. Derived classes can use this function to report the status of open(). Note that if <i>error</i> is true the open state of the database is set to closed (i.e., isOpen() returns false).</p>

*/"/>
    <method name="public java.lang.String sqlStatement(com.trolltech.qt.sql.QSqlDriver.StatementType type__0, java.lang.String tableName__1, com.trolltech.qt.sql.QSqlRecord rec__2, boolean preparedStatement__3)" doc="/**
<p>Returns a SQL statement of type <i>type</i> for the table <i>tableName</i> with the values from <i>rec</i>. If <i>preparedStatement</i> is true, the string will contain placeholders instead of values.</p>
<p>This method can be used to manipulate tables without having to worry about database-dependend SQL dialects. For non-prepared statements, the values will be properly escaped.</p>

*/"/>
    <method name="public java.util.List&lt;java.lang.String&gt; tables(com.trolltech.qt.sql.QSql.TableType tableType__0)" doc="/**
<p>Returns a list of the names of the tables in the database. The default implementation returns an empty list.</p>
<p>The <i>tableType</i> argument describes what types of tables should be returned. Due to binary compatibility, the string contains the value of the enum QSql::TableTypes as text. An empty string should be treated as QSql::Tables for backward compatibility.</p>

*/"/>
    <enum name="StatementType" doc="/**
<p>This enum contains a list of SQL statement (or clause) types the driver can create.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An SQL <tt>WHERE</tt> statement (e.g., <tt>WHERE f = 5</tt>).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An SQL <tt>SELECT</tt> statement (e.g., <tt>SELECT f FROM t</tt>).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An SQL <tt>UPDATE</tt> statement (e.g., <tt>UPDATE TABLE t set f = 1</tt>).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An SQL <tt>INSERT</tt> statement (e.g., <tt>INSERT INTO t (f) values (1)</tt>).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An SQL <tt>DELETE</tt> statement (e.g., <tt>DELETE FROM t</tt>).</td></tr>
</table></p>

*/"/>
    <enum name="IdentifierType" doc="/**
<p>This enum contains a list of SQL identifier types.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A SQL field name</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A SQL table name</td></tr>
</table></p>

*/"/>
    <enum name="DriverFeature" doc="/**
<p>This enum contains a list of features a driver might support. Use hasFeature() to query whether a feature is supported or not.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports SQL transactions.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the database is capable of reporting the size of a query. Note that some databases do not support returning the size (i.e. number of rows returned) of a query, in which case QSqlQuery::size() will return -1.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports Binary Large Object fields.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports Unicode strings if the database server does.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports prepared query execution.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports the use of named placeholders.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports the use of positional placeholders.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports returning the Id of the last touched row.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whether the driver supports batched operations, see QSqlResult::execBatch()</td></tr>
</table></p>
<p>More information about supported features can be found in the Qt SQL driver documentation.</p>

*/"/>
</class>
