<class name="QRegion" doc="/**
<p>The QRegion class specifies a clip region for a painter.</p>
<p>QRegion is used with QPainter::setClipRegion() to limit the paint area to what needs to be painted. There is also a QWidget::repaint() function that takes a QRegion parameter. QRegion is the best tool for reducing flicker.</p>
<p>A region can be created from a rectangle, an ellipse, a polygon or a bitmap. Complex regions may be created by combining simple regions using united(), intersected(), subtracted(), or xored() (exclusive or). You can move a region using translate().</p>
<p>You can test whether a region isEmpty() or if it contains() a QPoint or QRect. The bounding rectangle can be found with boundingRect().</p>
<p>The function rects() gives a decomposition of the region into rectangles.</p>
<p>Example of using complex regions:</p>
<pre>    void MyWidget::paintEvent(QPaintEvent *)
    {
        QRegion r1(QRect(100, 100, 200, 80),    <span class=&quote;comment&quote;>// r1: elliptic region</span>
                   QRegion::Ellipse);
        QRegion r2(QRect(100, 120, 90, 30));    <span class=&quote;comment&quote;>// r2: rectangular region</span>
        QRegion r3 = r1.intersected(r2);        <span class=&quote;comment&quote;>// r3: intersection</span>

        QPainter painter(this);
        painter.setClipRegion(r3);
        ...                                     <span class=&quote;comment&quote;>// paint clipped graphics</span>
    }</pre>
<p>QRegion is an implicitly shared class.</p>
<p><b>Warning:</b> Due to window system limitations, the whole coordinate space for a region is limited to the points between -32767 and 32767 on Windows 95/98/ME. You can circumvent this limitation by using a QPainterPath.</p>
<a name=&quote;additional-license-information&quote;></a>
<h3>Additional License Information</h3>
<p>For Qt/X11 and Qtopia Core, parts of this class rely on code obtained under the following license:</p>
<div style=&quote;padding: 0.5em; background: #e0e0e0; color: black&quote;><p>Copyright (c) 1987 X Consortium</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p>Except as contained in this notice, the name of the X Consortium shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from the X Consortium.</p>
</div><div style=&quote;padding: 0.5em; background: #e0e0e0; color: black&quote;><p>Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.</p>
<p>All Rights Reserved</p>
<p>Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Digital not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.</p>
<p>DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</p>
</div>
*/">
    <method name="public QRegion(com.trolltech.qt.gui.QPolygon pa__0, com.trolltech.qt.core.Qt.FillRule fillRule__1)" doc="/**
<p>Constructs a polygon region from the point array <i>a</i> with the fill rule specified by <i>fillRule</i>.</p>
<p>If <i>fillRule</i> is Qt::WindingFill, the polygon region is defined using the winding algorithm; if it is Qt::OddEvenFill, the odd-even fill algorithm is used.</p>
<p><b>Warning:</b> This constructor can be used to create complex regions that will slow down painting when used.</p>

*/"/>
    <method name="public QRegion(com.trolltech.qt.gui.QBitmap bitmap__0)" doc="/**
<p>Constructs a region from the bitmap <i>bm</i>.</p>
<p>The resulting region consists of the pixels in bitmap <i>bm</i> that are Qt::color1, as if each pixel was a 1 by 1 rectangle.</p>
<p>This constructor may create complex regions that will slow down painting when used. Note that drawing masked pixmaps can be done much faster using QPixmap::setMask().</p>

*/"/>
    <method name="public QRegion(int x__0, int y__1, int w__2, int h__3, com.trolltech.qt.gui.QRegion.RegionType t__4)" doc="/**
<p>Constructs a rectangular or elliptic region.</p>
<p>If <i>t</i> is <tt>Rectangle</tt>, the region is the filled rectangle (<i>x</i>, <i>y</i>, <i>w</i>, <i>h</i>). If <i>t</i> is <tt>Ellipse</tt>, the region is the filled ellipse with center at (<i>x</i> + <i>w</i> / 2, <i>y</i> + <i>h</i> / 2) and size (<i>w</i> ,<i>h</i>).</p>

*/"/>
    <method name="public QRegion(com.trolltech.qt.gui.QRegion region__0)" doc="/**
<p>Constructs a new region which is equal to region <i>r</i>.</p>

*/"/>
    <method name="public QRegion(com.trolltech.qt.core.QRect r__0, com.trolltech.qt.gui.QRegion.RegionType t__1)" doc="/**
<p>Create a region based on the rectange <i>r</i> with region type <i>t</i>.</p>
<p>If the rectangle is invalid a null region will be created.</p>

*/"/>
    <method name="public QRegion()" doc="/**
<p>Constructs an empty region.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect boundingRect()" doc="/**
<p>Returns the bounding rectangle of this region. An empty region gives a rectangle that is QRect::isNull().</p>

*/"/>
    <method name="public final boolean contains(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Returns true if the region overlaps the rectangle <i>r</i>; otherwise returns false.</p>

*/"/>
    <method name="public final boolean contains(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Returns true if the region contains the point <i>p</i>; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion eor(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Use xored(<i>r</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion intersect(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Use intersected(<i>r</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion intersected(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Returns a region which is the intersection of this region and <i>r</i>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image rintersect.png]</font></p><p>The figure shows the intersection of two elliptical regions.</p>

*/"/>
    <method name="public final boolean intersects(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Returns true if this region intersects with <i>region</i>, otherwise returns false.</p>

*/"/>
    <method name="public final boolean intersects(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Returns true if this region intersects with <i>rect</i>, otherwise returns false.</p>

*/"/>
    <method name="public final boolean isEmpty()" doc="/**
<p>Returns true if the region is empty; otherwise returns false. An empty region is a region that contains no points.</p>
<p>Example:</p>
<pre>    QRegion r1(10, 10, 20, 20);
    r1.isNull();                <span class=&quote;comment&quote;>// false</span>
    r1.isEmpty();               <span class=&quote;comment&quote;>// false</span>

    QRegion r2(40, 40, 20, 20);
    QRegion r3;
    r3.isNull();                <span class=&quote;comment&quote;>// true</span>
    r3.isEmpty();               <span class=&quote;comment&quote;>// true</span>

    r3 = r1.intersected(r2);    <span class=&quote;comment&quote;>// r3: intersection of r1 and r2</span>
    r3.isNull();                <span class=&quote;comment&quote;>// false</span>
    r3.isEmpty();               <span class=&quote;comment&quote;>// true</span>

    r3 = r1.united(r2);         <span class=&quote;comment&quote;>// r3: union of r1 and r2</span>
    r3.isNull();                <span class=&quote;comment&quote;>// false</span>
    r3.isEmpty();               <span class=&quote;comment&quote;>// false</span></pre>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.core.QRect&gt; rects()" doc="/**
<p>Returns an array of non-overlapping rectangles that make up the region.</p>
<p>The union of all the rectangles is equal to the original region.</p>

*/"/>
    <method name="public final void setRects(com.trolltech.qt.QNativePointer rect__0, int num__1)" doc="/**
<p>Sets the region using the array of rectangles specified by <i>rects</i>. The rectangles <i>must</i> be optimally Y-X sorted and follow these restrictions:</p>
<ul>
<li>The rectangles must not intersect.</li>
<li>All rectangles with a given top coordinate must have the same height.</li>
<li>No two rectangles may abut horizontally (they should be combined into a single wider rectangle in that case).</li>
<li>The rectangles must be sorted in ascending order, with Y as the major sort key and X as the minor sort key.</li>
</ul>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion subtract(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Use subtracted(<i>r</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion subtracted(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Returns a region which is <i>r</i> subtracted from this region.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image rsubtract.png]</font></p><p>The figure shows the result when the ellipse on the right is subtracted from the ellipse on the left (<tt>left - right</tt>).</p>

*/"/>
    <method name="public final void translate(int dx__0, int dy__1)" doc="/**
<p>Translates (moves) the region <i>dx</i> along the X axis and <i>dy</i> along the Y axis.</p>

*/"/>
    <method name="public final void translate(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Translates the region <i>point</i><i>.x()</i> along the x axis and <i>point</i><i>.y()</i> along the y axis, relative to the current position. Positive values move the region to the right and down.</p>
<p>Translates to the given <i>point</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion translated(int dx__0, int dy__1)" doc="/**
<p>Returns a copy of the region that is translated <i>dx</i> along the x axis and <i>dy</i> along the y axis, relative to the current position. Positive values move the region to the right and down.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion translated(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Returns a copy of the regtion that is translated <i>p</i><i>.x()</i> along the x axis and <i>p</i><i>.y()</i> along the y axis, relative to the current position. Positive values move the rectangle to the right and down.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion unite(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Use united(<i>r</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion united(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Returns a region which is the union of this region and <i>r</i>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image runion.png]</font></p><p>The figure shows the union of two elliptical regions.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion xored(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Returns a region which is the exclusive or (XOR) of this region and <i>r</i>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image rxor.png]</font></p><p>The figure shows the exclusive or of two elliptical regions.</p>

*/"/>
    <enum name="RegionType" doc="/**
<p>Specifies the shape of the region to be created.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>the region covers the entire rectangle.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>the region is an ellipse inside the rectangle.</td></tr>
</table></p>

*/"/>
</class>
