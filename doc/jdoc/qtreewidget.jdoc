<class name="QTreeWidget" doc="/**
<p>The QTreeWidget class provides a tree view that uses a predefined tree model.</p>
<p>The QTreeWidget class is a convenience class that provides a standard tree widget with a classic item-based interface similar to that used by the QListView class in Qt 3. This class is based on Qt's Model/View architecture and uses a default model to hold items, each of which is a QTreeWidgetItem.</p>
<p>Developers who do not need the flexibility of the Model/View framework can use this class to create simple hierarchical lists very easily. A more flexible approach involves combining a QTreeView with a standard item model. This allows the storage of data to be separated from its representation.</p>
<p>In its simplest form, a tree widget can be constructed in the following way:</p>
<pre>    QTreeWidget *treeWidget = new QTreeWidget();
    treeWidget-&gt;setColumnCount(1);
    QList&lt;QTreeWidgetItem *&gt; items;
    for (int i = 0; i &lt; 10; ++i)
        items.append(new QTreeWidgetItem((QTreeWidget*)0, QStringList(QString(&quot;item: %1&quot;).arg(i))));
    treeWidget-&gt;insertTopLevelItems(0, items);</pre>
<p>Before items can be added to the tree widget, the number of columns must be set with setColumnCount(). This allows each item to have one or more labels or other decorations. The number of columns in use can be found with the columnCount() function.</p>
<p>The tree can have a header that contains a section for each column in the widget. It is easiest to set up the labels for each section by supplying a list of strings with setHeaderLabels(), but a custom header can be constructed with a QTreeWidgetItem and inserted into the tree with the setHeaderItem() function.</p>
<p>The items in the tree can be sorted by column according to a predefined sort order. If sorting is enabled, the user can sort the items by clicking on a column header. Sorting can be enabled or disabled by calling setSortingEnabled(). The isSortingEnabled() function indicates whether sorting is enabled.</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image windowsxp-treeview.png]</font></td><td><font color=&quote;red&quote;>[Missing image macintosh-treeview.png]</font></td><td><font color=&quote;red&quote;>[Missing image plastique-treeview.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>A Windows XP style tree widget.</td><td>A Macintosh style tree widget.</td><td>A Plastique style tree widget.</td></tr>
</table></p>

*/">
    <method name="public QTreeWidget(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a tree widget with the given <i>parent</i>.</p>

*/"/>
    <method name="public final void addTopLevelItem(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Appends the <i>item</i> as a top-level item in the widget.</p>

*/"/>
    <method name="public final void addTopLevelItems(java.util.List&lt;com.trolltech.qt.gui.QTreeWidgetItem&gt; items__0)" doc="/**
<p>Appends the list of <i>items</i> as a top-level items in the widget.</p>

*/"/>
    <method name="public final void clear()" doc="/**
<p>Clears the tree widget by removing all of its items and selections.</p>
<p><b>Note:</b> Since each item is removed from the tree widget before being deleted, the return value of QTreeWidgetItem::treeWidget() will be invalid when called from an item's destructor.</p>

*/"/>
    <method name="public final void closePersistentEditor(com.trolltech.qt.gui.QTreeWidgetItem item__0, int column__1)" doc="/**
<p>Closes the persistent editor for the <i>item</i> in the given <i>column</i>.</p>
<p>This function has no effect if no persistent editor is open for this combination of item and column.</p>

*/"/>
    <method name="public final void collapseItem(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Closes the <i>item</i>. This causes the tree containing the item's children to be collapsed.</p>

*/"/>
    <method name="public final int columnCount()"/>
    <method name="public final int currentColumn()" doc="/**
<p>Returns the current column in the tree widget.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTreeWidgetItem currentItem()" doc="/**
<p>Returns the current item in the tree widget.</p>

*/"/>
    <method name="public final void editItem(com.trolltech.qt.gui.QTreeWidgetItem item__0, int column__1)" doc="/**
<p>Starts editing the <i>item</i> in the given <i>column</i> if it is editable.</p>

*/"/>
    <method name="public final void expandItem(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Expands the <i>item</i>. This causes the tree containing the item's children to be expanded.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QTreeWidgetItem&gt; findItems(java.lang.String text__0, com.trolltech.qt.core.Qt.MatchFlags flags__1, int column__2)" doc="/**
<p>Returns a list of items that match the given <i>text</i>, using the given <i>flags</i>, in the given <i>column</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTreeWidgetItem headerItem()" doc="/**
<p>Returns the item used for the tree widget's header.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QModelIndex indexFromItem(com.trolltech.qt.gui.QTreeWidgetItem item__0, int column__1)" doc="/**
<p>Returns the QModelIndex assocated with the given <i>item</i> in the given <i>column</i>.</p>

*/"/>
    <method name="public final int indexOfTopLevelItem(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Returns the index of the given top-level <i>item</i>, or -1 if the item cannot be found.</p>

*/"/>
    <method name="public final void insertTopLevelItem(int index__0, com.trolltech.qt.gui.QTreeWidgetItem item__1)" doc="/**
<p>Inserts the <i>item</i> at <i>index</i> in the top level in the view.</p>
<p>If the item has already been inserted somewhere else it wont be inserted.</p>

*/"/>
    <method name="public final void insertTopLevelItems(int index__0, java.util.List&lt;com.trolltech.qt.gui.QTreeWidgetItem&gt; items__1)" doc="/**
<p>Inserts the list of <i>items</i> at <i>index</i> in the top level in the view.</p>
<p>Items that have already been inserted somewhere else wont be inserted.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTreeWidgetItem invisibleRootItem()" doc="/**
<p>Returns the tree widget's invisible root item.</p>
<p>The invisible root item provides access to the tree widget's top-level items through the QTreeWidgetItem API, making it possible to write functions that can treat top-level items and their children in a uniform way; for example, recursive functions.</p>

*/"/>
    <method name="public final boolean isItemExpanded(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Returns true if the given <i>item</i> is open; otherwise returns false.</p>
<p>This function is deprecated. Use QTreeWidgetItem::isExpanded() instead.</p>

*/"/>
    <method name="public final boolean isItemHidden(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Returns true if the <i>item</i> is explicitly hidden, otherwise returns false.</p>
<p>This function is deprecated. Use QTreeWidgetItem::isHidden() instead.</p>

*/"/>
    <method name="public final boolean isItemSelected(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Returns true if the <i>item</i> is selected; otherwise returns false.</p>
<p>This function is deprecated. Use QTreeWidgetItem::isSelected() instead.</p>

*/"/>
    <method name="public final boolean isSortingEnabled()" doc="/**
<p>### Qt 5: remove</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTreeWidgetItem itemAt(int x__0, int y__1)" doc="/**
<p>Returns a pointer to the item at the coordinates (<i>x</i>, <i>y</i>).</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTreeWidgetItem itemAt(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Returns a pointer to the item at the coordinates <i>p</i>.</p>

*/"/>
    <method name="protected final com.trolltech.qt.gui.QTreeWidgetItem itemFromIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns a pointer to the QTreeWidgetItem assocated with the given <i>index</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget itemWidget(com.trolltech.qt.gui.QTreeWidgetItem item__0, int column__1)" doc="/**
<p>Returns the widget displayed in the cell specified by <i>item</i> and the given <i>column</i>.</p>

*/"/>
    <method name="protected final java.util.List&lt;com.trolltech.qt.gui.QTreeWidgetItem&gt; items(com.trolltech.qt.gui.QMimeData data__0)" doc="/**
<p>Returns a list of pointers to the items contained in the <i>data</i> object. If the object was not created by a QTreeWidget in the same process, the list is empty.</p>

*/"/>
    <method name="public final void openPersistentEditor(com.trolltech.qt.gui.QTreeWidgetItem item__0, int column__1)" doc="/**
<p>Opens a persistent editor for the <i>item</i> in the given <i>column</i>.</p>

*/"/>
    <method name="public final void scrollToItem(com.trolltech.qt.gui.QTreeWidgetItem item__0, com.trolltech.qt.gui.QAbstractItemView.ScrollHint hint__1)" doc="/**
<p>Ensures that the <i>item</i> is visible, scrolling the view if necessary using the specified <i>hint</i>.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QTreeWidgetItem&gt; selectedItems()" doc="/**
<p>Returns a list of all selected non-hidden items.</p>

*/"/>
    <method name="public final void setColumnCount(int columns__0)"/>
    <method name="public final void setCurrentItem(com.trolltech.qt.gui.QTreeWidgetItem item__0, int column__1)" doc="/**
<p>Sets the current <i>item</i> in the tree widget and the curernt column to <i>column</i>.</p>

*/"/>
    <method name="public final void setCurrentItem(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Sets the current <i>item</i> in the tree widget.</p>
<p>Depending on the current selection mode, the item may also be selected.</p>

*/"/>
    <method name="public final void setHeaderItem(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Sets the header <i>item</i> for the tree widget. The label for each column in the header is supplied by the corresponding label in the item.</p>
<p>The tree widget takes ownership of the item.</p>

*/"/>
    <method name="public final void setHeaderLabel(java.lang.String label__0)" doc="/**
<p>Same as setHeaderLabels(QStringList(<i>label</i>)).</p>

*/"/>
    <method name="public final void setHeaderLabels(java.util.List&lt;java.lang.String&gt; labels__0)" doc="/**
<p>Adds a column in the header for each item in the <i>labels</i> list, and sets the label for each column.</p>
<p>Note that setHeaderLabels() won't remove existing columns.</p>

*/"/>
    <method name="public final void setItemExpanded(com.trolltech.qt.gui.QTreeWidgetItem item__0, boolean expand__1)" doc="/**
<p>Sets the item referred to by <i>item</i> to either closed or opened, depending on the value of <i>expand</i>.</p>
<p>This function is deprecated. Use QTreeWidgetItem::setExpanded() instead.</p>

*/"/>
    <method name="public final void setItemHidden(com.trolltech.qt.gui.QTreeWidgetItem item__0, boolean hide__1)" doc="/**
<p>Hides the given <i>item</i> if <i>hide</i> is true; otherwise shows the item.</p>
<p>This function is deprecated. Use QTreeWidgetItem::setHidden() instead.</p>

*/"/>
    <method name="public final void setItemSelected(com.trolltech.qt.gui.QTreeWidgetItem item__0, boolean select__1)" doc="/**
<p>If <i>select</i> is true, the given <i>item</i> is selected; otherwise it is deselected.</p>
<p>This function is deprecated. Use QTreeWidgetItem::setSelected() instead.</p>

*/"/>
    <method name="public final void setItemWidget(com.trolltech.qt.gui.QTreeWidgetItem item__0, int column__1, com.trolltech.qt.gui.QWidget widget__2)" doc="/**
<p>Sets the given <i>widget</i> to be displayed in the cell specified by the given <i>item</i> and <i>column</i>.</p>
<p>Note that the given <i>widget</i>'s autoFillBackground property must be set to true, otherwise the widget's background will be transparent, showing both the model data and the tree widget item.</p>
<p>This function should only be used to display static content in the place of a tree widget item. If you want to display custom dynamic content or implement a custom editor widget, use QTreeView and subclass QItemDelegate instead.</p>

*/"/>
    <method name="@Deprecated public final void setModel(com.trolltech.qt.core.QAbstractItemModel model__0)"/>
    <method name="public final void setSortingEnabled(boolean enable__0)" doc="/**
<p>### Qt 5: remove</p>

*/"/>
    <method name="public final int sortColumn()" doc="/**
<p>Returns the column used to sort the contents of the widget.</p>

*/"/>
    <method name="public final void sortItems(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sorts the items in the widget in the specified <i>order</i> by the values in the given <i>column</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTreeWidgetItem takeTopLevelItem(int index__0)" doc="/**
<p>Removes the top-level item at the given <i>index</i> in the tree and returns it, otherwise returns 0;</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTreeWidgetItem topLevelItem(int index__0)" doc="/**
<p>Returns the top level item at the given <i>index</i>, or 0 if the item does not exist.</p>

*/"/>
    <method name="public final int topLevelItemCount()"/>
    <method name="public final com.trolltech.qt.core.QRect visualItemRect(com.trolltech.qt.gui.QTreeWidgetItem item__0)" doc="/**
<p>Returns the rectangle on the viewport occupied by the item at <i>item</i>.</p>

*/"/>
    <method name="protected void dropEvent(com.trolltech.qt.gui.QDropEvent event__0)"/>
    <method name="protected boolean dropMimeData(com.trolltech.qt.gui.QTreeWidgetItem parent__0, int index__1, com.trolltech.qt.gui.QMimeData data__2, com.trolltech.qt.core.Qt.DropAction action__3)" doc="/**
<p>Handles the <i>data</i> supplied by a drag and drop operation that ended with the given <i>action</i> in the <i>index</i> in the given <i>parent</i> item.</p>
<p>The default implementation returns true if the drop was successfully handled by decoding the mime data and inserting it into the model; otherwise it returns false.</p>

*/"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected com.trolltech.qt.gui.QMimeData mimeData(java.util.List&lt;com.trolltech.qt.gui.QTreeWidgetItem&gt; items__0)" doc="/**
<p>Returns an object that contains a serialized description of the specified <i>items</i>. The format used to describe the items is obtained from the mimeTypes() function.</p>
<p>If the list of items is empty, 0 is returned rather than a serialized empty list.</p>

*/"/>
    <method name="protected java.util.List&lt;java.lang.String&gt; mimeTypes()" doc="/**
<p>Returns a list of MIME types that can be used to describe a list of treewidget items.</p>

*/"/>
    <method name="protected com.trolltech.qt.core.Qt.DropActions supportedDropActions()" doc="/**
<p>Returns the drop actions supported by this view.</p>

*/"/>
</class>
