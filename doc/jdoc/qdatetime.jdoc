<class name="QDateTime" doc="/**
<p>The QDateTime class provides date and time functions.</p>
<p>A QDateTime object contains a calendar date and a clock time (a &quot;datetime&quot;). It is a combination of the QDate and QTime classes. It can read the current datetime from the system clock. It provides functions for comparing datetimes and for manipulating a datetime by adding a number of seconds, days, months, or years.</p>
<p>A QDateTime object is typically created either by giving a date and time explicitly in the constructor, or by using the static function currentDateTime() that returns a QDateTime object set to the system clock's time. The date and time can be changed with setDate() and setTime(). A datetime can also be set using the setTime_t() function that takes a POSIX-standard &quot;number of seconds since 00:00:00 on January 1, 1970&quot; value. The fromString() function returns a QDateTime, given a string and a date format used to interpret the date within the string.</p>
<p>The date() and time() functions provide access to the date and time parts of the datetime. The same information is provided in textual format by the toString() function.</p>
<p>QDateTime provides a full set of operators to compare two QDateTime objects where smaller means earlier and larger means later.</p>
<p>You can increment (or decrement) a datetime by a given number of seconds using addSecs(), or days using addDays(). Similarly you can use addMonths() and addYears(). The daysTo() function returns the number of days between two datetimes, and secsTo() returns the number of seconds between two datetimes.</p>
<p>QDateTime can store datetimes as local time or as UTC. QDateTime::currentDateTime() returns a QDateTime expressed as local time; use toUTC() to convert it to UTC. You can also use timeSpec() to find out if a QDateTime object stores a UTC time or a local time. Operations such as addSecs() and secsTo() are aware of daylight saving time (DST).</p>

*/">
    <method name="public QDateTime(com.trolltech.qt.core.QDateTime other__0)" doc="/**
<p>Constructs a copy of the <i>other</i> datetime.</p>

*/"/>
    <method name="public QDateTime(com.trolltech.qt.core.QDate arg__0)" doc="/**
<p>Constructs a datetime with the given <i>date</i>, and a valid time (00:00:00.000).</p>

*/"/>
    <method name="public QDateTime()" doc="/**
<p>Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.</p>

*/"/>
    <method name="public QDateTime(com.trolltech.qt.core.QDate arg__0, com.trolltech.qt.core.QTime arg__1, com.trolltech.qt.core.Qt.TimeSpec spec__2)" doc="/**
<p>Constructs a datetime with the given <i>date</i> and <i>time</i>, using the time specification defined by <i>spec</i>.</p>
<p>If <i>date</i> is valid and <i>time</i> is not, the time will be set to midnight.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime addDays(int days__0)" doc="/**
<p>Returns a QDateTime object containing a datetime <i>ndays</i> days later than the datetime of this object (or earlier if <i>ndays</i> is negative).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime addMSecs(long msecs__0)" doc="/**
<p>Returns a QDateTime object containing a datetime <i>msecs</i> miliseconds later than the datetime of this object (or earlier if <i>msecs</i> is negative).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime addMonths(int months__0)" doc="/**
<p>Returns a QDateTime object containing a datetime <i>nmonths</i> months later than the datetime of this object (or earlier if <i>nmonths</i> is negative).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime addSecs(int secs__0)" doc="/**
<p>Returns a QDateTime object containing a datetime <i>nsecs</i> seconds later than the datetime of this object (or earlier if <i>nsecs</i> is negative).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime addYears(int years__0)" doc="/**
<p>Returns a QDateTime object containing a datetime <i>nyears</i> years later than the datetime of this object (or earlier if <i>nyears</i> is negative).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDate date()" doc="/**
<p>Returns the date part of the datetime.</p>

*/"/>
    <method name="public final int daysTo(com.trolltech.qt.core.QDateTime arg__0)" doc="/**
<p>Returns the number of days from this datetime to the <i>other</i> datetime. If the <i>other</i> datetime is earlier than this datetime, the value returned is negative.</p>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if both the date and the time are null; otherwise returns false. A null datetime is invalid.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if both the date and the time are valid; otherwise returns false.</p>

*/"/>
    <method name="public final int secsTo(com.trolltech.qt.core.QDateTime arg__0)" doc="/**
<p>Returns the number of seconds from this datetime to the <i>other</i> datetime. If the <i>other</i> datetime is earlier than this datetime, the value returned is negative.</p>
<p>Before performing the comparison, the two datetimes are converted to Qt::UTC to ensure that the result is correct if one of the two datetimes has daylight saving time (DST) and the other doesn't.</p>
<p>Example:</p>
<pre>    QDateTime now = QDateTime::currentDateTime();
    QDateTime xmas(QDate(now.date().year(), 12, 25), QTime(0, 0));
    qDebug(&quot;There are %d seconds to Christmas&quot;, now.secsTo(xmas));</pre>

*/"/>
    <method name="public final void setDate(com.trolltech.qt.core.QDate date__0)" doc="/**
<p>Sets the date part of this datetime to <i>date</i>. If no time is set, it is set to midnight.</p>

*/"/>
    <method name="public final void setTime(com.trolltech.qt.core.QTime time__0)" doc="/**
<p>Sets the time part of this datetime to <i>time</i>.</p>

*/"/>
    <method name="public final void setTimeSpec(com.trolltech.qt.core.Qt.TimeSpec spec__0)" doc="/**
<p>Sets the time specification used in this datetime to <i>spec</i>.</p>

*/"/>
    <method name="public final void setTime_t(int secsSince1Jan1970UTC__0)" doc="/**
<p>Sets the date and time given the number of <i>seconds</i> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (Qt::UTC). On systems that do not support timezones this function will behave as if local time were Qt::UTC.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTime time()" doc="/**
<p>Returns the time part of the datetime.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.TimeSpec timeSpec()" doc="/**
<p>Returns the time specification of the datetime.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime toLocalTime()" doc="/**
<p>Returns a datetime containing the date and time information in this datetime, but specified using the Qt::LocalTime definition.</p>

*/"/>
    <method name="public final java.lang.String toString(com.trolltech.qt.core.Qt.DateFormat f__0)" doc="/**
<p>Returns the datetime as a string in the <i>format</i> given.</p>
<p>If the <i>format</i> is Qt::TextDate, the string is formatted in the default way. QDate::shortDayName(), QDate::shortMonthName(), and QTime::toString() are used to generate the string, so the day and month names will be localized names. An example of this formatting is &quot;Wed May 20 03:40:13 1998&quot;.</p>
<p>If the <i>format</i> is Qt::ISODate, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form YYYY-MM-DDTHH:MM:SS.</p>
<p>If the <i>format</i> is Qt::LocalDate or Qt::SystemLocaleDate, the string format depends on the locale settings of the system. Identical to calling QLocale::system().toString(dateTime, QLocale::ShortFormat). <i>Qt::LocalDate has been deprecated, please use Qt::SystemLocaleDate instead.</i></p>
<p>If the <i>format</i> is Qt::LocaleDate, the string format depends on the default application locale. This is the locale set with QLocale::setDefault(), or the system locale if no default locale has been set. Identical to calling QLocale().toString(dateTime, QLocale::ShortFormat);</p>
<p>If the datetime is invalid, an empty string will be returned.</p>
<p><b>Warning:</b> The Qt::ISODate format is only valid for years in the range 0 to 9999. This restriction may apply to Qt::LocalDate as well, depending on the locale settings.</p>

*/"/>
    <method name="public final java.lang.String toString(java.lang.String format__0)" doc="/**
<p>Returns the datetime as a string. The <i>format</i> parameter determines the format of the result string.</p>
<p>These expressions may be used for the date:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>d</td><td>the day as number without a leading zero (1 to 31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dd</td><td>the day as number with a leading zero (01 to 31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>ddd</td><td>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses QDate::shortDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dddd</td><td>the long localized day name (e.g. 'Qt::Monday' to 'Qt::Sunday'). Uses QDate::longDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>M</td><td>the month as number without a leading zero (1-12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MM</td><td>the month as number with a leading zero (01-12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>MMM</td><td>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses QDate::shortMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MMMM</td><td>the long localized month name (e.g. 'January' to 'December'). Uses QDate::longMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>yy</td><td>the year as two digit number (00-99)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>yyyy</td><td>the year as four digit number</td></tr>
</table></p>
<p>These expressions may be used for the time:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>h</td><td>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>hh</td><td>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>m</td><td>the minute without a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>mm</td><td>the minute with a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>s</td><td>the second whithout a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ss</td><td>the second whith a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>z</td><td>the milliseconds without leading zeroes (0 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>zzz</td><td>the milliseconds with leading zeroes (000 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>AP</td><td>use AM/PM display. <i>AP</i> will be replaced by either &quot;AM&quot; or &quot;PM&quot;.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ap</td><td>use am/pm display. <i>ap</i> will be replaced by either &quot;am&quot; or &quot;pm&quot;.</td></tr>
</table></p>
<p>All other input characters will be ignored. Any sequence of characters that are enclosed in singlequotes will be treated as text and not be used as an expression.</p>
<p>Example format strings (assumed that the QDateTime is 21 May 2001 14:13:09):</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Format</th><th>Result</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>dd.MM.yyyy</td><td>21.05.2001</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ddd MMMM d yy</td><td>Tue May 21 01</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>hh:mm:ss.zzz</td><td>14:13:09.042</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>h:m:s ap</td><td>2:13:9 pm</td></tr>
</table></p>
<p>If the datetime is invalid, an empty string will be returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime toTimeSpec(com.trolltech.qt.core.Qt.TimeSpec spec__0)" doc="/**
<p>Returns a copy of this datetime configured to use the given time <i>specification</i>.</p>

*/"/>
    <method name="public final int toTime_t()" doc="/**
<p>Returns the datetime as the number of seconds that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (Qt::UTC).</p>
<p>On systems that do not support timezones, this function will behave as if local time were Qt::UTC.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime toUTC()" doc="/**
<p>Returns a datetime containing the date and time information in this datetime, but specified using the Qt::UTC definition.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDateTime currentDateTime()" doc="/**
<p>Returns the current datetime, as reported by the system clock, in the local time zone.</p>

*/"/>
    <method name="public final static com.trolltech.qt.core.QDateTime fromString(java.lang.String s__0, com.trolltech.qt.core.Qt.DateFormat f__1)" doc="/**
<p>Returns the QDateTime represented by the <i>string</i>, using the <i>format</i> given, or an invalid datetime if this is not possible.</p>
<p>Note for Qt::TextDate: It is recommended that you use the English short month names (e.g. &quot;Jan&quot;). Although localized month names can also be used, they depend on the user's locale settings.</p>
<p><b>Warning:</b> Note that Qt::LocalDate cannot be used here.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDateTime fromString(java.lang.String s__0, java.lang.String format__1)" doc="/**
<p>Returns the QDateTime represented by the <i>string</i>, using the <i>format</i> given, or an invalid datetime if the string cannot be parsed.</p>
<p>These expressions may be used for the date part of the format string:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>d</td><td>the day as number without a leading zero (1 to 31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dd</td><td>the day as number with a leading zero (01 to 31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>ddd</td><td>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses QDate::shortDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dddd</td><td>the long localized day name (e.g. 'Qt::Monday' to 'Qt::Sunday'). Uses QDate::longDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>M</td><td>the month as number without a leading zero (1-12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MM</td><td>the month as number with a leading zero (01-12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>MMM</td><td>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses QDate::shortMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MMMM</td><td>the long localized month name (e.g. 'January' to 'December'). Uses QDate::longMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>yy</td><td>the year as two digit number (00-99)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>yyyy</td><td>the year as four digit number</td></tr>
</table></p>
<p>These expressions may be used for the time part of the format string:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>h</td><td>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>hh</td><td>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>H</td><td>the hour without a leading zero (0 to 23, even with AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>HH</td><td>the hour with a leading zero (00 to 23, even with AM/PM display)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>m</td><td>the minute without a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>mm</td><td>the minute with a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>s</td><td>the second whithout a leading zero (0 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ss</td><td>the second whith a leading zero (00 to 59)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>z</td><td>the milliseconds without leading zeroes (0 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>zzz</td><td>the milliseconds with leading zeroes (000 to 999)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>AP or A</td><td>interpret as an AM/PM time. <i>AP</i> must be either &quot;AM&quot; or &quot;PM&quot;.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ap or a</td><td>Interpret as an AM/PM time. <i>ap</i> must be either &quot;am&quot; or &quot;pm&quot;.</td></tr>
</table></p>
<p>All other input characters will be treated as text. Any sequence of characters that are enclosed in singlequotes will also be treated as text and not be used as an expression.</p>
<pre>    QTime time1 = QTime::fromString(&quot;131&quot;, &quot;HHh&quot;);
<span class=&quote;comment&quote;>    // time1 is 13:00:00</span>
    QTime time1 = QTime::fromString(&quot;1apA&quot;, &quot;1amAM&quot;);
<span class=&quote;comment&quote;>    // time1 is 01:00:00</span>

    QDateTime dateTime2 = QDateTime::fromString(&quot;M1d1y9800:01:02&quot;,
                                                &quot;'M'M'd'd'y'yyhh:mm:ss&quot;);
<span class=&quote;comment&quote;>    // dateTime is 1 January 1998 00:01:02</span></pre>
<p>If the format is not satisfied an invalid QDateTime is returned. The expressions that don't have leading zeroes (d, M, h, m, s, z) will be greedy. This means that they will use two digits even if this will put them outside the range and/or leave too few digits for other sections.</p>
<pre>    QDateTime dateTime = QDateTime::fromString(&quot;130&quot;, &quot;Mm&quot;); <span class=&quote;comment&quote;>// invalid</span></pre>
<p>This could have meant 1 January 00:30.00 but the M will grab two digits.</p>
<p>For any field that is not represented in the format the following defaults are used:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Field</th><th>Default value</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Year</td><td>1900</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Month</td><td>1 (January)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Day</td><td>1</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Hour</td><td>0</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Minute</td><td>0</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Second</td><td>0</td></tr>
</table></p>
<p>For example:</p>
<pre>    QDateTime dateTime = QDateTime::fromString(&quot;1.30.1&quot;, &quot;M.d.s&quot;);
<span class=&quote;comment&quote;>    // dateTime is January 30 in the current year 00:00:01</span></pre>
<p>QDateTime::toString() QTime::toString()</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDateTime fromTime_t(int secsSince1Jan1970UTC__0)" doc="/**
<p>Returns a datetime whose date and time are the number of <i>seconds</i> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (Qt::UTC). On systems that do not support timezones, the time will be set as if local time were Qt::UTC.</p>

*/"/>
</class>
