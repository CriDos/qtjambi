<class name="QPoint" doc="/**
<p>The QPoint class defines a point in the plane using integer precision.</p>
<p>A point is specified by a x coordinate and an y coordinate which can be accessed using the x() and y() functions. The isNull() function returns true if both x and y are set to 0. The coordinates can be set (or altered) using the setX() and setY() functions, or alternatively the rx() and ry() functions which return references to the coordinates (allowing direct manipulation).</p>
<p>Given a point <i>p</i>, the following statements are all equivalent:</p>
<pre>    QPoint p;

    p.setX(p.x() + 1);
    p += QPoint(1, 0);
    p.rx()++;</pre>
<p>A QPoint object can also be used as a vector: Addition and subtraction are defined as for vectors (each component is added separately). A QPoint object can also be divided or multiplied by an <tt>int</tt> or a <tt>qreal</tt>.</p>
<p>In addition, the QPoint class provides the manhattanLength() function which gives an inexpensive approximation of the length of the QPoint object interpreted as a vector. Finally, QPoint objects can be streamed as well as compared.</p>

*/">
    <method name="public QPoint()" doc="/**
<p>Constructs a null point, i.e. with coordinates (0, 0)</p>

*/"/>
    <method name="public QPoint(int xpos__0, int ypos__1)" doc="/**
<p>Constructs a point with the given coordinates (<i>x</i>, <i>y</i>).</p>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if both the x and y coordinates are set to 0, otherwise returns false.</p>

*/"/>
    <method name="public final int manhattanLength()" doc="/**
<p>Returns the sum of the absolute values of x() and y(), traditionally known as the &quot;Manhattan length&quot; of the vector from the origin to the point. For example:</p>
<pre>    QPoint oldPosition;

    MyWidget::mouseMoveEvent(QMouseEvent *event)
    {
        QPoint point = event-&gt;pos() - oldPosition;
        if (point.manhattanLength() &gt; 3)
            <span class=&quote;comment&quote;>// the mouse has moved more than 3 pixels since the oldPosition</span>
    }</pre>
<p>This is a useful, and quick to calculate, approximation to the true length:</p>
<pre>    int trueManhattenLength = sqrt(pow(x(), 2) + pow(y(), 2));</pre>
<p>The tradition of &quot;Manhattan length&quot; arises because such distances apply to travelers who can only travel on a rectangular grid, like the streets of Manhattan.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer rx()" doc="/**
<p>Returns a reference to the x coordinate of this point.</p>
<p>Using a reference makes it possible to directly manipulate x. For example:</p>
<pre>    QPoint p(1, 2);
    p.rx()--;   <span class=&quote;comment&quote;>// p becomes (0, 2)</span></pre>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer ry()" doc="/**
<p>Returns a reference to the y coordinate of this point.</p>
<p>Using a reference makes it possible to directly manipulate y. For example:</p>
<pre>    QPoint p(1, 2);
    p.ry()++;   <span class=&quote;comment&quote;>// p becomes (1, 3)</span></pre>

*/"/>
    <method name="public final void setX(int x__0)" doc="/**
<p>Sets the x coordinate of this point to the given <i>x</i> coordinate.</p>

*/"/>
    <method name="public final void setY(int y__0)" doc="/**
<p>Sets the y coordinate of this point to the given <i>y</i> coordinate.</p>

*/"/>
    <method name="public final int x()" doc="/**
<p>Returns the x coordinate of this point.</p>

*/"/>
    <method name="public final int y()" doc="/**
<p>Returns the y coordinate of this point.</p>

*/"/>
</class>
