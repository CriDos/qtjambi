<class name="QLabel" doc="/**
<p>The QLabel widget provides a text or image display.</p>
<p>QLabel is used for displaying text or an image. No user interaction functionality is provided. The visual appearance of the label can be configured in various ways, and it can be used for specifying a focus mnemonic key for another widget.</p>
<p>A QLabel can contain any of the following content types:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Content</th><th>Setting</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Plain text</td><td>Pass a QString to setText().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Rich text</td><td>Pass a QString that contains rich text to setText().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>A pixmap</td><td>Pass a QPixmap to setPixmap().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>A movie</td><td>Pass a QMovie to setMovie().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>A number</td><td>Pass an <i>int</i> or a <i>double</i> to setNum(), which converts the number to plain text.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Nothing</td><td>The same as an empty plain text. This is the default. Set by clear().</td></tr>
</table></p>
<p>When the content is changed using any of these functions, any previous content is cleared.</p>
<p>The look of a QLabel can be tuned in several ways. All the settings of QFrame are available for specifying a widget frame. The positioning of the content within the QLabel widget area can be tuned with setAlignment() and setIndent(). Text content can also wrap lines along word bounderies with setWordWrap(). For example, this code sets up a sunken panel with a two-line text in the bottom right corner (both lines being flush with the right side of the label):</p>
<pre>    QLabel *label = new QLabel(this);
    label-&gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);
    label-&gt;setText(&quot;first line\nsecond line&quot;);
    label-&gt;setAlignment(Qt::AlignBottom | Qt::AlignRight);</pre>
<p>A QLabel is often used as a label for an interactive widget. For this use QLabel provides a useful mechanism for adding an mnemonic (see QKeysequence) that will set the keyboard focus to the other widget (called the QLabel's &quot;buddy&quot;). For example:</p>
<pre>    QLineEdit* phoneEdit = new QLineEdit(this);
    QLabel* phoneLabel = new QLabel(&quot;&amp;Phone:&quot;, this);
    phoneLabel-&gt;setBuddy(phoneEdit);</pre>
<p>In this example, keyboard focus is transferred to the label's buddy (the QLineEdit) when the user presses Alt+P. If the buddy was a button (inheriting from QAbstractButton), triggering the mnemonic would emulate a button click.</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image macintosh-label.png]</font></td><td>A label shown in the Macintosh widget style.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image plastique-label.png]</font></td><td>A label shown in the Plastique widget style.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image windowsxp-label.png]</font></td><td>A label shown in the Windows XP widget style.</td></tr>
</table></p>

*/">
    <method name="public QLabel(com.trolltech.qt.gui.QWidget parent__0, com.trolltech.qt.core.Qt.WindowFlags f__1)" doc="/**
<p>Constructs an empty label.</p>
<p>The <i>parent</i> and widget flag <i>f</i>, arguments are passed to the QFrame constructor.</p>

*/"/>
    <method name="public QLabel(java.lang.String text__0, com.trolltech.qt.gui.QWidget parent__1, com.trolltech.qt.core.Qt.WindowFlags f__2)" doc="/**
<p>Constructs a label that displays the text, <i>text</i>.</p>
<p>The <i>parent</i> and widget flag <i>f</i>, arguments are passed to the QFrame constructor.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Alignment alignment()"/>
    <method name="public final com.trolltech.qt.gui.QWidget buddy()" doc="/**
<p>Returns this label's buddy, or 0 if no buddy is currently set.</p>

*/"/>
    <method name="public final void clear()" doc="/**
<p>Clears any label contents.</p>

*/"/>
    <method name="public final boolean hasScaledContents()"/>
    <method name="public final int indent()"/>
    <method name="public final int margin()"/>
    <method name="public final com.trolltech.qt.gui.QMovie movie()" doc="/**
<p>Returns a pointer to the label's movie, or 0 if no movie has been set.</p>

*/"/>
    <method name="public final boolean openExternalLinks()"/>
    <method name="public final com.trolltech.qt.QNativePointer picture()" doc="/**
<p>Returns the label's picture or 0 if the label doesn't have a picture.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer pixmap()"/>
    <method name="public final void setAlignment(com.trolltech.qt.core.Qt.Alignment arg__0)"/>
    <method name="public final void setBuddy(com.trolltech.qt.gui.QWidget arg__0)" doc="/**
<p>Sets this label's buddy to <i>buddy</i>.</p>
<p>When the user presses the shortcut key indicated by this label, the keyboard focus is transferred to the label's buddy widget.</p>
<p>The buddy mechanism is only available for QLabels that contain plain text in which one letter is prefixed with an ampersand, &amp;. This letter is set as the shortcut key. The letter is displayed underlined, and the '&amp;' is not displayed (i.e. the Qt::TextShowMnemonic alignment flag is turned on; see setAlignment()).</p>
<p>In a dialog, you might create two data entry widgets and a label for each, and set up the geometry layout so each label is just to the left of its data entry widget (its &quot;buddy&quot;), for example:</p>
<pre>    QLineEdit *nameEd  = new QLineEdit(this);
    QLabel    *nameLb  = new QLabel(&quot;&amp;Name:&quot;, this);
    nameLb-&gt;setBuddy(nameEd);
    QLineEdit *phoneEd = new QLineEdit(this);
    QLabel    *phoneLb = new QLabel(&quot;&amp;Phone:&quot;, this);
    phoneLb-&gt;setBuddy(phoneEd);
<span class=&quote;comment&quote;>    // (layout setup not shown)</span></pre>
<p>With the code above, the focus jumps to the Name field when the user presses Alt+N, and to the Phone field when the user presses Alt+P.</p>
<p>To unset a previously set buddy, call this function with <i>buddy</i> set to 0.</p>

*/"/>
    <method name="public final void setIndent(int arg__0)"/>
    <method name="public final void setMargin(int arg__0)"/>
    <method name="public final void setMovie(com.trolltech.qt.gui.QMovie movie__0)" doc="/**
<p>Sets the label contents to <i>movie</i>. Any previous content is cleared. The label does NOT take ownership of the movie.</p>
<p>The buddy shortcut, if any, is disabled.</p>
<p>The label resizes itself if auto-resizing is enabled.</p>

*/"/>
    <method name="public final void setNum(int arg__0)" doc="/**
<p>Sets the label contents to plain text containing the textual representation of integer <i>num</i>. Any previous content is cleared. Does nothing if the integer's string representation is the same as the current contents of the label.</p>
<p>The buddy shortcut, if any, is disabled.</p>
<p>The label resizes itself if auto-resizing is enabled.</p>

*/"/>
    <method name="public final void setNum(double arg__0)" doc="/**
<p>Sets the label contents to plain text containing the textual representation of double <i>num</i>. Any previous content is cleared. Does nothing if the double's string representation is the same as the current contents of the label.</p>
<p>The buddy shortcut, if any, is disabled.</p>
<p>The label resizes itself if auto-resizing is enabled.</p>

*/"/>
    <method name="public final void setOpenExternalLinks(boolean open__0)"/>
    <method name="public final void setPicture(com.trolltech.qt.gui.QPicture arg__0)" doc="/**
<p>Sets the label contents to <i>picture</i>. Any previous content is cleared.</p>
<p>The buddy shortcut, if any, is disabled.</p>

*/"/>
    <method name="public final void setPixmap(com.trolltech.qt.gui.QPixmap arg__0)"/>
    <method name="public final void setScaledContents(boolean arg__0)"/>
    <method name="public final void setText(java.lang.String arg__0)"/>
    <method name="public final void setTextFormat(com.trolltech.qt.core.Qt.TextFormat arg__0)"/>
    <method name="public final void setTextInteractionFlags(com.trolltech.qt.core.Qt.TextInteractionFlags flags__0)"/>
    <method name="public final void setWordWrap(boolean on__0)"/>
    <method name="public final java.lang.String text()"/>
    <method name="public final com.trolltech.qt.core.Qt.TextFormat textFormat()"/>
    <method name="public final com.trolltech.qt.core.Qt.TextInteractionFlags textInteractionFlags()"/>
    <method name="public final boolean wordWrap()"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="protected void contextMenuEvent(com.trolltech.qt.gui.QContextMenuEvent ev__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected void focusInEvent(com.trolltech.qt.gui.QFocusEvent ev__0)"/>
    <method name="protected boolean focusNextPrevChild(boolean next__0)"/>
    <method name="protected void focusOutEvent(com.trolltech.qt.gui.QFocusEvent ev__0)"/>
    <method name="public int heightForWidth(int arg__0)"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent ev__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSizeHint()"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent ev__0)"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent ev__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent ev__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
</class>
