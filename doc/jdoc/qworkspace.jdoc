<class name="QWorkspace" doc="/**
<p>The QWorkspace widget provides a workspace window that can be used in an MDI application.</p>
<p>Multiple Document Interface (MDI) applications are typically composed of a main window containing a menu bar, a toolbar, and a central QWorkspace widget. The workspace itself is used to display a number of child windows, each of which is a widget.</p>
<p>The workspace itself is an ordinary Qt widget. It has a standard constructor that takes a parent widget. Workspaces can be placed in any layout, but are typically given as the central widget in a QMainWindow:</p>
<pre>    MainWindow::MainWindow()
    {
        workspace = new QWorkspace;
        setCentralWidget(workspace);
        ...
    }</pre>
<p>Child windows (MDI windows) are standard Qt widgets that are inserted into the workspace with addWindow(). As with top-level widgets, you can call functions such as show(), hide(), showMaximized(), and setWindowTitle() on a child window to change its appearance within the workspace. You can also provide widget flags to determine the layout of the decoration or the behavior of the widget itself.</p>
<p>To change or retrieve the geometry of a child window, you must operate on its parentWidget(). The parentWidget() provides access to the decorated frame that contains the child window widget. When a child window is maximised, its decorated frame is hidden. If the top-level widget contains a menu bar, it will display the maximised window's operations menu to the left of the menu entries, and the window's controls to the right.</p>
<p>A child window becomes active when it gets the keyboard focus, or when setFocus() is called. The user can activate a window by moving focus in the usual ways, for example by clicking a window or by pressing Tab. The workspace emits a signal windowActivated() when the active window changes, and the function activeWindow() returns a pointer to the active child window, or 0 if no window is active.</p>
<p>The convenience function windowList() returns a list of all child windows. This information could be used in a popup menu containing a list of windows, for example. This feature is also available as part of the Window Menu Solution.</p>
<p>QWorkspace provides two built-in layout strategies for child windows: cascade() and tile(). Both are slots so you can easily connect menu entries to them.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qworkspace-arrange.png]</font></p><p>If you want your users to be able to work with child windows larger than the visible workspace area, set the scrollBarsEnabled property to true.</p>

*/">
    <method name="public QWorkspace(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a workspace with the given <i>parent</i>.</p>

*/"/>
    <method name="public final void activateNextWindow()" doc="/**
<p>Gives the input focus to the next window in the list of child windows.</p>

*/"/>
    <method name="public final void activatePreviousWindow()" doc="/**
<p>Gives the input focus to the previous window in the list of child windows.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget activeWindow()" doc="/**
<p>Returns a pointer to the widget corresponding to the active child window, or 0 if no window is active.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget addWindow(com.trolltech.qt.gui.QWidget w__0, com.trolltech.qt.core.Qt.WindowFlags flags__1)" doc="/**
<p>Adds widget <i>w</i> as new sub window to the workspace. If <i>flags</i> are non-zero, they will override the flags set on the widget.</p>
<p>Returns the widget used for the window frame.</p>
<p>To remove the widget <i>w</i> from the workspace, simply call setParent() with the new parent (or 0 to make it a stand-alone window).</p>

*/"/>
    <method name="public final void arrangeIcons()" doc="/**
<p>Arranges all iconized windows at the bottom of the workspace.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QBrush background()"/>
    <method name="public final void cascade()" doc="/**
<p>Arranges all the child windows in a cascade pattern.</p>

*/"/>
    <method name="public final void closeActiveWindow()" doc="/**
<p>Closes the child window that is currently active.</p>

*/"/>
    <method name="public final void closeAllWindows()" doc="/**
<p>Closes all child windows.</p>
<p>If any child window fails to accept the close event, the remaining windows will remain open.</p>

*/"/>
    <method name="public final boolean scrollBarsEnabled()"/>
    <method name="public final void setActiveWindow(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Makes the child window that contains <i>w</i> the active child window.</p>

*/"/>
    <method name="public final void setBackground(com.trolltech.qt.gui.QBrush background__0)"/>
    <method name="public final void setScrollBarsEnabled(boolean enable__0)"/>
    <method name="public final void tile()" doc="/**
<p>Arranges all child windows in a tile pattern.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QWidget&gt; windowList(com.trolltech.qt.gui.QWorkspace.WindowOrder order__0)" doc="/**
<p>Returns a list of all visible or minimized child windows. If <i>order</i> is CreationOrder (the default), the windows are listed in the order in which they were inserted into the workspace. If <i>order</i> is StackingOrder, the windows are listed in their stacking order, with the topmost window as the last item in the list.</p>

*/"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="protected void childEvent(com.trolltech.qt.core.QChildEvent arg__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="public boolean eventFilter(com.trolltech.qt.core.QObject arg__0, com.trolltech.qt.core.QEvent arg__1)"/>
    <method name="protected void hideEvent(com.trolltech.qt.gui.QHideEvent e__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent e__0)"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent arg__0)"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent e__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="protected void wheelEvent(com.trolltech.qt.gui.QWheelEvent e__0)"/>
    <enum name="WindowOrder" doc="/**
<p>Specifies the order in which child windows are returned from windowList().</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The windows are returned in the order of their creation</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The windows are returned in the order of their stacking</td></tr>
</table></p>

*/"/>
</class>
