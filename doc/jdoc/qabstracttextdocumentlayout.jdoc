<class name="QAbstractTextDocumentLayout" doc="/**
<p>The QAbstractTextDocumentLayout class is an abstract base class used to implement custom layouts for QTextDocuments.</p>
<p>The standard layout provided by Qt can handle simple word processing including inline layouts, lists and tables.</p>
<p>Some applications (e.g. a word processor or a DTP application) might need more features than the ones provided by Qt's layout engine, in which case you can subclass QAbstractTextDocumentLayout to provide your own custom layout behavior for your text documents.</p>

*/">
    <method name="public QAbstractTextDocumentLayout(com.trolltech.qt.gui.QTextDocument doc__0)" doc="/**
<p>Creates a new text document layout for the given <i>document</i>.</p>

*/"/>
    <method name="public final java.lang.String anchorAt(com.trolltech.qt.core.QPointF pos__0)" doc="/**
<p>Returns the reference of the anchor at the given <i>position</i>, or an empty string if no anchor exists at that point.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextDocument document()" doc="/**
<p>Returns the text document that this layout is operating on.</p>

*/"/>
    <method name="protected final com.trolltech.qt.gui.QTextCharFormat format(int pos__0)" doc="/**
<p>Returns the character format that is applicable at the given <i>position</i>.</p>

*/"/>
    <method name="protected final int formatIndex(int pos__0)" doc="/**
<p>Returns the index of the format at position <i>pos</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextObjectInterface handlerForObject(int objectType__0)" doc="/**
<p>Returns a handler for objects of the given <i>objectType</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPaintDeviceInterface paintDevice()" doc="/**
<p>Returns the paint device used to render the document's layout.</p>

*/"/>
    <method name="public final void registerHandler(int objectType__0, com.trolltech.qt.core.QObject component__1)" doc="/**
<p>Registers the given <i>component</i> as a handler for items of the given <i>formatType</i>.</p>

*/"/>
    <method name="public final void setPaintDevice(com.trolltech.qt.gui.QPaintDeviceInterface device__0)" doc="/**
<p>Sets the paint device used for rendering the document's layout to the given <i>device</i>.</p>

*/"/>
    <method name="public abstract com.trolltech.qt.core.QRectF blockBoundingRect(com.trolltech.qt.gui.QTextBlock block__0)" doc="/**
<p>Returns the bounding rectangle of <i>block</i>.</p>

*/"/>
    <method name="protected abstract void documentChanged(int from__0, int charsRemoved__1, int charsAdded__2)" doc="/**
<p>This function is called whenever the contents of the document change. A change occurs when text is inserted, removed, or a combination of the two types of operation. The change is specified by <i>position</i>, <i>charsRemoved</i>, and <i>charsAdded</i> corresponding to the starting character position of the change, the number of character removed from the document, and the number of characters added.</p>
<p>For example, when inserting the text &quot;Hello&quot; into an empty document, <i>charsRemoved</i> would be 0 and <i>charsAdded</i> would be 5 (the length of the string).</p>
<p>Replacing text is the combination of removal and insertion. For example, if the text &quot;Hello&quot; gets replaced by &quot;Hi&quot;, <i>charsRemoved</i> would be 5 and <i>charsAdded</i> would be 2.</p>

*/"/>
    <method name="public abstract com.trolltech.qt.core.QSizeF documentSize()" doc="/**
<p>Returns the total size of the document. This is useful to display widgets since they can use to information to update their scroll bars correctly</p>

*/"/>
    <method name="public abstract void draw(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QAbstractTextDocumentLayout_PaintContext context__1)" doc="/**
<p>Draws the layout on the given <i>painter</i> with the given <i>context</i>.</p>

*/"/>
    <method name="protected void drawInlineObject(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.core.QRectF rect__1, com.trolltech.qt.gui.QTextInlineObject object__2, int posInDocument__3, com.trolltech.qt.gui.QTextFormat format__4)" doc="/**
<p>Called to draw the inline object <i>object</i> on the given <i>painter</i> within the rectangle specified by <i>rect</i> using the text format specified by <i>format</i>. <i>posInDocument</i> specifies the position of the object within the document.</p>

*/"/>
    <method name="public abstract com.trolltech.qt.core.QRectF frameBoundingRect(com.trolltech.qt.gui.QTextFrame frame__0)" doc="/**
<p>Returns the bounding rectacle of <i>frame</i>. Returns the bounding rectangle of <i>frame</i>.</p>

*/"/>
    <method name="public abstract int hitTest(com.trolltech.qt.core.QPointF point__0, com.trolltech.qt.core.Qt.HitTestAccuracy accuracy__1)" doc="/**
<p>Returns the cursor postion for the given <i>point</i> with the <i>accuracy</i> specified. Returns -1 to indicate failure if no valid cursor position was found.</p>

*/"/>
    <method name="public abstract int pageCount()" doc="/**
<p>Returns the number of pages required by the layout.</p>

*/"/>
    <method name="protected void positionInlineObject(com.trolltech.qt.gui.QTextInlineObject item__0, int posInDocument__1, com.trolltech.qt.gui.QTextFormat format__2)" doc="/**
<p>Lays out the inline object <i>item</i> using the given text <i>format</i>. The base class implementation does nothing. <i>posInDocument</i> specifies the position of the object within the document.</p>

*/"/>
    <method name="protected void resizeInlineObject(com.trolltech.qt.gui.QTextInlineObject item__0, int posInDocument__1, com.trolltech.qt.gui.QTextFormat format__2)" doc="/**
<p>Sets the size of the inline object <i>item</i> in accordance with the text <i>format</i>. <i>posInDocument</i> specifies the position of the object within the document.</p>

*/"/>
</class>
