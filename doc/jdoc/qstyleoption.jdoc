<class name="QStyleOption" doc="/**
<p>The QStyleOption class stores the parameters used by QStyle functions.</p>
<p>QStyleOption and its subclasses contain all the information that QStyle functions need to draw a graphical element.</p>
<p>For performance reasons, there are few member functions and the access to the member variables is direct (i.e., using the <tt>.</tt> or <tt>-&gt;</tt> operator). This low-level feel makes the structures straightforward to use and emphasizes that these are simply parameters used by the style functions.</p>
<p>The caller of a QStyle function usually creates QStyleOption objects on the stack. This combined with Qt's extensive use of implicit sharing for types such as QString, QPalette, and QColor ensures that no memory allocation needlessly takes place.</p>
<p>The following code snippet shows how to use a specific QStyleOption subclass to paint a push button:</p>
<pre>    void MyPushButton::paintEvent(QPaintEvent *)
    {
        QStyleOptionButton option;
        option.initFrom(this);
        option.state = isDown() ? QStyle::State_Sunken : QStyle::State_Raised;
        if (isDefault())
            option.features |= QStyleOptionButton::DefaultButton;
        option.text = text();
        option.icon = icon();

        QPainter painter(this);
        style()-&gt;drawControl(QStyle::CE_PushButton, &amp;option, &amp;painter, this);
    }</pre>
<p>In our example, the control is a QStyle::CE_PushButton, and according to the QStyle::drawControl() documentation the corresponding class is QStyleOptionButton.</p>
<p>When reimplementing QStyle functions that take a QStyleOption parameter, you often need to cast the QStyleOption to a subclass. For safety, you can use qstyleoption_cast() to ensure that the pointer type is correct. For example:</p>
<pre>    void MyStyle::drawPrimitive(PrimitiveElement element,
                                const QStyleOption *option,
                                QPainter *painter,
                                const QWidget *widget)
    {
        if (element == PE_FrameFocusRect) {
            const QStyleOptionFocusRect *focusRectOption =
                    qstyleoption_cast&lt;const QStyleOptionFocusRect *&gt;(option);
            if (focusRectOption) {
                <span class=&quote;comment&quote;>// ...</span>
            }
        }
        <span class=&quote;comment&quote;>// ...</span>
    }</pre>
<p>The qstyleoption_cast() function will return 0 if the object to which <tt>option</tt> points is not of the correct type.</p>
<p>For an example demonstrating how style options can be used, see the Styles example.</p>

*/">
    <method name="public QStyleOption(com.trolltech.qt.gui.QStyleOption other__0)" doc="/**
<p>Constructs a copy of <i>other</i>.</p>

*/"/>
    <method name="public QStyleOption(int version__0, int type__1)" doc="/**
<p>Constructs a QStyleOption with the specified <i>version</i> and <i>type</i>.</p>
<p>The version has no special meaning for QStyleOption; it can be used by subclasses to distinguish between different version of the same option type.</p>
<p>The state member variable is initialized to QStyle::State_None.</p>

*/"/>
    <method name="public final void init(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Use initFrom(<i>widget</i>) instead.</p>

*/"/>
    <method name="public final void initFrom(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Initializes the state, direction, rect, palette, and fontMetrics member variables based on the specified <i>widget</i>.</p>
<p>This is a convenience function; the member variables can also be initialized manually.</p>

*/"/>
    <enum name="StyleOptionVersion" doc="/**
<p>This enum is used to hold information about the version of the style option, and is defined for each QStyleOption subclass.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>1</td></tr>
</table></p>
<p>The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally don't need to check it.</p>

*/"/>
    <enum name="OptionType" doc="/**
<p>This enum is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionButton</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionComboBox</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionComplex</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOption</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionDockWidget</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionFocusRect</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionFrame QStyleOptionFrameV2</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionGraphicsItem</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionGroupBox</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionHeader</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionMenuItem</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionProgressBar QStyleOptionProgressBarV2</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionRubberBand</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionSizeGrip</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionSlider</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionSpinBox</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionTab</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionTabBarBase</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionTabWidgetFrame</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionTitleBar</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionToolBar</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionToolBox</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionToolButton</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionViewItem (used in Interviews)</td></tr>
</table></p>
<p>The following values are used for custom controls:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Reserved for custom QStyleOptions; all custom controls values must be above this value</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Reserved for custom QStyleOptions; all custom complex controls values must be above this value</td></tr>
</table></p>
<p>Some style options are defined for various Qt3Support controls:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionQ3DockWindow</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionQ3ListView</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QStyleOptionQ3ListViewItem</td></tr>
</table></p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPalette palette()" doc="/**
<p>the palette that should be used when painting the control</p>
<p>By default, the application's default palette is used.</p>

*/"/>
    <method name="public final void setPalette(com.trolltech.qt.gui.QPalette palette)" doc="/**
<p>the palette that should be used when painting the control</p>
<p>By default, the application's default palette is used.</p>

*/"/>
    <method name="public final int version()" doc="/**
<p>the version of the style option</p>
<p>This value can be used by subclasses to implement extensions without breaking compatibility. If you use the qstyleoption_cast() function, you normally don't need to check it.</p>
<p>The default value is 1.</p>

*/"/>
    <method name="public final void setVersion(int version)" doc="/**
<p>the version of the style option</p>
<p>This value can be used by subclasses to implement extensions without breaking compatibility. If you use the qstyleoption_cast() function, you normally don't need to check it.</p>
<p>The default value is 1.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.LayoutDirection direction()" doc="/**
<p>the text layout direction that should be used when drawing text in the control</p>
<p>By default, the layout direction is Qt::LeftToRight.</p>

*/"/>
    <method name="public final void setDirection(com.trolltech.qt.core.Qt.LayoutDirection direction)" doc="/**
<p>the text layout direction that should be used when drawing text in the control</p>
<p>By default, the layout direction is Qt::LeftToRight.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect rect()" doc="/**
<p>the area that should be used for various calculations and painting.</p>
<p>This can have different meanings for different types of elements. For example, for a QStyle::CE_PushButton element it would be the rectangle for the entire button, while for a QStyle::CE_PushButtonLabel element it would be just the area for the push button label.</p>
<p>The default value is a null rectangle, i.e. a rectangle with both the width and the height set to 0.</p>

*/"/>
    <method name="public final void setRect(com.trolltech.qt.core.QRect rect)" doc="/**
<p>the area that should be used for various calculations and painting.</p>
<p>This can have different meanings for different types of elements. For example, for a QStyle::CE_PushButton element it would be the rectangle for the entire button, while for a QStyle::CE_PushButtonLabel element it would be just the area for the push button label.</p>
<p>The default value is a null rectangle, i.e. a rectangle with both the width and the height set to 0.</p>

*/"/>
    <method name="public final int type()" doc="/**
<p>the option type of the style option</p>
<p>The default value is SO_Default.</p>

*/"/>
    <method name="public final void setType(int type)" doc="/**
<p>the option type of the style option</p>
<p>The default value is SO_Default.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QStyle.State state()" doc="/**
<p>the style flags that are used when drawing the control</p>
<p>The default value is QStyle::State_None.</p>

*/"/>
    <method name="public final void setState(com.trolltech.qt.gui.QStyle.State state)" doc="/**
<p>the style flags that are used when drawing the control</p>
<p>The default value is QStyle::State_None.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QFontMetrics fontMetrics()" doc="/**
<p>the font metrics that should be used when drawing text in the control</p>
<p>By default, the application's default font is used.</p>

*/"/>
    <method name="public final void setFontMetrics(com.trolltech.qt.gui.QFontMetrics fontMetrics)" doc="/**
<p>the font metrics that should be used when drawing text in the control</p>
<p>By default, the application's default font is used.</p>

*/"/>
</class>
