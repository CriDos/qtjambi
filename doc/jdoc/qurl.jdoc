<class name="QUrl" doc="/**
<p>The QUrl class provides a convenient interface for working with URLs.</p>
<p>It can parse and construct URLs in both encoded and unencoded form. QUrl also has support for internationalized domain names (IDNs).</p>
<p>The most common way to use QUrl is to initialize it via the constructor by passing a QString. Otherwise, setUrl() and setEncodedUrl() can also be used.</p>
<p>URLs can be represented in two forms: encoded or unencoded. The unencoded representation is suitable for showing to users, but the encoded representation is typically what you would send to a web server. For example, the unencoded URL &quot;http://b<font color=&quote;red&quote;><b>&lt;Missing HTML&gt;</b></font><tt></tt>hler.example.com&quot; would be sent to the server as &quot;http://xn--bhler-kva.example.com/List%20of%20applicants.xml&quot;.</p>
<p>A URL can also be constructed piece by piece by calling setScheme(), setUserName(), setPassword(), setHost(), setPort(), setPath(), setEncodedQuery() and setFragment(). Some convenience functions are also available: setAuthority() sets the user name, password, host and port. setUserInfo() sets the user name and password at once.</p>
<p>Call isValid() to check if the URL is valid. This can be done at any point during the constructing of a URL.</p>
<p>Constructing a query is particularily convenient through the use of setQueryItems(), addQueryItem() and removeQueryItem(). Use setQueryDelimiters() to customize the delimiters used for generating the query string.</p>
<p>For the convenience of generating encoded URL strings or query strings, there are two static functions called fromPercentEncoding() and toPercentEncoding() which deal with percent encoding and decoding of QStrings.</p>
<p>Calling isRelative() will tell whether or not the URL is relative. A relative URL can be resolved by passing it as argument to resolved(), which returns an absolute URL. isParentOf() is used for determining whether one URL is a parent of another.</p>
<p>fromLocalFile() constructs a QUrl by parsing a local file path. toLocalFile() converts a URL to a local file path.</p>
<p>The human readable representation of the URL is fetched with toString(). This representation is appropriate for displaying a URL to a user in unencoded form. The encoded form however, as returned by toEncoded(), is for internal use, passing to web servers, mail clients and so on.</p>
<p>QUrl conforms to the URI specification from RFC 3986 (Uniform Resource Identifier: Generic Syntax), and includes scheme extensions from RFC 1738 (Uniform Resource Locators).</p>

*/">
    <method name="public QUrl(com.trolltech.qt.core.QUrl copy__0)" doc="/**
<p>Constructs a copy of <i>other</i>.</p>

*/"/>
    <method name="public QUrl(java.lang.String url__0)" doc="/**
<p>Constructs a URL by parsing <i>url</i>. <i>url</i> is assumed to be in human readable representation, with no percent encoding. QUrl will automatically percent encode all characters that are not allowed in a URL.</p>
<p>Example:</p>
<pre>    QUrl url(&quot;http:<span class=&quote;comment&quote;>//www.example.com/List of holidays.xml&quot;);</span>
<span class=&quote;comment&quote;>    // url.toEncoded() == &quot;http://www.example.com/List of holidays.xml&quot;</span></pre>
<p>To construct a URL from an encoded string, call fromEncoded():</p>
<pre>    QUrl url = QUrl::fromEncoded(&quot;http:<span class=&quote;comment&quote;>//www.trolltech.com/List%20of%20holidays.xml&quot;);</span></pre>

*/"/>
    <method name="public QUrl(java.lang.String url__0, com.trolltech.qt.core.QUrl.ParsingMode mode__1)" doc="/**
<p>Parses the <i>url</i> using the parser mode <i>parsingMode</i>.</p>

*/"/>
    <method name="public QUrl()" doc="/**
<p>Constructs an empty QUrl object.</p>

*/"/>
    <method name="public final void addQueryItem(java.lang.String key__0, java.lang.String value__1)" doc="/**
<p>Inserts the pair <i>key</i> = <i>value</i> into the query string of the URL.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; allQueryItemValues(java.lang.String key__0)" doc="/**
<p>Returns the a list of query string values whose key is equal to <i>key</i> from the URL.</p>

*/"/>
    <method name="public final java.lang.String authority()" doc="/**
<p>Returns the authority of the URL if it is defined; otherwise an empty string is returned.</p>

*/"/>
    <method name="public final void clear()" doc="/**
<p>Resets the content of the QUrl. After calling this function, the QUrl is equal to one that has been constructed with the default empty constructor.</p>

*/"/>
    <method name="public final void detach()" doc="/**
<p>Forces a detach.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QByteArray encodedQuery()" doc="/**
<p>Returns the query string of the URL in percent encoded form.</p>

*/"/>
    <method name="public final java.lang.String errorString()" doc="/**
<p>Returns a text string that explains why an URL is invalid in the case being; otherwise returns an empty string.</p>

*/"/>
    <method name="public final java.lang.String fragment()" doc="/**
<p>Returns the fragment of the URL.</p>

*/"/>
    <method name="public final boolean hasFragment()" doc="/**
<p>Returns true if this URL contains a fragment (i.e., if # was seen on it).</p>

*/"/>
    <method name="public final boolean hasQuery()" doc="/**
<p>Returns true if this URL contains a Query (i.e., if ? was seen on it).</p>

*/"/>
    <method name="public final boolean hasQueryItem(java.lang.String key__0)" doc="/**
<p>Returns true if there is a query string pair whose key is equal to <i>key</i> from the URL.</p>

*/"/>
    <method name="public final java.lang.String host()" doc="/**
<p>Returns the host of the URL if it is defined; otherwise an empty string is returned.</p>

*/"/>
    <method name="public final boolean isDetached()"/>
    <method name="public final boolean isEmpty()" doc="/**
<p>Returns true if the URL has no data; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isParentOf(com.trolltech.qt.core.QUrl url__0)" doc="/**
<p>Returns true if this URL is a parent of <i>childUrl</i>. <i>childUrl</i> is a child of this URL if the two URLs share the same scheme and authority, and this URL's path is a parent of the path of <i>childUrl</i>.</p>

*/"/>
    <method name="public final boolean isRelative()" doc="/**
<p>Returns true if the URL is relative; otherwise returns false. A URL is relative if its scheme is undefined; this function is therefore equivalent to calling scheme().isEmpty().</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the URL is valid; otherwise returns false.</p>
<p>The URL is run through a conformance test. Every part of the URL must conform to the standard encoding rules of the URI standard for the URL to be reported as valid.</p>
<pre>    bool checkUrl(const QUrl &amp;url) {
        if (!url.isValid()) {
            qDebug(QString(&quot;Invalid URL: %1&quot;).arg(url.toString()));
            return false;
        }

        return true;
    }</pre>

*/"/>
    <method name="public final java.lang.String password()" doc="/**
<p>Returns the password of the URL if it is defined; otherwise an empty string is returned.</p>

*/"/>
    <method name="public final java.lang.String path()" doc="/**
<p>Returns the path of the URL.</p>

*/"/>
    <method name="public final int port()" doc="/**
<p>Returns the port of the URL, or -1 if the port is unspecified.</p>

*/"/>
    <method name="public final int port(int defaultPort__0)" doc="/**
<p>Returns the port of the URL, or <i>defaultPort</i> if the port is unspecified.</p>
<p>Example:</p>
<pre>    QFtp ftp;
    ftp.connectToHost(url.host(), url.port(21));</pre>

*/"/>
    <method name="public final java.lang.String queryItemValue(java.lang.String key__0)" doc="/**
<p>Returns the first query string value whose key is equal to <i>key</i> from the URL.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.QPair&lt;java.lang.String, java.lang.String&gt;&gt; queryItems()" doc="/**
<p>Returns the query string of the URL, as a map of keys and values.</p>

*/"/>
    <method name="public final byte queryPairDelimiter()" doc="/**
<p>Returns the character used to delimit between key-value pairs in the query string of the URL.</p>

*/"/>
    <method name="public final byte queryValueDelimiter()" doc="/**
<p>Returns the character used to delimit between keys and values in the query string of the URL.</p>

*/"/>
    <method name="public final void removeAllQueryItems(java.lang.String key__0)" doc="/**
<p>Removes all the query string pairs whose key is equal to <i>key</i> from the URL.</p>

*/"/>
    <method name="public final void removeQueryItem(java.lang.String key__0)" doc="/**
<p>Removes the first query string pair whose key is equal to <i>key</i> from the URL.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QUrl resolved(com.trolltech.qt.core.QUrl relative__0)" doc="/**
<p>Returns the result of the merge of this URL with <i>relative</i>. This URL is used as a base to convert <i>relative</i> to an absolute URL.</p>
<p>If <i>relative</i> is not a relative URL, this function will return <i>relative</i> directly. Otherwise, the paths of the two URLs are merged, and the new URL returned has the scheme and authority of the base URL, but with the merged path, as in the following example:</p>
<pre>    QUrl baseUrl(&quot;http:<span class=&quote;comment&quote;>//www.trolltech.com/support&quot;);</span>
    QUrl relativeUrl(&quot;../products/solutions&quot;);
    qDebug(baseUrl.resolved(relativeUrl).toString());
<span class=&quote;comment&quote;>    // prints &quot;http://www.trolltech.com/products/solutions&quot;</span></pre>
<p>Calling resolved() with &quot;..&quot; returns a QUrl whose directory is one level higher than the original. Similarly, calling resolved() with &quot;../..&quot; removes two levels from the path. If <i>relative</i> is &quot;/&quot;, the path becomes &quot;/&quot;.</p>

*/"/>
    <method name="public final java.lang.String scheme()" doc="/**
<p>Returns the scheme of the URL. If an empty string is returned, this means the scheme is undefined and the URL is then relative.</p>

*/"/>
    <method name="public final void setAuthority(java.lang.String authority__0)" doc="/**
<p>Sets the authority of the URL to <i>authority</i>.</p>
<p>The authority of a URL is the combination of user info, a host name and a port. All of these elements are optional; an empty authority is therefore valid.</p>
<p>The user info and host are separated by a '<a href=&quote;mailto:@&quote;>@</a>', and the host and port are separated by a ':'. If the user info is empty, the '<a href=&quote;mailto:@&quote;>@</a>' must be omitted; although a stray ':' is permitted if the port is empty.</p>
<p>The following example shows a valid authority string:</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qurl-authority.png]</font></p>
*/"/>
    <method name="public final void setEncodedQuery(com.trolltech.qt.core.QByteArray query__0)" doc="/**
<p>Sets the query string of the URL to <i>query</i>. The string is inserted as-is, and no further encoding is performed when calling toEncoded().</p>
<p>This function is useful if you need to pass a query string that does not fit into the key-value pattern, or that uses a different scheme for encoding special characters than what is suggested by QUrl.</p>
<p>Passing a value of QByteArray() to <i>query</i> (a null QByteArray) unsets the query completely. However, passing a value of QByteArray(&quot;&quot;) will set the query to an empty value, as if the original URL had a lone &quot;?&quot;.</p>

*/"/>
    <method name="public final void setEncodedUrl(com.trolltech.qt.core.QByteArray url__0)" doc="/**
<p>Constructs a URL by parsing the contents of <i>encodedUrl</i>.</p>
<p><i>encodedUrl</i> is assumed to be a URL string in percent encoded form, containing only ASCII characters.</p>
<p>Use isValid() to determine if a valid URL was constructed.</p>

*/"/>
    <method name="public final void setEncodedUrl(com.trolltech.qt.core.QByteArray url__0, com.trolltech.qt.core.QUrl.ParsingMode mode__1)" doc="/**
<p>Constructs a URL by parsing the contents of <i>encodedUrl</i> using the given <i>parsingMode</i>.</p>

*/"/>
    <method name="public final void setFragment(java.lang.String fragment__0)" doc="/**
<p>Sets the fragment of the URL to <i>fragment</i>. The fragment is the last part of the URL, represented by a '#' followed by a string of characters. It is typically used in HTTP for referring to a certain link or point on a page:</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qurl-fragment.png]</font></p><p>The fragment is sometimes also referred to as the URL &quot;reference&quot;.</p>
<p>Passing an argument of QString() (a null QString) will unset the fragment. Passing an argument of QString(&quot;&quot;) (an empty but not null QString) will set the fragment to an empty string (as if the original URL had a lone &quot;#&quot;).</p>

*/"/>
    <method name="public final void setHost(java.lang.String host__0)" doc="/**
<p>Sets the host of the URL to <i>host</i>. The host is part of the authority.</p>

*/"/>
    <method name="public final void setPassword(java.lang.String password__0)" doc="/**
<p>Sets the URL's password to <i>password</i>. The <i>password</i> is part of the user info element in the authority of the URL, as described in setUserInfo().</p>

*/"/>
    <method name="public final void setPath(java.lang.String path__0)" doc="/**
<p>Sets the path of the URL to <i>path</i>. The path is the part of the URL that comes after the authority but before the query string.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qurl-ftppath.png]</font></p><p>For non-hierarchical schemes, the path will be everything following the scheme declaration, as in the following example:</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qurl-mailtopath.png]</font></p>
*/"/>
    <method name="public final void setPort(int port__0)" doc="/**
<p>Sets the port of the URL to <i>port</i>. The port is part of the authority of the URL, as described in setAuthority().</p>
<p><i>port</i> must be between 0 and 65535 inclusive. Setting the port to -1 indicates that the port is unspecified.</p>

*/"/>
    <method name="public final void setQueryDelimiters(byte valueDelimiter__0, byte pairDelimiter__1)" doc="/**
<p>Sets the characters used for delimiting between keys and values, and between key-value pairs in the URL's query string. The default value delimiter is '=' and the default pair delimiter is '&amp;'.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qurl-querystring.png]</font></p><p><i>valueDelimiter</i> will be used for separating keys from values, and <i>pairDelimiter</i> will be used to separate key-value pairs. Any occurrences of these delimiting characters in the encoded representation of the keys and values of the query string are percent encoded.</p>
<p>If <i>valueDelimiter</i> is set to '-' and <i>pairDelimiter</i> is '/', the above query string would instead be represented like this:</p>
<pre>    http:<span class=&quote;comment&quote;>//www.example.com/cgi-bin/drawgraph.cgi?type-pie/color-green</span></pre>
<p>Calling this function does not change the delimiters of the current query string. It only affects queryItems(), setQueryItems() and addQueryItems().</p>

*/"/>
    <method name="public final void setQueryItems(java.util.List&lt;com.trolltech.qt.QPair&lt;java.lang.String, java.lang.String&gt;&gt; query__0)" doc="/**
<p>Sets the query string of the URL to an encoded version of <i>query</i>. The contents of <i>query</i> are converted to a string internally, each pair delimited by the character returned by pairDelimiter(), and the key and value are delimited by valueDelimiter().</p>

*/"/>
    <method name="public final void setScheme(java.lang.String scheme__0)" doc="/**
<p>Sets the scheme of the URL to <i>scheme</i>. As a scheme can only contain ASCII characters, no conversion or encoding is done on the input.</p>
<p>The scheme describes the type (or protocol) of the URL. It's represented by one or more ASCII characters at the start the URL, and is followed by a ':'. The following example shows a URL where the scheme is &quot;ftp&quot;:</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qurl-authority2.png]</font></p><p>The scheme can also be empty, in which case the URL is interpreted as relative.</p>

*/"/>
    <method name="public final void setUrl(java.lang.String url__0)" doc="/**
<p>Constructs a URL by parsing the contents of <i>url</i>.</p>
<p><i>url</i> is assumed to be in unicode format, with no percent encoding.</p>
<p>Calling isValid() will tell whether or not a valid URL was constructed.</p>

*/"/>
    <method name="public final void setUrl(java.lang.String url__0, com.trolltech.qt.core.QUrl.ParsingMode mode__1)" doc="/**
<p>Parses <i>url</i> using the parsing mode <i>parsingMode</i>.</p>

*/"/>
    <method name="public final void setUserInfo(java.lang.String userInfo__0)" doc="/**
<p>Sets the user info of the URL to <i>userInfo</i>. The user info is an optional part of the authority of the URL, as described in setAuthority().</p>
<p>The user info consists of a user name and optionally a password, separated by a ':'. If the password is empty, the colon must be omitted. The following example shows a valid user info string:</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qurl-authority3.png]</font></p>
*/"/>
    <method name="public final void setUserName(java.lang.String userName__0)" doc="/**
<p>Sets the URL's user name to <i>userName</i>. The <i>userName</i> is part of the user info element in the authority of the URL, as described in setUserInfo().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QByteArray toEncoded(com.trolltech.qt.core.QUrl.FormattingOptions options__0)" doc="/**
<p>Returns the encoded representation of the URL if it's valid; otherwise an empty QByteArray is returned. The output can be customized by passing flags with <i>options</i>.</p>
<p>The user info, path and fragment are all converted to UTF-8, and all non-ASCII characters are then percent encoded. The host name is encoded using Punycode.</p>

*/"/>
    <method name="public final java.lang.String toLocalFile()" doc="/**
<p>Returns the path of this URL formatted as a local file path.</p>

*/"/>
    <method name="public final java.lang.String toString(com.trolltech.qt.core.QUrl.FormattingOptions options__0)" doc="/**
<p>Returns the human-displayable string representation of the URL. The output can be customized by passing flags with <i>options</i>.</p>

*/"/>
    <method name="public final java.lang.String userInfo()" doc="/**
<p>Returns the user info of the URL, or an empty string if the user info is undefined.</p>

*/"/>
    <method name="public final java.lang.String userName()" doc="/**
<p>Returns the user name of the URL if it is defined; otherwise an empty string is returned.</p>

*/"/>
    <method name="public final static java.lang.String fromAce(com.trolltech.qt.core.QByteArray arg__0)" doc="/**
<p>Returns the Unicode form of the given domain name <i>domain</i>, which is encoded in the ASCII Compatible Encoding (ACE). The result of this function is considered equivalent to <i>domain</i>.</p>
<p>If the value in <i>domain</i> cannot be encoded, it will be converted to QString and returned.</p>
<p>The ASCII Compatible Encoding (ACE) is defined by RFC 3490, RFC 3491 and RFC 3492. It is part of the Internationalizing Domain Names in Applications (IDNA) specification, which allows for domain names (like <tt>&quot;www.trolltech.com&quot;</tt>) to be written using international characters.</p>

*/"/>
    <method name="public final static com.trolltech.qt.core.QUrl fromEncoded(com.trolltech.qt.core.QByteArray url__0, com.trolltech.qt.core.QUrl.ParsingMode mode__1)" doc="/**
<p>Parses the URL using <i>parsingMode</i>.</p>

*/"/>
    <method name="public final static com.trolltech.qt.core.QUrl fromEncoded(com.trolltech.qt.core.QByteArray url__0)" doc="/**
<p>Parses <i>input</i> and returns the corresponding QUrl. <i>input</i> is assumed to be in encoded form, containing only ASCII characters.</p>
<p>The URL is parsed using TolerantMode.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QUrl fromLocalFile(java.lang.String localfile__0)" doc="/**
<p>Returns a QUrl representation of <i>localFile</i>, interpreted as a local file.</p>

*/"/>
    <method name="public final static java.lang.String fromPercentEncoding(com.trolltech.qt.core.QByteArray arg__0)" doc="/**
<p>Returns a decoded copy of <i>input</i>. <i>input</i> is first decoded from percent encoding, then converted from UTF-8 to unicode.</p>

*/"/>
    <method name="public final static java.lang.String fromPunycode(com.trolltech.qt.core.QByteArray arg__0)" doc="/**
<p>Returns the Punycode decoded representation of <i>pc</i>.</p>
<p>Punycode is a Unicode encoding used for internationalized domain names, as defined in RFC3492. If you want to convert a domain from its ASCII-compatible encoding to the Unicode representation, use fromAce().</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; idnWhitelist()" doc="/**
<p>Returns the current whitelist of top-level domains that are allowed to have non-ASCII characters in their compositions.</p>
<p>See setIdnWhitelist() for the rationale of this list.</p>

*/"/>
    <method name="public native static void setIdnWhitelist(java.util.List&lt;java.lang.String&gt; arg__0)" doc="/**
<p>Sets the whitelist of Top-Level Domains (TLDs) that are allowed to have non-ASCII characters in domains to the value of <i>list</i>.</p>
<p>Qt has comes a default list that contains the Internet top-level domains that have published support for Internationalized Domain Names (IDNs) and rules to guarantee that no deception can happen between similarly-looking characters (such as the Latin lowercase letter <tt>'a'</tt> and the Cyrillic equivalent, which in most fonts are visually identical).</p>
<p>This list is periodically maintained, as registrars publish new rules.</p>
<p>This function is provided for those who need to manipulate the list, in order to add or remove a TLD. It is not recommended to change its value for purposes other than testing, as it may expose users to security risks.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QByteArray toAce(java.lang.String arg__0)" doc="/**
<p>Returns the ASCII Compatible Encoding of the given domain name <i>domain</i>. The result of this function is considered equivalent to <i>domain</i>.</p>
<p>The ASCII-Compatible Encoding (ACE) is defined by RFC 3490, RFC 3491 and RFC 3492. It is part of the Internationalizing Domain Names in Applications (IDNA) specification, which allows for domain names (like <tt>&quot;www.trolltech.com&quot;</tt>) to be written using international characters.</p>

*/"/>
    <method name="public final static com.trolltech.qt.core.QByteArray toPercentEncoding(java.lang.String arg__0, com.trolltech.qt.core.QByteArray exclude__1, com.trolltech.qt.core.QByteArray include__2)" doc="/**
<p>Returns an encoded copy of <i>input</i>. <i>input</i> is first converted to UTF-8, and all ASCII-characters that are not in the unreserved group are percent encoded. To prevent characters from being percent encoded pass them to <i>exclude</i>. To force characters to be percent encoded pass them to <i>include</i>.</p>
<p>Unreserved is defined as: ALPHA / DIGIT / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</p>
<pre>    QByteArray ba = QUrl::toPercentEncoding(&quot;{a fishy string?}&quot;, &quot;{}&quot;, &quot;s&quot;);
    qDebug(ba.constData());
<span class=&quote;comment&quote;>    // prints &quot;{a fi%73hy %73tring%3F}&quot;</span></pre>

*/"/>
    <method name="public native static com.trolltech.qt.core.QByteArray toPunycode(java.lang.String arg__0)" doc="/**
<p>Returns a <i>uc</i> in Punycode encoding.</p>
<p>Punycode is a Unicode encoding used for internationalized domain names, as defined in RFC3492. If you want to convert a domain name from Unicode to its ASCII-compatible representation, use toAce().</p>

*/"/>
    <enum name="ParsingMode" doc="/**
<p>The parsing mode controls the way QUrl parses strings.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QUrl will try to correct some common errors in URLs. This mode is useful when processing URLs entered by users.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Only valid URLs are accepted. This mode is useful for general URL validation.</td></tr>
</table></p>
<p>In TolerantMode, the parser corrects the following invalid input:</p>
<ul>
<li>Spaces and &quot;%20&quot;: If an encoded URL contains a space, this will be replaced with &quot;%20&quot;. If a decoded URL contains &quot;%20&quot;, this will be replaced with a single space before the URL is parsed.</li>
<li>Single &quot;%&quot; characters: Any occurrences of a percent character &quot;%&quot; not followed by exactly two hexadecimal characters (e.g., &quot;13% coverage.html&quot;) will be replaced by &quot;%25&quot;.</li>
<li>Non-US-ASCII characters: An encoded URL should only contain US-ASCII characters. In TolerantMode, characters outside this range are automatically percent-encoded.</li>
<li>Any occurence of &quot;[&quot; and &quot;]&quot; following the host part of the URL is percent-encoded.</li>
</ul>

*/"/>
    <enum name="FormattingOption" doc="/**
<p>The formatting options define how the URL is formatted when written out as text.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The URL is left unchanged.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The scheme is removed from the URL.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Any password in the URL is removed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Any user information in the URL is removed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Any specified port is removed from the URL.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The URL's path is removed, leaving only the scheme, host address, and port (if present).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The query part of the URL (following a '?' character) is removed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The trailing slash is removed if one is present.</td></tr>
</table></p>

*/"/>
</class>
