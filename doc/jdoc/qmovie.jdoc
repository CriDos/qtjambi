<class name="QMovie" doc="/**
<p>The QMovie class is a convenience class for playing movies with QImageReader.</p>
<p>First, create a QMovie object by passing either the name of a file or a pointer to a QIODevice containing an animated image format to QMovie's constructor. You can call isValid() to check if the image data is valid, before starting the movie. To start the movie, call start(). QMovie will enter Running state, and emit started() and stateChanged(). To get the current state of the movie, call state().</p>
<p>To display the movie in your application, you can pass your QMovie object to QLabel::setMovie(). Example:</p>
<pre>    QLabel label;
    QMovie *movie = new QMovie(&quot;animations/fire.gif&quot;);

    label.setMovie(movie);
    movie-&gt;start();</pre>
<p>Whenever a new frame is available in the movie, QMovie will emit updated(). If the size of the frame changes, resized() is emitted. You can call currentImage() or currentPixmap() to get a copy of the current frame. When the movie is done, QMovie emits finished(). If any error occurs during playback (i.e, the image file is corrupt), QMovie will emit error().</p>
<p>You can control the speed of the movie playback by calling setSpeed(), which takes the percentage of the original speed as an argument. Pause the movie by calling setPaused(true). QMovie will then enter Paused state and emit stateChanged(). If you call setPaused(false), QMovie will reenter Running state and start the movie again. To stop the movie, call stop().</p>
<p>Certain animation formats allow you to set the background color. You can call setBackgroundColor() to set the color, or backgroundColor() to retrieve the current background color.</p>
<p>currentFrameNumber() returns the sequence number of the current frame. The first frame in the animation has the sequence number 0. frameCount() returns the total number of frames in the animation, if the image format supports this. You can call loopCount() to get the number of times the movie should loop before finishing. nextFrameDelay() returns the number of milliseconds the current frame should be displayed.</p>
<p>QMovie can be instructed to cache frames of an animation by calling setCacheMode().</p>
<p>Call supportedFormats() for a list of formats that QMovie supports.</p>

*/">
    <method name="public QMovie(java.lang.String fileName__0, com.trolltech.qt.core.QByteArray format__1, com.trolltech.qt.core.QObject parent__2)" doc="/**
<p>Constructs a QMovie object. QMovie will use read image data from <i>fileName</i>. If <i>format</i> is not empty, QMovie will use the image format <i>format</i> for decoding the image data. Otherwise, QMovie will attempt to guess the format.</p>
<p>The <i>parent</i> object is passed to QObject's constructor.</p>

*/"/>
    <method name="public QMovie(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a QMovie object, passing the <i>parent</i> object to QObject's constructor.</p>

*/"/>
    <method name="public QMovie(com.trolltech.qt.core.QIODevice device__0, com.trolltech.qt.core.QByteArray format__1, com.trolltech.qt.core.QObject parent__2)" doc="/**
<p>Constructs a QMovie object. QMovie will use read image data from <i>device</i>, which it assumes is open and readable. If <i>format</i> is not empty, QMovie will use the image format <i>format</i> for decoding the image data. Otherwise, QMovie will attempt to guess the format.</p>
<p>The <i>parent</i> object is passed to QObject's constructor.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor backgroundColor()" doc="/**
<p>Returns the background color of the movie. If no background color has been assigned, an invalid QColor is returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMovie.CacheMode cacheMode()"/>
    <method name="public final int currentFrameNumber()" doc="/**
<p>Returns the sequence number of the current frame. The number of the first frame in the movie is 0.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QImage currentImage()" doc="/**
<p>Returns the current frame as a QImage.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPixmap currentPixmap()" doc="/**
<p>Returns the current frame as a QPixmap.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QIODevice device()" doc="/**
<p>Returns the device QMovie reads image data from. If no device has currently been assigned, 0 is returned.</p>

*/"/>
    <method name="public final java.lang.String fileName()" doc="/**
<p>Returns the name of the file that QMovie reads image data from. If no file name has been assigned, or if the assigned device is not a file, an empty QString is returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QByteArray format()" doc="/**
<p>Returns the format that QMovie uses when decoding image data. If no format has been assigned, an empty QByteArray() is returned.</p>

*/"/>
    <method name="public final int frameCount()" doc="/**
<p>Returns the number of frames in the movie.</p>
<p>Certain animation formats do not support this feature, in which case 0 is returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect frameRect()" doc="/**
<p>Returns the rect of the last frame. If no frame has yet been updated, an invalid QRect is returned.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the movie is valid (e.g., the image data is readable and the image format is supported); otherwise returns false.</p>

*/"/>
    <method name="public final boolean jumpToFrame(int frameNumber__0)" doc="/**
<p>Jumps to frame number <i>frameNumber</i>. Returns true on success; otherwise returns false.</p>

*/"/>
    <method name="public final boolean jumpToNextFrame()" doc="/**
<p>Jumps to the next frame. Returns true on success; otherwise returns false.</p>

*/"/>
    <method name="public final int loopCount()" doc="/**
<p>Returns the number of times the movie will loop before it finishes. If the movie will only play once (no looping), loopCount returns 0. If the movie loops forever, loopCount returns -1.</p>
<p>Note that, if the image data comes from a sequential device (e.g. a socket), QMovie can only loop the movie if the cacheMode is set to QMovie::CacheAll.</p>

*/"/>
    <method name="public final int nextFrameDelay()" doc="/**
<p>Returns the number of milliseconds QMovie will wait before updating the next frame in the animation.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize scaledSize()" doc="/**
<p>Returns the scaled size of frames.</p>

*/"/>
    <method name="public final void setBackgroundColor(com.trolltech.qt.gui.QColor color__0)" doc="/**
<p>For image formats that support it, this function sets the background color to <i>color</i>.</p>

*/"/>
    <method name="public final void setCacheMode(com.trolltech.qt.gui.QMovie.CacheMode mode__0)"/>
    <method name="public final void setDevice(com.trolltech.qt.core.QIODevice device__0)" doc="/**
<p>Sets the current device to <i>device</i>. QMovie will read image data from this device when the movie is running.</p>

*/"/>
    <method name="public final void setFileName(java.lang.String fileName__0)" doc="/**
<p>Sets the name of the file that QMovie reads image data from, to <i>fileName</i>.</p>

*/"/>
    <method name="public final void setFormat(com.trolltech.qt.core.QByteArray format__0)" doc="/**
<p>Sets the format that QMovie will use when decoding image data, to <i>format</i>. By default, QMovie will attempt to guess the format of the image data.</p>
<p>You can call supportedFormats() for the full list of formats QMovie supports.</p>

*/"/>
    <method name="public final void setPaused(boolean paused__0)" doc="/**
<p>If <i>paused</i> is true, QMovie will enter Paused state and emit stateChanged(Paused); otherwise it will enter Running state and emit stateChanged(Running).</p>

*/"/>
    <method name="public final void setScaledSize(com.trolltech.qt.core.QSize size__0)" doc="/**
<p>Sets the scaled frame size to <i>size</i>.</p>

*/"/>
    <method name="public final void setSpeed(int percentSpeed__0)"/>
    <method name="public final int speed()"/>
    <method name="public final void start()" doc="/**
<p>Starts the movie. QMovie will enter Running state, and start emitting updated() and resized() as the movie progresses.</p>
<p>If QMovie is in the Paused state, this function is equivalent to calling setPaused(false). If QMovie is already in the Running state, this function does nothing.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMovie.MovieState state()" doc="/**
<p>Returns the current state of QMovie.</p>

*/"/>
    <method name="public final void stop()" doc="/**
<p>Stops the movie. QMovie enters NotRunning state, and stops emitting updated() and resized(). If start() is called again, the movie will restart from the beginning.</p>
<p>If QMovie is already in the NotRunning state, this function does nothing.</p>

*/"/>
    <method name="public native static java.util.List&lt;com.trolltech.qt.core.QByteArray&gt; supportedFormats()" doc="/**
<p>Returns the list of image formats supported by QMovie.</p>

*/"/>
    <enum name="CacheMode" doc="/**
<p>This enum describes the different cache modes of QMovie.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>No frames are cached (the default).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>All frames are cached.</td></tr>
</table></p>

*/"/>
    <enum name="MovieState" doc="/**
<p>This enum describes the different states of QMovie.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The movie is not running. This is QMovie's initial state, and the state it enters after stop() has been called or the movie is finished.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The movie is paused, and QMovie stops emitting updated() or resized(). This state is entered after calling pause() or setPaused(true). The current frame number it kept, and the movie will continue with the next frame when unpause() or setPaused(false) is called.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The movie is running.</td></tr>
</table></p>

*/"/>
</class>
