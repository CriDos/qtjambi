<class name="QSizePolicy" doc="/**
<p>The QSizePolicy class is a layout attribute describing horizontal and vertical resizing policy.</p>
<p>The size policy of a widget is an expression of its willingness to be resized in various ways, and affects how the widget is treated by the layout engine. Widgets that reimplement QWidget::sizePolicy() return a QSizePolicy that describes the horizontal and vertical resizing policy they prefer when being laid out.</p>
<p>QSizePolicy contains two independent QSizePolicy::Policy values and two stretch factors; one describes the widgets's horizontal size policy, and the other describes its vertical size policy. It also contains a flag to indicate whether the height and width of its preferred size are related.</p>
<p>The horizontal and vertical policies can be set in the constructor, and altered using the setHorizontalPolicy() and setVerticalPolicy() functions. The stretch factors can be set using the setHorizontalStretch() and setVerticalStretch() functions. The flag indicating whether the widget's sizeHint() is width-dependent (such as a menu bar or a word-wrapping label) can be set using the setHeightForWidth() function.</p>
<p>The current size policies and stretch factors be retrieved using the horizontalPolicy(), verticalPolicy(), horizontalStretch() and verticalStretch() functions. Alternatively, use the transpose() function to swap the horizontal and vertical policies and stretches. The hasHeightForWidth() function returns the current status of the flag indicating the size hint dependencies.</p>
<p>Use the expandingDirections() function to determine whether the associated widget can make use of more space than its sizeHint() function indicates, as well as find out in which directions it can expand.</p>
<p>Finally, the QSizePolicy class provides operators comparing this size policy to a given policy, as well as a QVariant operator storing this QSizePolicy as a QVariant object.</p>

*/">
    <method name="public QSizePolicy()" doc="/**
<p>Constructs a QSizePolicy object with Fixed as its horizontal and vertical policies.</p>
<p>The policies can be altered using the setHorizontalPolicy() and setVerticalPolicy() functions. Use the setHeightForWidth() function if the preferred height of the widget is dependent on the width of the widget (for example, a QLabel with line wrapping).</p>

*/"/>
    <method name="public QSizePolicy(com.trolltech.qt.gui.QSizePolicy.Policy horizontal__0, com.trolltech.qt.gui.QSizePolicy.Policy vertical__1)" doc="/**
<p>Constructs a QSizePolicy object with the given <i>horizontal</i> and <i>vertical</i> policies.</p>
<p>Use setHeightForWidth() if the preferred height of the widget is dependent on the width of the widget (for example, a QLabel with line wrapping).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Orientations expandingDirections()" doc="/**
<p>Returns whether a widget can make use of more space than the QWidget::sizeHint() function indicates.</p>
<p>A value of Qt::Horizontal or Qt::Vertical means that the widget can grow horizontally or vertically (i.e., the horizontal or vertical policy is Expanding or MinimumExpanding), whereas Qt::Horizontal | Qt::Vertical means that it can grow in both dimensions.</p>

*/"/>
    <method name="public final boolean hasHeightForWidth()" doc="/**
<p>Returns true if the widget's preferred height depends on its width; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QSizePolicy.Policy horizontalPolicy()" doc="/**
<p>Returns the horizontal component of the size policy.</p>

*/"/>
    <method name="public final int horizontalStretch()" doc="/**
<p>Returns the horizontal stretch factor of the size policy.</p>

*/"/>
    <method name="public final void setHeightForWidth(boolean b__0)" doc="/**
<p>Sets the flag determining whether the widget's preferred height depends on its width, to <i>dependent</i>.</p>

*/"/>
    <method name="public final void setHorizontalPolicy(com.trolltech.qt.gui.QSizePolicy.Policy d__0)" doc="/**
<p>Sets the horizontal component to the given <i>policy</i>.</p>

*/"/>
    <method name="public final void setHorizontalStretch(byte stretchFactor__0)" doc="/**
<p>Sets the horizontal stretch factor of the size policy to the given <i>stretchFactor</i>.</p>

*/"/>
    <method name="public final void setVerticalPolicy(com.trolltech.qt.gui.QSizePolicy.Policy d__0)" doc="/**
<p>Sets the vertical component to the given <i>policy</i>.</p>

*/"/>
    <method name="public final void setVerticalStretch(byte stretchFactor__0)" doc="/**
<p>Sets the vertical stretch factor of the size policy to the given <i>stretchFactor</i>.</p>

*/"/>
    <method name="public final void transpose()" doc="/**
<p>Swaps the horizontal and vertical policies and stretches.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QSizePolicy.Policy verticalPolicy()" doc="/**
<p>Returns the vertical component of the size policy.</p>

*/"/>
    <method name="public final int verticalStretch()" doc="/**
<p>Returns the vertical stretch factor of the size policy.</p>

*/"/>
    <enum name="PolicyFlag" doc="/**
<p>These flags are combined together to form the various Policy values:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The widget can grow beyond its size hint if necessary.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The widget should get as much space as possible.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The widget can shrink below its size hint if necessary.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The widget's size hint is ignored. The widget will get as much space as possible.</td></tr>
</table></p>

*/"/>
    <enum name="Policy" doc="/**
<p>This enum describes the various per-dimension sizing types used when constructing a QSizePolicy.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The QWidget::sizeHint() is the only acceptable alternative, so the widget can never grow or shrink (e.g. the vertical direction of a push button).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The sizeHint() is minimal, and sufficient. The widget can be expanded, but there is no advantage to it being larger (e.g. the horizontal direction of a push button). It cannot be smaller than the size provided by sizeHint().</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The sizeHint() is a maximum. The widget can be shrunk any amount without detriment if other widgets need the space (e.g. a separator line). It cannot be larger than the size provided by sizeHint().</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The sizeHint() is best, but the widget can be shrunk and still be useful. The widget can be expanded, but there is no advantage to it being larger than sizeHint() (the default QWidget policy).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The sizeHint() is a sensible size, but the widget can be shrunk and still be useful. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a slider).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The sizeHint() is minimal, and sufficient. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a slider).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The sizeHint() is ignored. The widget will get as much space as possible.</td></tr>
</table></p>

*/"/>
</class>
