<class name="QMessageBox" doc="/**
<p>The QMessageBox class provides a modal dialog with a short message, an icon, and buttons laid out depending on the current style.</p>
<p>Message boxes are used to provide informative messages and to ask simple questions.</p>
<p>QMessageBox supports four severity levels, indicated by an icon:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qmessagebox-quest.png]</font></p></td><td>Question</td><td>For message boxes that ask a question as part of normal operation. Some style guides recommend using Information for this purpose.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qmessagebox-info.png]</font></p></td><td>Information</td><td>For message boxes that are part of normal operation.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qmessagebox-warn.png]</font></p></td><td>Warning</td><td>For message boxes that tell the user about unusual errors.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qmessagebox-crit.png]</font></p></td><td>Critical</td><td>For message boxes that tell the user about critical errors.</td></tr>
</table></p>
<p>The easiest way to pop up a message box in Qt is to call one of the static functions QMessageBox::information(), QMessageBox::question(), QMessageBox::critical(), and QMessageBox::warning(). For example:</p>
<pre>    int ret = QMessageBox::warning(this, tr(&quot;My Application&quot;),
                      tr(&quot;The document has been modified.\n&quot;
                         &quot;Do you want to save your changes?&quot;),
                      QMessageBox::Save | QMessageBox::Discard
                      | QMessageBox::Cancel,
                      QMessageBox::Save);</pre>
<p>The order of the buttons is platform-dependent.</p>
<p>The text part of all message box messages can be either rich text or plain text. With certain strings that contain XML meta characters, the auto-rich text detection may fail, interpreting plain text incorrectly as rich text. In these rare cases, use Qt::convertFromPlainText() to convert your plain text string to a visually equivalent rich text string or set the text format explicitly with setTextFormat().</p>
<p>Note that the Microsoft Windows User Interface Guidelines recommend using the application name as the window's title.</p>
<p>If none of the standard message boxes is suitable, you can create a QMessageBox from scratch. You can use addButton() to add the standard buttons in StandardButton. addButton() has an additional overload, that takes a custom text and the button role as an argument. The button role is used to automatically determine the position of the button within the dialog box.</p>
<p>When using an instance of QMessageBox with standard buttons, you can test the return value of exec() to determine which button was clicked. For example,</p>
<pre>    QMessageBox msgBox;
    msgBox.setStandardButtons(QMessageBox::Yes | QMessageBox::No);
    switch (msgBox.exec()) {
    case QMessageBox::Yes:
        <span class=&quote;comment&quote;>// yes was clicked</span>
        break;
    case QMessageBox::No:
        <span class=&quote;comment&quote;>// no was clicked</span>
        break;
    default:
        <span class=&quote;comment&quote;>// should never be reached</span>
        break;
    }</pre>
<p>When using an instance of QMessageBox with custom buttons, you can test the value of clickedButton() after calling exec(). For example,</p>
<pre>    QMessageBox msgBox;
    QPushButton *connectButton = msgBox.addButton(tr(&quot;Connect&quot;), QMessageBox::ActionRole);
    QPushButton *abortButton = msgBox.addButton(QMessageBox::Abort);

    msgBox.exec();

    if (msgBox.clickedButton() == connectButton) {
        <span class=&quote;comment&quote;>// connect</span>
    } else if (msgBox.clickedButton() == abortButton) {
        <span class=&quote;comment&quote;>// abort</span>
    }</pre>
<p>The text(), icon() and iconPixmap() functions provide access to the current text and pixmap of the message box. The setText(), setIcon() and setIconPixmap() let you change it. The difference between setIcon() and setIconPixmap() is that the former accepts a QMessageBox::Icon and can be used to set standard icons, whereas the latter accepts a QPixmap and can be used to set custom icons.</p>
<p>setButtonText() and buttonText() provide access to the buttons.</p>
<p>QMessageBox has no signals or slots.</p>
<p>The Standard Dialogs example shows how to use QMessageBox as well as other built-in Qt dialogs.</p>

*/">
    <method name="public QMessageBox(java.lang.String title__0, java.lang.String text__1, com.trolltech.qt.gui.QMessageBox.Icon icon__2, int button0__3, int button1__4, int button2__5, com.trolltech.qt.gui.QWidget parent__6, com.trolltech.qt.core.Qt.WindowFlags f__7)" doc="/**
<p>Constructs a message box with a <i>title</i>, a <i>text</i>, an <i>icon</i>, and up to three buttons.</p>
<p>The <i>icon</i> must be one of the following:</p>
<ul>
<li>QMessageBox::NoIcon</li>
<li>QMessageBox::Question</li>
<li>QMessageBox::Information</li>
<li>QMessageBox::Warning</li>
<li>QMessageBox::Critical</li>
</ul>
<p>Each button, <i>button0</i>, <i>button1</i> and <i>button2</i>, can have one of the following values:</p>
<ul>
<li>QMessageBox::NoButton</li>
<li>QMessageBox::Ok</li>
<li>QMessageBox::Cancel</li>
<li>QMessageBox::Yes</li>
<li>QMessageBox::No</li>
<li>QMessageBox::Abort</li>
<li>QMessageBox::Retry</li>
<li>QMessageBox::Ignore</li>
<li>QMessageBox::YesAll</li>
<li>QMessageBox::NoAll</li>
</ul>
<p>Use QMessageBox::NoButton for the later parameters to have fewer than three buttons in your message box. If you don't specify any buttons at all, QMessageBox will provide an Ok button.</p>
<p>One of the buttons can be OR-ed with the QMessageBox::Default flag to make it the default button (clicked when Enter is pressed).</p>
<p>One of the buttons can be OR-ed with the QMessageBox::Escape flag to make it the cancel or close button (clicked when Escape is pressed).</p>
<pre>            QMessageBox mb(&quot;Application Name&quot;,
                           &quot;Hardware failure.\n\nDisk error detected\nDo you want to stop?&quot;,
                           QMessageBox::Question,
                           QMessageBox::Yes | QMessageBox::Default,
                           QMessageBox::No | QMessageBox::Escape,
                           QMessageBox::NoButton);
            if (mb.exec() == QMessageBox::No) {
                <span class=&quote;comment&quote;>// try again</span></pre>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>
<p>The <i>parent</i> and <i>f</i> arguments are passed to the QDialog constructor.</p>

*/"/>
    <method name="public QMessageBox(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a message box with no text and no buttons.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>
<p>The <i>parent</i> argument is passed to the QDialog constructor.</p>

*/"/>
    <method name="public QMessageBox(com.trolltech.qt.gui.QMessageBox.Icon icon__0, java.lang.String title__1, java.lang.String text__2, com.trolltech.qt.gui.QMessageBox.StandardButtons buttons__3, com.trolltech.qt.gui.QWidget parent__4, com.trolltech.qt.core.Qt.WindowFlags f__5)" doc="/**
<p>Constructs a message box with the given <i>icon</i>, <i>title</i>, <i>text</i>, and standard <i>buttons</i>. (Buttons can also be added at any time using addButton().)</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>
<p>The <i>parent</i> and <i>f</i> arguments are passed to the QDialog constructor.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPushButton addButton(java.lang.String text__0, com.trolltech.qt.gui.QMessageBox.ButtonRole role__1)" doc="/**
<p>Creates a button with the given <i>text</i>, adds it to the message box for the specified <i>role</i>, and returns it.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPushButton addButton(com.trolltech.qt.gui.QMessageBox.StandardButton button__0)" doc="/**
<p>Adds a standard <i>button</i> to the message box if it is valid to do so, and returns the push button.</p>

*/"/>
    <method name="public final void addButton(com.trolltech.qt.gui.QAbstractButton button__0, com.trolltech.qt.gui.QMessageBox.ButtonRole role__1)" doc="/**
<p>Adds the given <i>button</i> to the message box with the specified <i>role</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractButton button(com.trolltech.qt.gui.QMessageBox.StandardButton which__0)" doc="/**
<p>Returns a pointer corresponding to the standard button <i>which</i>, or 0 if the standard button doesn't exist in this message box.</p>

*/"/>
    <method name="public final java.lang.String buttonText(int button__0)" doc="/**
<p>Returns the text of the message box button <i>button</i>, or an empty string if the message box does not contain the button.</p>
<p>Use button() and QPushButton::text() instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractButton clickedButton()" doc="/**
<p>Returns the button that was clicked by the user, or 0 if the user hit the <b>Escape</b> key and no escape button was set.</p>
<p>If exec() hasn't been called yet, returns 0.</p>
<p>Example:</p>
<pre>    QMessageBox messageBox(this);
    QAbstractButton *disconnectButton =
          messageBox.addButton(tr(&quot;Disconnect&quot;), QMessageBox::ActionRole);
    ...
    messageBox.exec();
    if (messageBox.clickedButton() == disconnectButton) {
        ...
    }</pre>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPushButton defaultButton()" doc="/**
<p>Returns the button that should be the message box's default button. Returns 0 if no default button was set.</p>

*/"/>
    <method name="public final java.lang.String detailedText()"/>
    <method name="public final com.trolltech.qt.gui.QAbstractButton escapeButton()" doc="/**
<p>Returns the button that is activated when escape is presed. Returns 0 if no escape button was set.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMessageBox.Icon icon()"/>
    <method name="public final com.trolltech.qt.gui.QPixmap iconPixmap()"/>
    <method name="public final java.lang.String informativeText()"/>
    <method name="public final void removeButton(com.trolltech.qt.gui.QAbstractButton button__0)" doc="/**
<p>Removes <i>button</i> from the button box without deleting it.</p>

*/"/>
    <method name="public final void setButtonText(int button__0, java.lang.String text__1)" doc="/**
<p>Sets the text of the message box button <i>button</i> to <i>text</i>. Setting the text of a button that is not in the message box is silently ignored.</p>
<p>Use addButton() instead.</p>

*/"/>
    <method name="public final void setDefaultButton(com.trolltech.qt.gui.QPushButton button__0)" doc="/**
<p>Sets the message box's default button to <i>button</i>.</p>

*/"/>
    <method name="public final void setDetailedText(java.lang.String text__0)"/>
    <method name="public final void setEscapeButton(com.trolltech.qt.gui.QAbstractButton button__0)" doc="/**
<p>Sets the button that gets activated when the <b>Escape</b> key is pressed to <i>button</i>.</p>

*/"/>
    <method name="public final void setIcon(com.trolltech.qt.gui.QMessageBox.Icon arg__0)"/>
    <method name="public final void setIconPixmap(com.trolltech.qt.gui.QPixmap pixmap__0)"/>
    <method name="public final void setInformativeText(java.lang.String text__0)"/>
    <method name="public final void setStandardButtons(com.trolltech.qt.gui.QMessageBox.StandardButtons buttons__0)"/>
    <method name="public final void setText(java.lang.String text__0)"/>
    <method name="public final void setTextFormat(com.trolltech.qt.core.Qt.TextFormat format__0)"/>
    <method name="public final void setWindowModality(com.trolltech.qt.core.Qt.WindowModality windowModality__0)" doc="/**
<p>This function shadows QWidget::setWindowModality().</p>
<p>Sets the modality of the message box to <i>windowModality</i>.</p>
<p>On Mac OS X, if the modality is set to Qt::WindowModal and the message box has a parent, then the message box will be a Qt::Sheet, otherwise the message box will be a standard dialog.</p>

*/"/>
    <method name="public final void setWindowTitle(java.lang.String title__0)" doc="/**
<p>This function shadows QWidget::setWindowTitle().</p>
<p>Sets the title of the message box to <i>title</i>. On Mac OS X, the window title is ignored (as required by the Mac OS X Guidelines).</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMessageBox.StandardButton standardButton(com.trolltech.qt.gui.QAbstractButton button__0)" doc="/**
<p>Returns the standard button enum value corresponding to the given <i>button</i>, or NoButton if the given <i>button</i> isn't a standard button.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMessageBox.StandardButtons standardButtons()"/>
    <method name="public final java.lang.String text()"/>
    <method name="public final com.trolltech.qt.core.Qt.TextFormat textFormat()"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent event__0)"/>
    <method name="protected void closeEvent(com.trolltech.qt.gui.QCloseEvent event__0)"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent event__0)"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent event__0)"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent event__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="public final static void about(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2)" doc="/**
<p>Displays a simple about box with title <i>title</i> and text <i>text</i>. The about box's parent is <i>parent</i>.</p>
<p>about() looks for a suitable icon in four locations:</p>
<ol type=&quote;1&quote;>
<li>It prefers parent-&gt;icon() if that exists.</li>
<li>If not, it tries the top-level widget containing <i>parent</i>.</li>
<li>If that fails, it tries the active window.</li>
<li>As a last resort it uses the Information icon.</li>
</ol>
<p>The about box has a single button labelled &quot;OK&quot;.</p>

*/"/>
    <method name="public final static void aboutQt(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1)" doc="/**
<p>Displays a simple message box about Qt, with the given <i>title</i> and centered over <i>parent</i> (if <i>parent</i> is not 0). The message includes the version number of Qt being used by the application.</p>
<p>This is useful for inclusion in the Help menu of an application. See the examples/menu/menu.cpp example.</p>
<p>QApplication provides this functionality as a slot.</p>

*/"/>
    <method name="public final static int critical(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, int button0__3, int button1__4, int button2__5)" doc="/**
<p>Opens a critical message box with the given <i>title</i> and <i>text</i>. The dialog may have up to three buttons. Each of the button parameters, <i>button0</i>, <i>button1</i> and <i>button2</i> may be set to one of the following values:</p>
<ul>
<li>QMessageBox::NoButton</li>
<li>QMessageBox::Ok</li>
<li>QMessageBox::Cancel</li>
<li>QMessageBox::Yes</li>
<li>QMessageBox::No</li>
<li>QMessageBox::Abort</li>
<li>QMessageBox::Retry</li>
<li>QMessageBox::Ignore</li>
<li>QMessageBox::YesAll</li>
<li>QMessageBox::NoAll</li>
</ul>
<p>If you don't want all three buttons, set the last button, or last two buttons to QMessageBox::NoButton.</p>
<p>One button can be OR-ed with QMessageBox::Default, and one button can be OR-ed with QMessageBox::Escape.</p>
<p>Returns the identity (QMessageBox::Ok, or QMessageBox::No, etc.) of the button that was clicked.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>

*/"/>
    <method name="public final static int critical(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, com.trolltech.qt.gui.QMessageBox.StandardButton button0__3, com.trolltech.qt.gui.QMessageBox.StandardButton button1__4)" doc="/**
<p>### Needed for Qt 4 source compatibility</p>

*/"/>
    <method name="public final static int critical(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, java.lang.String button0Text__3, java.lang.String button1Text__4, java.lang.String button2Text__5, int defaultButtonNumber__6, int escapeButtonNumber__7)" doc="/**
<p>Displays a critical error message box with the given <i>title</i> and <i>text</i>, as well as one, two, or three buttons. Returns the number of the button that was clicked (0, 1 or 2).</p>
<p><i>button0Text</i> is the text of the first button, and is optional. If <i>button0Text</i> is not supplied, &quot;OK&quot; (translated) will be used. <i>button1Text</i> is the text of the second button, and is optional, and <i>button2Text</i> is the text of the third button, and is optional. <i>defaultButtonNumber</i> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <i>escapeButtonNumber</i> is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1; supply 0, 1, or 2 to make pressing Escape equivalent to clicking the relevant button.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>

*/"/>
    <method name="public final static com.trolltech.qt.gui.QMessageBox.StandardButton information(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, com.trolltech.qt.gui.QMessageBox.StandardButton button0__3, com.trolltech.qt.gui.QMessageBox.StandardButton button1__4)" doc="/**
<p>### Needed for Qt 4 source compatibility</p>

*/"/>
    <method name="public final static int information(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, int button0__3, int button1__4, int button2__5)" doc="/**
<p>Opens an information message box with the given <i>title</i> and the <i>text</i>. The dialog may have up to three buttons. Each of the buttons, <i>button0</i>, <i>button1</i> and <i>button2</i> may be set to one of the following values:</p>
<ul>
<li>QMessageBox::NoButton</li>
<li>QMessageBox::Ok</li>
<li>QMessageBox::Cancel</li>
<li>QMessageBox::Yes</li>
<li>QMessageBox::No</li>
<li>QMessageBox::Abort</li>
<li>QMessageBox::Retry</li>
<li>QMessageBox::Ignore</li>
<li>QMessageBox::YesAll</li>
<li>QMessageBox::NoAll</li>
</ul>
<p>If you don't want all three buttons, set the last button, or last two buttons to QMessageBox::NoButton.</p>
<p>One button can be OR-ed with QMessageBox::Default, and one button can be OR-ed with QMessageBox::Escape.</p>
<p>Returns the identity (QMessageBox::Ok, or QMessageBox::No, etc.) of the button that was clicked.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>

*/"/>
    <method name="public final static int information(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, java.lang.String button0Text__3, java.lang.String button1Text__4, java.lang.String button2Text__5, int defaultButtonNumber__6, int escapeButtonNumber__7)" doc="/**
<p>Displays an information message box with the given <i>title</i> and <i>text</i>, as well as one, two or three buttons. Returns the index of the button that was clicked (0, 1 or 2).</p>
<p><i>button0Text</i> is the text of the first button, and is optional. If <i>button0Text</i> is not supplied, &quot;OK&quot; (translated) will be used. <i>button1Text</i> is the text of the second button, and is optional. <i>button2Text</i> is the text of the third button, and is optional. <i>defaultButtonNumber</i> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <i>escapeButtonNumber</i> is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1; supply 0, 1 or 2 to make pressing Escape equivalent to clicking the relevant button.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>
<p>Note: If you do not specify an Escape button then if the Escape button is pressed then -1 will be returned. It is suggested that you specify an Escape button to prevent this from happening.</p>

*/"/>
    <method name="public final static int question(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, com.trolltech.qt.gui.QMessageBox.StandardButton button0__3, com.trolltech.qt.gui.QMessageBox.StandardButton button1__4)" doc="/**
<p>### Needed for Qt 4 source compatibility</p>

*/"/>
    <method name="public final static int question(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, java.lang.String button0Text__3, java.lang.String button1Text__4, java.lang.String button2Text__5, int defaultButtonNumber__6, int escapeButtonNumber__7)" doc="/**
<p>Displays a question message box with the given <i>title</i> and <i>text</i>, as well as one, two or three buttons. Returns the index of the button that was clicked (0, 1 or 2).</p>
<p><i>button0Text</i> is the text of the first button, and is optional. If <i>button0Text</i> is not supplied, &quot;OK&quot; (translated) will be used. <i>button1Text</i> is the text of the second button, and is optional. <i>button2Text</i> is the text of the third button, and is optional. <i>defaultButtonNumber</i> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <i>escapeButtonNumber</i> is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1; supply 0, 1 or 2 to make pressing Escape equivalent to clicking the relevant button.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>
<p>Note: If you do not specify an Escape button then if the Escape button is pressed then -1 will be returned. It is suggested that you specify an Escape button to prevent this from happening.</p>

*/"/>
    <method name="public final static int question(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, int button0__3, int button1__4, int button2__5)" doc="/**
<p>Opens a question message box with the given <i>title</i> and <i>text</i>. The dialog may have up to three buttons. Each of the buttons, <i>button0</i>, <i>button1</i> and <i>button2</i> may be set to one of the following values:</p>
<ul>
<li>QMessageBox::NoButton</li>
<li>QMessageBox::Ok</li>
<li>QMessageBox::Cancel</li>
<li>QMessageBox::Yes</li>
<li>QMessageBox::No</li>
<li>QMessageBox::Abort</li>
<li>QMessageBox::Retry</li>
<li>QMessageBox::Ignore</li>
<li>QMessageBox::YesAll</li>
<li>QMessageBox::NoAll</li>
</ul>
<p>If you don't want all three buttons, set the last button, or last two buttons to QMessageBox::NoButton.</p>
<p>One button can be OR-ed with QMessageBox::Default, and one button can be OR-ed with QMessageBox::Escape.</p>
<p>Returns the identity (QMessageBox::Yes, or QMessageBox::No, etc.) of the button that was clicked.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>

*/"/>
    <method name="public final static com.trolltech.qt.gui.QPixmap standardIcon(com.trolltech.qt.gui.QMessageBox.Icon icon__0)" doc="/**
<p>Returns the pixmap used for a standard icon. This allows the pixmaps to be used in more complex message boxes. <i>icon</i> specifies the required icon, e.g. QMessageBox::Question, QMessageBox::Information, QMessageBox::Warning or QMessageBox::Critical.</p>
<p>Call QStyle::pixelMetric() with QStyle::SP_MessageBoxInformation etc. instead.</p>

*/"/>
    <method name="public final static int warning(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, com.trolltech.qt.gui.QMessageBox.StandardButton button0__3, com.trolltech.qt.gui.QMessageBox.StandardButton button1__4)" doc="/**
<p>### Needed for Qt 4 source compatibility</p>

*/"/>
    <method name="public final static int warning(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, java.lang.String button0Text__3, java.lang.String button1Text__4, java.lang.String button2Text__5, int defaultButtonNumber__6, int escapeButtonNumber__7)" doc="/**
<p>Displays a warning message box with the given <i>title</i> and <i>text</i>, as well as one, two, or three buttons. Returns the number of the button that was clicked (0, 1, or 2).</p>
<p><i>button0Text</i> is the text of the first button, and is optional. If <i>button0Text</i> is not supplied, &quot;OK&quot; (translated) will be used. <i>button1Text</i> is the text of the second button, and is optional, and <i>button2Text</i> is the text of the third button, and is optional. <i>defaultButtonNumber</i> (0, 1 or 2) is the index of the default button; pressing Return or Enter is the same as clicking the default button. It defaults to 0 (the first button). <i>escapeButtonNumber</i> is the index of the Escape button; pressing Escape is the same as clicking this button. It defaults to -1; supply 0, 1, or 2 to make pressing Escape equivalent to clicking the relevant button.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>
<p>Note: If you do not specify an Escape button then if the Escape button is pressed then -1 will be returned. It is suggested that you specify an Escape button to prevent this from happening.</p>

*/"/>
    <method name="public final static int warning(com.trolltech.qt.gui.QWidget parent__0, java.lang.String title__1, java.lang.String text__2, int button0__3, int button1__4, int button2__5)" doc="/**
<p>Opens a warning message box with the given <i>title</i> and <i>text</i>. The dialog may have up to three buttons. Each of the button parameters, <i>button0</i>, <i>button1</i> and <i>button2</i> may be set to one of the following values:</p>
<ul>
<li>QMessageBox::NoButton</li>
<li>QMessageBox::Ok</li>
<li>QMessageBox::Cancel</li>
<li>QMessageBox::Yes</li>
<li>QMessageBox::No</li>
<li>QMessageBox::Abort</li>
<li>QMessageBox::Retry</li>
<li>QMessageBox::Ignore</li>
<li>QMessageBox::YesAll</li>
<li>QMessageBox::NoAll</li>
</ul>
<p>If you don't want all three buttons, set the last button, or last two buttons to QMessageBox::NoButton.</p>
<p>One button can be OR-ed with QMessageBox::Default, and one button can be OR-ed with QMessageBox::Escape.</p>
<p>Returns the identity (QMessageBox::Ok, or QMessageBox::No, etc.) of the button that was clicked.</p>
<p>If <i>parent</i> is 0, the message box becomes an application-global modal dialog box. If <i>parent</i> is a widget, the message box becomes modal relative to <i>parent</i>.</p>

*/"/>
    <enum name="ButtonRole" doc="/**
<p>This enum describes the roles that can be used to describe buttons in the button box. Combinations of these roles are as flags used to describe different aspects of their behavior.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The button is invalid.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Clicking the button causes the dialog to be accepted (e.g. OK).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Clicking the button causes the dialog to be rejected (e.g. Cancel).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Clicking the button causes a destructive change (e.g. for Discarding Changes).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Clicking the button causes changes to the elements in the dialog (e.g. reset all the values or read defaults).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The button can be clicked to request help.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The button is a &quot;Yes&quot;-like button.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The button is a &quot;No&quot;-like button.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The button applies current changes.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The button resets the dialog's fields to default values.</td></tr>
</table></p>

*/"/>
    <enum name="StandardButton" doc="/**
<p>These enums describe flags for standard buttons. Each button has a defined ButtonRole.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An &quot;OK&quot; button defined with the AcceptRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Open&quot; button defined with the AcceptRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Save&quot; button defined with the AcceptRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Cancel&quot; button defined with the RejectRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Close&quot; button defined with the RejectRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Discard&quot; or &quot;Don't Save&quot; button, depending on the platform, defined with the DestructiveRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An &quot;Apply&quot; button defined with the ApplyRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Reset&quot; button defined with the ResetRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Restore Defaults&quot; button defined with the ResetRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Help&quot; button defined with the HelpRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Save All&quot; button defined with the AcceptRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Yes&quot; button defined with the YesRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Yes to All&quot; button defined with the YesRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;No&quot; button defined with the NoRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;No to All&quot; button defined with the NoRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An &quot;Abort&quot; button defined with the RejectRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A &quot;Retry&quot; button defined with the AcceptRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An &quot;Ignore&quot; button defined with the AcceptRole.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An invalid button.</td></tr>
</table></p>
<p>The following values are obsolete:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Use YesToAll instead.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Use NoToAll instead.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Use the <tt>defaultButton</tt> argument of information(), warning(), etc. instead, or call setDefaultButton().</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Call setEscapeButton() instead.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
</table></p>

*/"/>
    <enum name="Icon" doc="/**
<p>This enum has the following values:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>the message box does not have any icon.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>an icon indicating that the message is asking a question.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>an icon indicating that the message is nothing out of the ordinary.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>an icon indicating that the message is a warning, but can be dealt with.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>an icon indicating that the message represents a critical problem.</td></tr>
</table></p>

*/"/>
</class>
