<class name="QMouseEvent" doc="/**
<p>The QMouseEvent class contains parameters that describe a mouse event.</p>
<p>Mouse events occur when a mouse button is pressed or released inside a widget, or when the mouse cursor is moved.</p>
<p>Mouse move events will occur only when a mouse button is pressed down, unless mouse tracking has been enabled with QWidget::setMouseTracking().</p>
<p>Qt automatically grabs the mouse when a mouse button is pressed inside a widget; the widget will continue to receive mouse events until the last mouse button is released.</p>
<p>A mouse event contains a special accept flag that indicates whether the receiver wants the event. You should call ignore() if the mouse event is not handled by your widget. A mouse event is propagated up the parent widget chain until a widget accepts it with accept(), or an event filter consumes it.</p>
<p>The state of the keyboard modifier keys can be found by calling the modifiers() function, inhertied from QInputEvent.</p>
<p>The functions pos(), x(), and y() give the cursor position relative to the widget that receives the mouse event. If you move the widget as a result of the mouse event, use the global position returned by globalPos() to avoid a shaking motion.</p>
<p>The QWidget::setEnabled() function can be used to enable or disable mouse and keyboard events for a widget.</p>
<p>Reimplement the QWidget event handlers, QWidget::mousePressEvent(), QWidget::mouseReleaseEvent(), QWidget::mouseDoubleClickEvent(), and QWidget::mouseMoveEvent() to receive mouse events in your own widgets.</p>
<p>QCursor::pos()</p>

*/">
    <method name="public QMouseEvent(com.trolltech.qt.core.QEvent.Type type__0, com.trolltech.qt.core.QPoint pos__1, com.trolltech.qt.core.Qt.MouseButton button__2, com.trolltech.qt.core.Qt.MouseButtons buttons__3, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__4)" doc="/**
<p>Constructs a mouse event object.</p>
<p>The <i>type</i> parameter must be one of QEvent::MouseButtonPress, QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick, or QEvent::MouseMove.</p>
<p>The <i>position</i> is the mouse cursor's position relative to the receiving widget. The <i>button</i> that caused the event is given as a value from the Qt::MouseButton enum. If the event <i>type</i> is MouseMove, the appropriate button for this event is Qt::NoButton. The mouse and keyboard states at the time of the event are specified by <i>buttons</i> and <i>modifiers</i>.</p>
<p>The globalPos() is initialized to QCursor::pos(), which may not be appropriate. Use the other constructor to specify the global position explicitly.</p>

*/"/>
    <method name="public QMouseEvent(com.trolltech.qt.core.QEvent.Type type__0, com.trolltech.qt.core.QPoint pos__1, com.trolltech.qt.core.QPoint globalPos__2, com.trolltech.qt.core.Qt.MouseButton button__3, com.trolltech.qt.core.Qt.MouseButtons buttons__4, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__5)" doc="/**
<p>Constructs a mouse event object.</p>
<p>The <i>type</i> parameter must be QEvent::MouseButtonPress, QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick, or QEvent::MouseMove.</p>
<p>The <i>pos</i> is the mouse cursor's position relative to the receiving widget. The cursor's position in global coordinates is specified by <i>globalPos</i>. The <i>button</i> that caused the event is given as a value from the Qt::MouseButton enum. If the event <i>type</i> is MouseMove, the appropriate button for this event is Qt::NoButton. <i>buttons</i> is the state of all buttons at the time of the event, <i>modifiers</i> the state of all keyboard modifiers.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.MouseButton button()" doc="/**
<p>Returns the button that caused the event.</p>
<p>Note that the returned value is always Qt::NoButton for mouse move events.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.MouseButtons buttons()" doc="/**
<p>Returns the button state when the event was generated. The button state is a combination of Qt::LeftButton, Qt::RightButton, Qt::MidButton using the OR operator. For mouse move events, this is all buttons that are pressed down. For mouse press and double click events this includes the button that caused the event. For mouse release events this excludes the button that caused the event.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint globalPos()" doc="/**
<p>Returns the global position of the mouse cursor <i>at the time of the event</i>. This is important on asynchronous window systems like X11. Whenever you move your widgets around in response to mouse events, globalPos() may differ a lot from the current pointer position QCursor::pos(), and from QWidget::mapToGlobal(pos()).</p>

*/"/>
    <method name="public final int globalX()" doc="/**
<p>Returns the global x position of the mouse cursor at the time of the event.</p>

*/"/>
    <method name="public final int globalY()" doc="/**
<p>Returns the global y position of the mouse cursor at the time of the event.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint pos()" doc="/**
<p>Returns the position of the mouse cursor, relative to the widget that received the event.</p>
<p>If you move the widget as a result of the mouse event, use the global position returned by globalPos() to avoid a shaking motion.</p>

*/"/>
    <method name="public final int x()" doc="/**
<p>Returns the x position of the mouse cursor, relative to the widget that received the event.</p>

*/"/>
    <method name="public final int y()" doc="/**
<p>Returns the y position of the mouse cursor, relative to the widget that received the event.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.Qt.MouseButtons mouseState()"/>
    <method name="protected final void setMouseState(com.trolltech.qt.core.Qt.MouseButtons mouseState)"/>
    <method name="protected final com.trolltech.qt.core.Qt.MouseButton b()"/>
    <method name="protected final void setB(com.trolltech.qt.core.Qt.MouseButton b)"/>
</class>
