<class name="QGraphicsSvgItem" doc="/**
<p>The QGraphicsSvgItem class is a QGraphicsItem that can be used to render the contents of SVG files.</p>
<p>QGraphicsSvgItem provides a way of rendering SVG files onto QGraphicsView. QGraphicsSvgItem can be created by passing the SVG file to be rendered to its constructor or by explicit setting a shared QSvgRenderer on it.</p>
<p>Note that setting QSvgRenderer on a QGraphicsSvgItem doesn't make the item take ownership of the renderer, therefore if using setSharedRenderer() method one has to make sure that the lifetime of the QSvgRenderer object will be at least as long as that of the QGraphicsSvgItem.</p>
<p>QGraphicsSvgItem provides a way of rendering only parts of the SVG files via the setElementId. If setElementId() method is called, only the SVG element (and its children) with the passed id will be renderer. This provides a convenient way of selectively rendering large SVG files that contain a number of discrete elements. For example the following code renders only jokers from a SVG file containing a whole card deck:</p>
<pre>    QSvgRenderer *renderer = new QSvgRenderer(QLatin1String(&quot;SvgCardDeck.svg&quot;));
    QGraphicsSvgItem *black = new QGraphicsSvgItem();
    QGraphicsSvgItem *red   = new QGraphicsSvgItem();

    black-&gt;setSharedRenderer(renderer);
    black-&gt;setElementId(QLatin1String(&quot;black_joker&quot;));

    red-&gt;setSharedRenderer(renderer);
    red-&gt;setElementId(QLatin1String(&quot;black_joker&quot;));</pre>
<p>Size of the item can be set via the setSize() method or via direct manipulation of the items transformation matrix.</p>
<p>By default the SVG rendering is cached to speedup the display of items. Caching can be disabled by passing false to the setCachingEnabled() method.</p>

*/">
    <method name="public QGraphicsSvgItem(com.trolltech.qt.gui.QGraphicsItemInterface parentItem__0)" doc="/**
<p>Constructs a new SVG item with the given <i>parent</i>.</p>

*/"/>
    <method name="public QGraphicsSvgItem(java.lang.String fileName__0, com.trolltech.qt.gui.QGraphicsItemInterface parentItem__1)" doc="/**
<p>Constructs a new item with the given <i>parent</i> and loads the contents of the SVG file with the specified <i>fileName</i>.</p>

*/"/>
    <method name="public final java.lang.String elementId()" doc="/**
<p>Returns the XML ID the element that is currently being renderer. Returns an empty string if the whole file is being rendered.</p>

*/"/>
    <method name="public final boolean isCachingEnabled()" doc="/**
<p>Returns true if the contents of the SVG file to be renderer is cached.</p>
<p>Note that caching will not work if either the amount of cached items exceeded QPixmapCache::cacheLimit() or if the current item on the given view is greater than the QGraphicsSvgItem::maximumCacheSize().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize maximumCacheSize()" doc="/**
<p>Returns the current maximum size of the cache for this item.</p>
<p>This function doesn't take the current transformation matrix into account and returns the untransformed size. The default maximum cache size is 1024x768. QPixmapCache::cacheLimit() sets the cumulative bounds on the whole cache, maximumCacheSize refers to a maximum cache size for this particular item.</p>

*/"/>
    <method name="public final com.trolltech.qt.svg.QSvgRenderer renderer()" doc="/**
<p>Returns the currently use QSvgRenderer.</p>

*/"/>
    <method name="public final void setCachingEnabled(boolean arg__0)" doc="/**
<p>If <i>caching</i> is true, enables caching on the item; otherwise disables it.</p>
<p>By default, caching is on. For performance reasons, it is advised to keep the caching enabled. Note that caching will not work if either the amount of cached items exceeded QPixmapCache::cacheLimit() or if the current item on the given view is greater than the QGraphicsSvgItem::maximumCacheSize().</p>

*/"/>
    <method name="public final void setElementId(java.lang.String id__0)" doc="/**
<p>Sets the XML ID of the element that this item should render to <i>id</i>.</p>

*/"/>
    <method name="public final void setMaximumCacheSize(com.trolltech.qt.core.QSize size__0)" doc="/**
<p>Sets the maximum cache size of the item to <i>size</i>.</p>
<p>This function doesn't take the current transformation matrix into account and sets the untransformed size. The cache correspods to the QPixmap which is used to cache the results of the rendering. Use QPixmap::setCacheLimit() to set limitations on the whole cache and use setMaximumCacheSize when setting cache size for individual items.</p>

*/"/>
    <method name="public final void setSharedRenderer(com.trolltech.qt.svg.QSvgRenderer renderer__0)" doc="/**
<p>Sets <i>renderer</i> to be a shared QSvgRenderer on the item. By using this method one can share the same QSvgRenderer on a number of items. This means that the SVG file will be parsed only once. QSvgRenderer passed to this method has to exist for as long as this item is used.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QRectF boundingRect()" doc="/**
<p>Returns the bounding rectangle of this item.</p>

*/"/>
    <method name="public java.lang.Object data(int key__0)"/>
    <method name="public boolean isEnabled()"/>
    <method name="public com.trolltech.qt.core.QPointF mapFromItem(com.trolltech.qt.gui.QGraphicsItemInterface item__0, double x__1, double y__2)"/>
    <method name="public com.trolltech.qt.core.QPointF mapFromParent(double x__0, double y__1)"/>
    <method name="public com.trolltech.qt.core.QPointF mapToItem(com.trolltech.qt.gui.QGraphicsItemInterface item__0, double x__1, double y__2)"/>
    <method name="public com.trolltech.qt.core.QPointF mapToParent(double x__0, double y__1)"/>
    <method name="public com.trolltech.qt.gui.QMatrix matrix()"/>
    <method name="public void paint(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionGraphicsItem option__1, com.trolltech.qt.gui.QWidget widget__2)"/>
    <method name="public void setData(int key__0, java.lang.Object value__1)"/>
    <method name="public void setPos(double x__0, double y__1)"/>
    <method name="public int type()"/>
</class>
