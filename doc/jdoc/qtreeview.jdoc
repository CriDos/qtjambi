<class name="QTreeView" doc="/**
<p>The QTreeView class provides a default model/view implementation of a tree view.</p>
<p>A QTreeView implements a tree representation of items from a model. This class is used to provide standard hierarchical lists that were previously provided by the <tt>QListView</tt> class, but using the more flexible approach provided by Qt's model/view architecture.</p>
<p>The QTreeView class is one of the Model/View Classes and is part of Qt's model/view framework.</p>
<p>QTreeView implements the interfaces defined by the QAbstractItemView class to allow it to display data provided by models derived from the QAbstractItemModel class.</p>
<p>It is simple to construct a tree view displaying data from a model. In the following example, the contents of a directory are supplied by a QDirModel and displayed as a tree:</p>
<pre>        QDirModel *model = new QDirModel;
        QTreeView *tree = new QTreeView(splitter);
        tree-&gt;setModel(model);</pre>
<p>The model/view architecture ensures that the contents of the tree view are updated as the model changes.</p>
<p>Items that have children can be in an expanded (children are visible) or collapsed (children are hidden) state. When this state changes a collapsed() or expanded() signal is emitted with the model index of the relevant item.</p>
<p>The amount of indentation used to indicate levels of hierarchy is controlled by the indentation property.</p>
<p>Headers in tree views are constructed using the QHeaderView class and can be hidden using header()-&gt;hide(). Note that each header is configured with its stretchLastSection property set to true, ensuring that the view does not waste any of the space assigned to it for its header.</p>
<a name=&quote;key-bindings&quote;></a>
<h3>Key Bindings</h3>
<p>QTreeView supports a set of key bindings that enable the user to navigate in the view and interact with the contents of items:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Key</th><th>Action</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>UpArrow</td><td>Moves the cursor to the item in the same column on the previous row. If the parent of the current item has no more rows to navigate to, the cursor moves to the relevant item in the last row of the sibling that precedes the parent.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>DownArrow</td><td>Moves the cursor to the item in the same column on the next row. If the parent of the current item has no more rows to navigate to, the cursor moves to the relevant item in the first row of the sibling that follows the parent.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>LeftArrow</td><td>Hides the children of the current item (if present) by collapsing a branch.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Minus</td><td>Same as LeftArrow.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>RightArrow</td><td>Reveals the children of the current item (if present) by expanding a branch.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Plus</td><td>Same as RightArrow.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Asterisk</td><td>Expands all children of the current item (if present).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>PageUp</td><td>Moves the cursor up one page.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>PageDown</td><td>Moves the cursor down one page.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Home</td><td>Moves the cursor to an item in the same column of the first row of the first top-level item in the model.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>End</td><td>Moves the cursor to an item in the same column of the last row of the last top-level item in the model.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>F2</td><td>In editable models, this opens the current item for editing. The Escape key can be used to cancel the editing process and revert any changes to the data displayed.</td></tr>
</table></p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image windowsxp-treeview.png]</font></td><td><font color=&quote;red&quote;>[Missing image macintosh-treeview.png]</font></td><td><font color=&quote;red&quote;>[Missing image plastique-treeview.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>A Windows XP style tree view.</td><td>A Macintosh style tree view.</td><td>A Plastique style tree view.</td></tr>
</table></p>

*/">
    <method name="public QTreeView(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a table view with a <i>parent</i> to represent a model's data. Use setModel() to set the model.</p>

*/"/>
    <method name="public final boolean allColumnsShowFocus()"/>
    <method name="public final void collapse(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Collapses the model item specified by the <i>index</i>.</p>

*/"/>
    <method name="public final void collapseAll()" doc="/**
<p>Collapses all expanded items.</p>

*/"/>
    <method name="public final int columnAt(int x__0)" doc="/**
<p>Returns the column in the tree view whose header covers the <i>x</i> coordinate given.</p>

*/"/>
    <method name="protected final void columnCountChanged(int oldCount__0, int newCount__1)" doc="/**
<p>Informs the tree view that the number of columns in the tree view has changed from <i>oldCount</i> to <i>newCount</i>.</p>

*/"/>
    <method name="protected final void columnMoved()" doc="/**
<p>This slot is called whenever a column has been moved.</p>

*/"/>
    <method name="protected final void columnResized(int column__0, int oldSize__1, int newSize__2)" doc="/**
<p>This function is called whenever <i>column</i>'s size is changed in the header. <i>oldSize</i> and <i>newSize</i> give the previous size and the new size in pixels.</p>

*/"/>
    <method name="public final int columnViewportPosition(int column__0)" doc="/**
<p>Returns the horizontal position of the <i>column</i> in the viewport.</p>

*/"/>
    <method name="public final int columnWidth(int column__0)" doc="/**
<p>Returns the width of the <i>column</i>.</p>

*/"/>
    <method name="protected final void drawTree(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QRegion region__1)" doc="/**
<p>Draws the part of the tree intersecting the given <i>region</i> using the specified <i>painter</i>.</p>

*/"/>
    <method name="public final void expand(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Expands the model item specified by the <i>index</i>.</p>

*/"/>
    <method name="public final void expandAll()" doc="/**
<p>Expands all expandable items.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QHeaderView header()" doc="/**
<p>Returns the header for the tree view.</p>

*/"/>
    <method name="public final void hideColumn(int column__0)" doc="/**
<p>Hides the <i>column</i> given.</p>

*/"/>
    <method name="public final int indentation()"/>
    <method name="public final com.trolltech.qt.core.QModelIndex indexAbove(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the model index of the item above <i>index</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QModelIndex indexBelow(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the model index of the item below <i>index</i>.</p>

*/"/>
    <method name="protected final int indexRowSizeHint(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the size hint for the row indicated by <i>index</i>.</p>

*/"/>
    <method name="public final boolean isAnimated()"/>
    <method name="public final boolean isColumnHidden(int column__0)" doc="/**
<p>Returns true if the <i>column</i> is hidden; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isExpanded(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns true if the model item <i>index</i> is expanded; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isRowHidden(int row__0, com.trolltech.qt.core.QModelIndex parent__1)" doc="/**
<p>Returns true if the item in the given <i>row</i> of the <i>parent</i> is hidden; otherwise returns false.</p>

*/"/>
    <method name="public final boolean itemsExpandable()"/>
    <method name="protected final void reexpand()"/>
    <method name="public final void resizeColumnToContents(int column__0)" doc="/**
<p>Resizes the <i>column</i> given to the size of its contents.</p>

*/"/>
    <method name="public final boolean rootIsDecorated()"/>
    <method name="protected final void rowsRemoved(com.trolltech.qt.core.QModelIndex parent__0, int first__1, int last__2)" doc="/**
<p>Informs the view that the rows from the <i>start</i> row to the <i>end</i> row inclusive have been removed from the given <i>parent</i> model item.</p>

*/"/>
    <method name="public final void setAllColumnsShowFocus(boolean enable__0)"/>
    <method name="public final void setAnimated(boolean enable__0)"/>
    <method name="public final void setColumnHidden(int column__0, boolean hide__1)" doc="/**
<p>If <i>hide</i> is true the <i>column</i> is hidden, otherwise the <i>column</i> is shown.</p>

*/"/>
    <method name="public final void setColumnWidth(int column__0, int width__1)" doc="/**
<p>Sets the width of the given <i>column</i> to the <i>width</i> specified.</p>

*/"/>
    <method name="public final void setExpanded(com.trolltech.qt.core.QModelIndex index__0, boolean expand__1)" doc="/**
<p>Sets the item referred to by <i>index</i> to either collapse or expanded, depending on the value of <i>expanded</i>.</p>

*/"/>
    <method name="public final void setHeader(com.trolltech.qt.gui.QHeaderView header__0)" doc="/**
<p>Sets the header for the tree view, to the given <i>header</i>.</p>
<p>The view takes ownership over the given <i>header</i> and deletes it when a new header is set.</p>

*/"/>
    <method name="public final void setIndentation(int i__0)"/>
    <method name="public final void setItemsExpandable(boolean enable__0)"/>
    <method name="public final void setRootIsDecorated(boolean show__0)"/>
    <method name="public final void setRowHidden(int row__0, com.trolltech.qt.core.QModelIndex parent__1, boolean hide__2)" doc="/**
<p>If <i>hide</i> is true the <i>row</i> with the given <i>parent</i> is hidden, otherwise the <i>row</i> is shown.</p>

*/"/>
    <method name="public final void setUniformRowHeights(boolean uniform__0)"/>
    <method name="public final void showColumn(int column__0)" doc="/**
<p>Shows the given <i>column</i> in the tree view.</p>

*/"/>
    <method name="public final void sortByColumn(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sorts the model by the values in the given <i>column</i> in the given <i>order</i>.</p>

*/"/>
    <method name="public final void sortByColumn(int column__0)" doc="/**
<p>Sorts the model by the values in the given <i>column</i>.</p>

*/"/>
    <method name="public final boolean uniformRowHeights()"/>
    <method name="protected void dataChanged(com.trolltech.qt.core.QModelIndex topLeft__0, com.trolltech.qt.core.QModelIndex bottomRight__1)"/>
    <method name="public void doItemsLayout()" doc="/**
<p>Lays out the items in the tree view.</p>

*/"/>
    <method name="protected void drawBranches(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.core.QRect rect__1, com.trolltech.qt.core.QModelIndex index__2)" doc="/**
<p>Draws the branches in the tree view on the same row as the model item <i>index</i>, using the <i>painter</i> given. The branches are drawn in the rectangle specified by <i>rect</i>.</p>

*/"/>
    <method name="protected void drawRow(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionViewItem options__1, com.trolltech.qt.core.QModelIndex index__2)" doc="/**
<p>Draws the row in the tree view that contains the model item <i>index</i>, using the <i>painter</i> given. The <i>option</i> control how the item is displayed.</p>

*/"/>
    <method name="protected int horizontalOffset()" doc="/**
<p>Returns the horizontal offset of the items in the treeview.</p>
<p>Note that the tree view uses the horizontal header section positions to determine the positions of columns in the view.</p>

*/"/>
    <method name="protected void horizontalScrollbarAction(int action__0)"/>
    <method name="public com.trolltech.qt.core.QModelIndex indexAt(com.trolltech.qt.core.QPoint p__0)"/>
    <method name="protected boolean isIndexHidden(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="public boolean isSortingEnabled()"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent event__0)"/>
    <method name="public void keyboardSearch(java.lang.String search__0)"/>
    <method name="protected void mouseDoubleClickEvent(com.trolltech.qt.gui.QMouseEvent event__0)"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent event__0)"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent event__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent event__0)"/>
    <method name="protected com.trolltech.qt.core.QModelIndex moveCursor(com.trolltech.qt.gui.QAbstractItemView.CursorAction cursorAction__0, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__1)" doc="/**
<p>Move the cursor in the way described by <i>cursorAction</i>, using the information provided by the button <i>modifiers</i>.</p>

*/"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent event__0)"/>
    <method name="public void reset()"/>
    <method name="protected void rowsAboutToBeRemoved(com.trolltech.qt.core.QModelIndex parent__0, int start__1, int end__2)" doc="/**
<p>Informs the view that the rows from the <i>start</i> row to the <i>end</i> row inclusive are about to removed from the given <i>parent</i> model item.</p>

*/"/>
    <method name="protected void rowsInserted(com.trolltech.qt.core.QModelIndex parent__0, int start__1, int end__2)" doc="/**
<p>Informs the view that the rows from the <i>start</i> row to the <i>end</i> row inclusive have been inserted into the <i>parent</i> model item.</p>

*/"/>
    <method name="protected void scrollContentsBy(int dx__0, int dy__1)" doc="/**
<p>Scrolls the contents of the tree view by (<i>dx</i>, <i>dy</i>).</p>

*/"/>
    <method name="public void scrollTo(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.gui.QAbstractItemView.ScrollHint hint__1)" doc="/**
<p>Scroll the contents of the tree view until the given model item <i>index</i> is visible. The <i>hint</i> parameter specifies more precisely where the item should be located after the operation. If any of the parents of the model item are collapsed, they will be expanded to ensure that the model item is visible.</p>

*/"/>
    <method name="public void selectAll()" doc="/**
<p>Selects all the items in the underlying model.</p>

*/"/>
    <method name="protected java.util.List&lt;com.trolltech.qt.core.QModelIndex&gt; selectedIndexes()"/>
    <method name="public void setModel(com.trolltech.qt.core.QAbstractItemModel model__0)"/>
    <method name="public void setRootIndex(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="protected void setSelection(com.trolltech.qt.core.QRect rect__0, com.trolltech.qt.gui.QItemSelectionModel.SelectionFlags command__1)" doc="/**
<p>Applies the selection <i>command</i> to the items in or touched by the rectangle, <i>rect</i>.</p>

*/"/>
    <method name="public void setSelectionModel(com.trolltech.qt.gui.QItemSelectionModel selectionModel__0)"/>
    <method name="public void setSortingEnabled(boolean enable__0)"/>
    <method name="public int sizeHintForColumn(int column__0)" doc="/**
<p>Returns the size hint for the <i>column</i>'s width or -1 if there is no model.</p>
<p>If you need to set the width of a given column to a fixed value, call QHeaderView::resizeSection() on the view's header.</p>
<p>If you reimplement this function in a subclass, note that the value you return is only used when resizeColumnToContents() is called. In that case, if a larger column width is required by either the view's header or the item delegate, that width will be used instead.</p>

*/"/>
    <method name="protected void timerEvent(com.trolltech.qt.core.QTimerEvent event__0)"/>
    <method name="protected void updateGeometries()" doc="/**
<p>Updates the items in the tree view.</p>

*/"/>
    <method name="protected int verticalOffset()" doc="/**
<p>Returns the vertical offset of the items in the tree view.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QRect visualRect(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the rectangle on the viewport occupied by the item at <i>index</i>. If the index is not visible or explicitly hidden, the returned rectangle is invalid.</p>

*/"/>
    <method name="protected com.trolltech.qt.gui.QRegion visualRegionForSelection(com.trolltech.qt.gui.QItemSelection selection__0)" doc="/**
<p>Returns the rectangle from the viewport of the items in the given <i>selection</i>.</p>

*/"/>
</class>
