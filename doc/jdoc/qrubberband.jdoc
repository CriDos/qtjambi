<class name="QRubberBand" doc="/**
<p>The QRubberBand class provides a rectangle or line that can indicate a selection or a boundary.</p>
<p>A rubber band is often used to show a new bounding area (as in a QSplitter or a QDockWidget that is undocking). Historically this has been implemented using a QPainter and XOR, but this approach doesn't always work properly since rendering can happen in the window below the rubber band, but before the rubber band has been &quot;erased&quot;.</p>
<p>You can create a QRubberBand whenever you need to render a rubber band around a given area (or to represent a single line), then call setGeometry(), move() or resize() to position and size it. A common pattern is to do this in conjunction with mouse events. For example:</p>
<pre>    void Widget::mousePressEvent(QMouseEvent *event)
    {
        origin = event-&gt;pos();
        if (!rubberBand)
            rubberBand = new QRubberBand(QRubberBand::Rectangle, this);
        rubberBand-&gt;setGeometry(QRect(origin, QSize()));
        rubberBand-&gt;show();
    }

    void Widget::mouseMoveEvent(QMouseEvent *event)
    {
        rubberBand-&gt;setGeometry(QRect(origin, event-&gt;pos()).normalized());
    }

    void Widget::mouseReleaseEvent(QMouseEvent *event)
    {
        rubberBand-&gt;hide();
        <span class=&quote;comment&quote;>// determine selection, for example using QRect::intersects()</span>
        <span class=&quote;comment&quote;>// and QRect::contains().</span>
    }</pre>
<p>If you pass a parent to QRubberBand's constructor, the rubber band will display only inside its parent, but stays on top of other child widgets. If no parent is passed, QRubberBand will act as a top-level widget.</p>
<p>Call show() to make the rubber band visible; also when the rubber band is not a top-level. Hiding or destroying the widget will make the rubber band disappear. The rubber band can be a Rectangle or a Line (vertical or horizontal), depending on the shape() it was given when constructed.</p>

*/">
    <method name="public QRubberBand(com.trolltech.qt.gui.QRubberBand.Shape arg__0, com.trolltech.qt.gui.QWidget arg__1)" doc="/**
<p>Constructs a rubber band of shape <i>s</i>, with parent <i>p</i>.</p>
<p>By default a rectangular rubber band (<i>s</i> is <tt>Rectangle</tt>) will use a mask, so that a small border of the rectangle is all that is visible. Some styles (e.g., native Mac OS X) will change this and call QWidget::setWindowOpacity() to make a semi-transparent filled selection rectangle.</p>

*/"/>
    <method name="public final void move(int x__0, int y__1)" doc="/**
<p>Moves the rubberband to point (<i>x</i>, <i>y</i>).</p>

*/"/>
    <method name="public final void resize(int w__0, int h__1)" doc="/**
<p>Resizes the rubberband so that its width is <i>width</i>, and its height is <i>height</i>.</p>

*/"/>
    <method name="public final void setGeometry(int x__0, int y__1, int w__2, int h__3)" doc="/**
<p>Sets the geometry of the rubberband to the rectangle whose top-left corner lies at the point (<i>x</i>, <i>y</i>), and with dimensions specified by <i>width</i> and <i>height</i>. The geometry is specified in the parent widget's coordinate system.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRubberBand.Shape shape()" doc="/**
<p>Returns the shape of this rubber band. The shape can only be set upon construction.</p>

*/"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="public void move(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rubberband to point <i>p</i>.</p>

*/"/>
    <method name="protected void moveEvent(com.trolltech.qt.gui.QMoveEvent arg__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)"/>
    <method name="public void resize(com.trolltech.qt.core.QSize s__0)" doc="/**
<p>Resizes the rubberband so that its new size is <i>size</i>.</p>

*/"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent arg__0)"/>
    <method name="public void setGeometry(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Sets the geometry of the rubber band to <i>rect</i>, specified in the coordinate system of its parent widget.</p>

*/"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent arg__0)"/>
    <enum name="Shape" doc="/**
<p>This enum specifies what shape a QRubberBand should have. This is a drawing hint that is passed down to the style system, and can be interpreted by each QStyle.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A QRubberBand can represent a vertical or horizontal line. Geometry is still given in rect() and the line will fill the given geometry on most styles.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A QRubberBand can represent a rectangle. Some styles will interpret this as a filled (often semi-transparent) rectangle, or a rectangular outline.</td></tr>
</table></p>

*/"/>
</class>
