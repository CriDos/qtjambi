<class name="QImageWriter" doc="/**
<p>The QImageWriter class provides a format independent interface for writing images to files or other devices.</p>
<p>QImageWriter supports setting format specific options, such as the gamma level, compression level and quality, prior to storing the image. If you do not need such options, you can use QImage::save() or QPixmap::save() instead.</p>
<p>To store an image, you start by constructing a QImageWriter object. Pass either a file name or a device pointer, and the image format to QImageWriter's constructor. You can then set several options, such as the gamma level (by calling setGamma()) and quality (by calling setQuality()). canWrite() returns true if QImageWriter can write the image (i.e., the image format is supported and the device is open for writing). Call write() to write the image to the device.</p>
<p>If any error occurs when writing the image, write() will return false. You can then call error() to find the type of error that occurred, or errorString() to get a human readable description of what went wrong.</p>
<p>Call supportedImageFormats() for a list of formats that QImageWriter can write. QImageWriter supports all built-in image formats, in addition to any image format plugins that support writing.</p>

*/">
    <method name="public QImageWriter()" doc="/**
<p>Constructs an empty QImageWriter object. Before writing, you must call setFormat() to set an image format, then setDevice() or setFileName().</p>

*/"/>
    <method name="public QImageWriter(com.trolltech.qt.core.QIODevice device__0, com.trolltech.qt.core.QByteArray format__1)" doc="/**
<p>Constructs a QImageWriter object using the device <i>device</i> and image format <i>format</i>.</p>

*/"/>
    <method name="public QImageWriter(java.lang.String fileName__0, com.trolltech.qt.core.QByteArray format__1)" doc="/**
<p>Constructs a QImageWriter objects that will write to a file with the name <i>fileName</i>, using the image format <i>format</i>. If <i>format</i> is not provided, QImageWriter will detect the image format by inspecting the extension of <i>fileName</i>.</p>

*/"/>
    <method name="public final boolean canWrite()" doc="/**
<p>Returns true if QImageWriter can write the image (i.e., the image format is supported and the assigned device is open for reading.</p>

*/"/>
    <method name="public final int compression()" doc="/**
<p>Returns the compression of the image.</p>

*/"/>
    <method name="public final java.lang.String description()" doc="/**
<p>Use QImageReader::text() instead.</p>
<p>Returns the description of the image.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QIODevice device()" doc="/**
<p>Returns the device currently assigned to QImageWriter, or 0 if no device has been assigned.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QImageWriter.ImageWriterError error()" doc="/**
<p>Returns the type of error that last occurred.</p>

*/"/>
    <method name="public final java.lang.String errorString()" doc="/**
<p>Returns a human readable description of the last error that occurred.</p>

*/"/>
    <method name="public final java.lang.String fileName()" doc="/**
<p>If the currently assigned device is a QFile, or if setFileName() has been called, this function returns the name of the file QImageWriter writes to. Otherwise (i.e., if no device has been assigned or the device is not a QFile), an empty QString is returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QByteArray format()" doc="/**
<p>Returns the format QImageWriter uses for writing images.</p>

*/"/>
    <method name="public final float gamma()" doc="/**
<p>Returns the gamma level of the image.</p>

*/"/>
    <method name="public final int quality()" doc="/**
<p>Returns the quality level of the image.</p>

*/"/>
    <method name="public final void setCompression(int compression__0)" doc="/**
<p>This is an image format specific function that set the compression of an image. For image formats that do not support setting the compression, this value is ignored.</p>
<p>The value range of <i>compression</i> depends on the image format. For example, the &quot;tiff&quot; format supports two values, 0(no compression) and 1(LZW-compression).</p>

*/"/>
    <method name="public final void setDescription(java.lang.String description__0)" doc="/**
<p>Use setText() instead.</p>
<p>This is an image format specific function that sets the description of the image to <i>description</i>. For image formats that do not support setting the description, this value is ignored.</p>
<p>The contents of <i>description</i> depends on the image format.</p>

*/"/>
    <method name="public final void setDevice(com.trolltech.qt.core.QIODevice device__0)" doc="/**
<p>Sets QImageWriter's device to <i>device</i>. If a device has already been set, the old device is removed from QImageWriter and is otherwise left unchanged.</p>
<p>If the device is not already open, QImageWriter will attempt to open the device in QIODevice::WriteOnly mode by calling open(). Note that this does not work for certain devices, such as QProcess, QTcpSocket and QUdpSocket, where more logic is required to open the device.</p>

*/"/>
    <method name="public final void setFileName(java.lang.String fileName__0)" doc="/**
<p>Sets the file name of QImageWriter to <i>fileName</i>. Internally, QImageWriter will create a QFile and open it in QIODevice::WriteOnly mode, and use this file when writing images.</p>

*/"/>
    <method name="public final void setFormat(com.trolltech.qt.core.QByteArray format__0)" doc="/**
<p>Sets the format QImageWriter will use when writing images, to <i>format</i>. <i>format</i> is a case insensitive text string. Example:</p>
<pre>    QImageWriter writer;
    writer.setFormat(&quot;png&quot;); <span class=&quote;comment&quote;>// same as writer.setFormat(&quot;PNG&quot;);</span></pre>
<p>You can call supportedImageFormats() for the full list of formats QImageWriter supports.</p>

*/"/>
    <method name="public final void setGamma(float gamma__0)" doc="/**
<p>This is an image format specific function that sets the gamma level of the image to <i>gamma</i>. For image formats that do not support setting the gamma level, this value is ignored.</p>
<p>The value range of <i>gamma</i> depends on the image format. For example, the &quot;png&quot; format supports a gamma range from 0.0 to 1.0.</p>

*/"/>
    <method name="public final void setQuality(int quality__0)" doc="/**
<p>This is an image format specific function that sets the quality level of the image to <i>quality</i>. For image formats that do not support setting the quality, this value is ignored.</p>
<p>The value range of <i>quality</i> depends on the image format. For example, the &quot;jpeg&quot; format supports a quality range from 0 (low quality, high compression) to 100 (high quality, low compression).</p>

*/"/>
    <method name="public final void setText(java.lang.String key__0, java.lang.String text__1)" doc="/**
<p>Sets the image text associated with the key <i>key</i> to <i>text</i>. This is useful for storing copyright information or other information about the image. Example:</p>
<pre>    QImage image(&quot;some/image.jpeg&quot;);
    QImageWriter writer(&quot;images/outimage.png&quot;, &quot;png&quot;);
    writer.setText(&quot;Author&quot;, &quot;John Smith&quot;);
    writer.write(image);</pre>
<p>If you want to store a single block of data (e.g., a comment), you can pass an empty key, or use a generic key like &quot;Description&quot;.</p>
<p>The key and text will be embedded into the image data after calling write().</p>
<p>Support for this option is implemented through QImageIOHandler::Description.</p>

*/"/>
    <method name="public final boolean supportsOption(com.trolltech.qt.gui.QImageIOHandler.ImageOption option__0)" doc="/**
<p>Returns true if the writer supports <i>option</i>; otherwise returns false.</p>
<p>Different image formats support different options. Call this function to determine whether a certain option is supported by the current format. For example, the PNG format allows you to embed text into the image's metadata (see text()).</p>
<pre>    QImageWriter writer(fileName);
    if (writer.supportsOption(QImageIOHandler::Description))
        writer.setText(&quot;Author&quot;, &quot;John Smith&quot;);</pre>
<p>Options can be tested after the writer has been associated with a format.</p>

*/"/>
    <method name="public final boolean write(com.trolltech.qt.gui.QImage image__0)" doc="/**
<p>Writes the image <i>image</i> to the assigned device or file name. Returns true on success; otherwise returns false. If the operation fails, you can call error() to find the type of error that occurred, or errorString() to get a human readable description of the error.</p>

*/"/>
    <method name="public native static java.util.List&lt;com.trolltech.qt.core.QByteArray&gt; supportedImageFormats()" doc="/**
<p>Returns the list of image formats supported by QImageWriter.</p>
<p>By default, Qt can write the following formats:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Format</th><th>Description</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>BMP</td><td>Windows Bitmap</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>JPG</td><td>Joint Photographic Experts Group</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>JPEG</td><td>Joint Photographic Experts Group</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>PNG</td><td>Portable Network Graphics</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>PPM</td><td>Portable Pixmap</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>XBM</td><td>X11 Bitmap</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>XPM</td><td>X11 Pixmap</td></tr>
</table></p>

*/"/>
    <enum name="ImageWriterError" doc="/**
<p>This enum describes errors that can occur when writing images with QImageWriter.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QImageWriter encountered a device error when writing the image data. Consult your device for more details on what went wrong.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Qt does not support the requested image format.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An unknown error occurred. If you get this value after calling write(), it is most likely caused by a bug in QImageWriter.</td></tr>
</table></p>

*/"/>
</class>
