<class name="QItemDelegate" doc="/**
<p>The QItemDelegate class provides display and editing facilities for data items from a model.</p>
<p>QItemDelegate can be used to provide custom display features and editor widgets for item views based on QAbstractItemView subclasses. Using a delegate for this purpose allows the display and editing mechanisms to be customized and developed independently from the model and view.</p>
<p>The QItemDelegate class is one of the Model/View Classes and is part of Qt's model/view framework.</p>
<p>When displaying items from a custom model in a standard view, it is often sufficient to simply ensure that the model returns appropriate data for each of the roles that determine the appearance of items in views. The default delegate used by Qt's standard views uses this role information to display items in most of the common forms expected by users. However, it is sometimes necessary to have even more control over the appearance of items than the default delegate can provide.</p>
<p>This class provides default implementations of the functions for painting item data in a view, and editing data obtained from a model. Default implementations of the paint() and sizeHint() virtual functions, defined in QAbstractItemDelegate, are provided to ensure that the delegate implements the correct basic behavior expected by views. You can reimplement these functions in subclasses to customize the appearance of items.</p>
<p>Delegates can be used to manipulate item data in two complementary ways: by processing events in the normal manner, or by implementing a custom editor widget. The item delegate takes the approach of providing a widget for editing purposes that can be supplied to QAbstractItemView::setDelegate() or the equivalent function in subclasses of QAbstractItemView.</p>
<p>Only the standard editing functions for widget-based delegates are reimplemented here: editor() returns the widget used to change data from the model; setEditorData() provides the widget with data to manipulate; updateEditorGeometry() ensures that the editor is displayed correctly with respect to the item view; setModelData() returns the updated data to the model; releaseEditor() indicates that the user has completed editing the data, and that the editor widget can be destroyed.</p>
<a name=&quote;standard-roles-and-data-types&quote;></a>
<h3>Standard Roles and Data Types</h3>
<p>The default delegate used by the standard views supplied with Qt associates each standard role (defined by Qt::ItemDataRole) with certain data types. Models that return data in these types can influence the appearance of the delegate as described in the following table.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Role</th><th>Accepted Types</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::BackgroundRole</td><td>QBrush</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::BackgroundColorRole</td><td>QColor (obsolete; use Qt::BackgroundRole instead)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::CheckStateRole</td><td>Qt::CheckState</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::DecorationRole</td><td>QIcon and QColor</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::DisplayRole</td><td>QString and types with a string representation</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::EditRole</td><td>See QItemEditorFactory for details</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::FontRole</td><td>QFont</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::SizeHintRole</td><td>QSize</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::TextAlignmentRole</td><td>Qt::Alignment</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::ForegroundRole</td><td>QBrush</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::TextColorRole</td><td>QColor (obsolete; use Qt::ForegroundRole instead)</td></tr>
</table></p>
<p>If the default delegate does not allow the level of customization that you need, either for display purposes or for editing data, it is possible to subclass QItemDelegate to implement the desired behavior.</p>
<a name=&quote;subclassing&quote;></a>
<h3>Subclassing</h3>
<p>When subclassing QItemDelegate to create a delegate that displays items using a custom renderer, it is important to ensure that the delegate can render items suitably for all the required states; e.g. selected, disabled, checked. The documentation for the paint() function contains some hints to show how this can be achieved.</p>
<p>Custom editing features for can be added by subclassing QItemDelegate and reimplementing createEditor(), setEditorData(), setModelData(), and updateEditorGeometry(). This process is described in the Spin Box Delegate example.</p>

*/">
    <method name="public QItemDelegate(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs an item delegate with the given <i>parent</i>.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QRect check(com.trolltech.qt.gui.QStyleOptionViewItem option__0, com.trolltech.qt.core.QRect bounding__1, java.lang.Object variant__2)"/>
    <method name="protected final com.trolltech.qt.gui.QPixmap decoration(com.trolltech.qt.gui.QStyleOptionViewItem option__0, java.lang.Object variant__1)" doc="/**
<p>Returns the pixmap used to decorate the root of the item view. The style <i>option</i> controls the appearance of the root; the <i>variant</i> refers to the data associated with an item.</p>

*/"/>
    <method name="protected final void doLayout(com.trolltech.qt.gui.QStyleOptionViewItem option__0, com.trolltech.qt.QNativePointer checkRect__1, com.trolltech.qt.QNativePointer iconRect__2, com.trolltech.qt.QNativePointer textRect__3, boolean hint__4)"/>
    <method name="protected final void drawBackground(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QModelIndex index__2)" doc="/**
<p>Renders the item background for the given <i>index</i>, using the given <i>painter</i> and style <i>option</i>.</p>

*/"/>
    <method name="public final boolean hasClipping()"/>
    <method name="public final com.trolltech.qt.gui.QItemEditorFactory itemEditorFactory()" doc="/**
<p>Returns the editor factory used by the item delegate. If no editor factory is set, the function will return null.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QRect rect(com.trolltech.qt.gui.QStyleOptionViewItem option__0, com.trolltech.qt.core.QModelIndex index__1, int role__2)"/>
    <method name="protected final com.trolltech.qt.QNativePointer selected(com.trolltech.qt.gui.QPixmap pixmap__0, com.trolltech.qt.gui.QPalette palette__1, boolean enabled__2)" doc="/**
<p>Returns the selected version of the given <i>pixmap</i> using the given <i>palette</i>. The <i>enabled</i> argument decides whether the normal or disabled highlight color of the palette is used.</p>

*/"/>
    <method name="public final void setClipping(boolean clip__0)"/>
    <method name="public final void setItemEditorFactory(com.trolltech.qt.gui.QItemEditorFactory factory__0)" doc="/**
<p>Sets the editor factory to be used by the item delegate to be the <i>factory</i> specified. If no editor factory is set, the item delegate will use the default editor factory.</p>

*/"/>
    <method name="protected final com.trolltech.qt.gui.QStyleOptionViewItem setOptions(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1)"/>
    <method name="protected final com.trolltech.qt.core.QRect textRectangle(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.core.QRect rect__1, com.trolltech.qt.gui.QFont font__2, java.lang.String text__3)"/>
    <method name="public com.trolltech.qt.gui.QWidget createEditor(com.trolltech.qt.gui.QWidget parent__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QModelIndex index__2)" doc="/**
<p>Returns the widget used to edit the item specified by <i>index</i> for editing. The <i>parent</i> widget and style <i>option</i> are used to control how the editor widget appears.</p>

*/"/>
    <method name="protected void drawCheck(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QRect rect__2, com.trolltech.qt.core.Qt.CheckState state__3)" doc="/**
<p>Renders a check indicator within the rectangle specified by <i>rect</i>, using the given <i>painter</i> and style <i>option</i>, using the given <i>state</i>.</p>

*/"/>
    <method name="protected void drawDecoration(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QRect rect__2, com.trolltech.qt.gui.QPixmap pixmap__3)" doc="/**
<p>Renders the decoration <i>pixmap</i> within the rectangle specified by <i>rect</i> using the given <i>painter</i> and style <i>option</i>.</p>

*/"/>
    <method name="protected void drawDisplay(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QRect rect__2, java.lang.String text__3)" doc="/**
<p>Renders the item view <i>text</i> within the rectangle specified by <i>rect</i> using the given <i>painter</i> and style <i>option</i>.</p>

*/"/>
    <method name="protected void drawFocus(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QRect rect__2)" doc="/**
<p>Renders the region within the rectangle specified by <i>rect</i>, indicating that it has the focus, using the given <i>painter</i> and style <i>option</i>.</p>

*/"/>
    <method name="public boolean editorEvent(com.trolltech.qt.core.QEvent event__0, com.trolltech.qt.core.QAbstractItemModel model__1, com.trolltech.qt.gui.QStyleOptionViewItem option__2, com.trolltech.qt.core.QModelIndex index__3)"/>
    <method name="public boolean eventFilter(com.trolltech.qt.core.QObject object__0, com.trolltech.qt.core.QEvent event__1)" doc="/**
<p>Returns true if the given <i>editor</i> is a valid QWidget and the given <i>event</i> is handled; otherwise returns false. The following key press events are handled by default:</p>
<ul>
<li><b>Tab</b></li>
<li><b>Backtab</b></li>
<li><b>Enter</b></li>
<li><b>Return</b></li>
<li><b>Esc</b></li>
</ul>
<p>In the case of <b>Tab</b>, <b>Backtab</b>, <b>Enter</b> and <b>Return</b> key press events, the <i>editor</i>'s data is comitted to the model and the editor is closed. If the <i>event</i> is a <b>Tab</b> key press the view will open an editor on the next item in the view. Likewise, if the <i>event</i> is a <b>Backtab</b> key press the view will open an editor on the <i>previous</i> item in the view.</p>
<p>If the event is a <b>Esc</b> key press event, the <i>editor</i> is closed <i>without</i> committing its data.</p>

*/"/>
    <method name="public void paint(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QModelIndex index__2)" doc="/**
<p>Renders the delegate using the given <i>painter</i> and style <i>option</i> for the item specified by <i>index</i>.</p>
<p>When reimplementing this function in a subclass, you should update the area held by the option's rect variable, using the option's state variable to determine the state of the item to be displayed, and adjust the way it is painted accordingly.</p>
<p>For example, a selected item may need to be displayed differently to unselected items, as shown in the following code:</p>
<pre>        if (option.state &amp; QStyle::State_Selected)
            painter-&gt;fillRect(option.rect, option.palette.highlight());

        int size = qMin(option.rect.width(), option.rect.height());
        int brightness = index.model()-&gt;data(index, Qt::DisplayRole).toInt();
        double radius = (size/2.0) - (brightness/255.0 * size/2.0);
        if (radius == 0.0)
            return;

        painter-&gt;save();
        painter-&gt;setRenderHint(QPainter::Antialiasing, true);
        painter-&gt;setPen(Qt::NoPen);
        if (option.state &amp; QStyle::State_Selected)
            painter-&gt;setBrush(option.palette.highlightedText());
        else
        ...</pre>
<p>After painting, you should ensure that the painter is returned to its the state it was supplied in when this function was called. For example, it may be useful to call QPainter::save() before painting and QPainter::restore() afterwards.</p>

*/"/>
    <method name="public void setEditorData(com.trolltech.qt.gui.QWidget editor__0, com.trolltech.qt.core.QModelIndex index__1)" doc="/**
<p>Sets the data to be displayed and edited by the <i>editor</i> for the item specified by <i>index</i>.</p>
<p>The default implementation uses the editor's user property to set values.</p>

*/"/>
    <method name="public void setModelData(com.trolltech.qt.gui.QWidget editor__0, com.trolltech.qt.core.QAbstractItemModel model__1, com.trolltech.qt.core.QModelIndex index__2)" doc="/**
<p>Sets the data for the specified <i>model</i> and item <i>index</i> from that supplied by the <i>editor</i>.</p>
<p>The default implementation uses the editor's user property to get values.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint(com.trolltech.qt.gui.QStyleOptionViewItem option__0, com.trolltech.qt.core.QModelIndex index__1)" doc="/**
<p>Returns the size needed by the delegate to display the item specified by <i>index</i>, taking into account the style information provided by <i>option</i>.</p>
<p>When reimplementing this function, note that in case of text items, QItemDelegate adds a margin (i.e. 2 * QStyle::PM_FocusFrameHMargin) to the length of the text.</p>

*/"/>
    <method name="public void updateEditorGeometry(com.trolltech.qt.gui.QWidget editor__0, com.trolltech.qt.gui.QStyleOptionViewItem option__1, com.trolltech.qt.core.QModelIndex index__2)" doc="/**
<p>Updates the <i>editor</i> for the item specified by <i>index</i> according to the style <i>option</i> given.</p>

*/"/>
</class>
