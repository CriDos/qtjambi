<class name="QSqlTableModel" doc="/**
<p>The QSqlTableModel class provides an editable data model for a single database table.</p>
<p>QSqlTableModel is a high-level interface for reading and writing database records from a single table. It is build on top of the lower-level QSqlQuery and can be used to provide data to view classes such as QTableView. For example:</p>
<pre>        QSqlTableModel *model = new QSqlTableModel;
        model-&gt;setTable(&quot;employee&quot;);
        model-&gt;setEditStrategy(QSqlTableModel::OnManualSubmit);
        model-&gt;select();
        model-&gt;removeColumn(0); <span class=&quote;comment&quote;>// don't show the ID</span>
        model-&gt;setHeaderData(0, Qt::Horizontal, tr(&quot;Name&quot;));
        model-&gt;setHeaderData(1, Qt::Horizontal, tr(&quot;Salary&quot;));

        QTableView *view = new QTableView;
        view-&gt;setModel(model);
        view-&gt;show();</pre>
<p>We set the SQL table's name and the edit strategy, then we set up the labels displayed in the view header. The edit strategy dictates when the changes done by the user in the view are actually applied to the database. The possible values are OnFieldChange, OnRowChange, and OnManualSubmit.</p>
<p>QSqlTableModel can also be used to access a database programmatically, without binding it to a view:</p>
<pre>        QSqlTableModel model;
        model.setTable(&quot;employee&quot;);
        QString name = model.record(4).value(&quot;name&quot;).toString();</pre>
<p>The code snippet above extracts the <tt>salary</tt> field from record 4 in the result set of the query <tt>SELECT * from employee</tt>.</p>
<p>It is possible to set filters using setFilter(), or modify the sort order using setSort(). At the end, you must call select() to populate the model with data.</p>
<p>The sql/tablemodel example illustrates how to use QSqlTableModel as the data source for a QTableView.</p>
<p>QSqlTableModel provides no direct support for foreign keys. Use the QSqlRelationalTableModel and QSqlRelationalDelegate if you want to resolve foreign keys.</p>

*/">
    <method name="public QSqlTableModel(com.trolltech.qt.core.QObject parent__0, com.trolltech.qt.sql.QSqlDatabase db__1)" doc="/**
<p>Creates an empty QSqlTableModel and sets the parent to <i>parent</i> and the database connection to <i>db</i>. If <i>db</i> is not valid, the default database connection will be used.</p>
<p>The default edit strategy is OnRowChange.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlDatabase database()" doc="/**
<p>Returns a pointer to the used QSqlDatabase or 0 if no database was set.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlTableModel.EditStrategy editStrategy()" doc="/**
<p>Returns the current edit strategy.</p>

*/"/>
    <method name="public final int fieldIndex(java.lang.String fieldName__0)" doc="/**
<p>Returns the index of the field <i>fieldName</i>.</p>

*/"/>
    <method name="public final java.lang.String filter()" doc="/**
<p>Returns the currently set filter.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QModelIndex indexInQuery(com.trolltech.qt.core.QModelIndex item__0)" doc="/**
<p>Returns the index of the value in the database result set for the given <i>item</i> in the model.</p>
<p>The return value is identical to <i>item</i> if no columns or rows have been inserted, removed, or moved around.</p>
<p>Returns an invalid model index if <i>item</i> is out of bounds or if <i>item</i> does not point to a value in the result set.</p>

*/"/>
    <method name="public final boolean insertRecord(int row__0, com.trolltech.qt.sql.QSqlRecord record__1)" doc="/**
<p>Inserts the <i>record</i> after <i>row</i>. If <i>row</i> is negative, the record will be appended to the end. Calls insertRows() and setRecord() internally.</p>
<p>Returns true if the row could be inserted, otherwise false.</p>

*/"/>
    <method name="public final boolean isDirty(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns true if the value at the index <i>index</i> is dirty, otherwise false. Dirty values are values that were modified in the model but not yet written into the database.</p>
<p>If <i>index</i> is invalid or points to a non-existing row, false is returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlIndex primaryKey()" doc="/**
<p>Returns the primary key for the current table, or an empty QSqlIndex if the table is not set or has no primary key.</p>

*/"/>
    <method name="public final void revertAll()" doc="/**
<p>Reverts all pending changes.</p>

*/"/>
    <method name="protected final void setPrimaryKey(com.trolltech.qt.sql.QSqlIndex key__0)" doc="/**
<p>Protected method that allows subclasses to set the primary key to <i>key</i>.</p>
<p>Normally, the primary index is set automatically whenever you call setTable().</p>

*/"/>
    <method name="public final void setQuery(com.trolltech.qt.sql.QSqlQuery query__0)" doc="/**
<p>This function simply calls QSqlQueryModel::setQuery(<i>query</i>). You should normally not call it on a QSqlTableModel. Instead, use setTable(), setSort(), setFilter(), etc., to set up the query.</p>

*/"/>
    <method name="public final boolean setRecord(int row__0, com.trolltech.qt.sql.QSqlRecord record__1)" doc="/**
<p>Sets the values at the specified <i>row</i> to the values of <i>record</i>. Returns true if all the values could be set; otherwise returns false.</p>

*/"/>
    <method name="public final boolean submitAll()" doc="/**
<p>Submits all pending changes and returns true on success. Returns false on error, detailed error information can be obtained with lastError().</p>
<p>Note: In OnManualSubmit mode, already submitted changes won't be cleared from the cache when submitAll() fails. This allows transactions to be rolled back and resubmitted again without losing data.</p>

*/"/>
    <method name="public final java.lang.String tableName()" doc="/**
<p>Returns the name of the currently selected table.</p>

*/"/>
    <method name="public void clear()"/>
    <method name="public java.lang.Object data(com.trolltech.qt.core.QModelIndex idx__0, int role__1)"/>
    <method name="protected boolean deleteRowFromTable(int row__0)" doc="/**
<p>Deletes the given <i>row</i> from the currently active database table.</p>
<p>This is a low-level method that operates directly on the database and should not be called directly. Use removeRow() or removeRows() to delete values. The model will decide depending on its edit strategy when to modify the database.</p>
<p>Returns true if the row was deleted; otherwise returns false.</p>

*/"/>
    <method name="public com.trolltech.qt.core.Qt.ItemFlags flags(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="public java.lang.Object headerData(int section__0, com.trolltech.qt.core.Qt.Orientation orientation__1, int role__2)"/>
    <method name="protected boolean insertRowIntoTable(com.trolltech.qt.sql.QSqlRecord values__0)" doc="/**
<p>Inserts the values <i>values</i> into the currently active database table.</p>
<p>This is a low-level method that operates directly on the database and should not be called directly. Use insertRow() and setData() to insert values. The model will decide depending on its edit strategy when to modify the database.</p>
<p>Returns true if the values could be inserted, otherwise false. Error information can be retrieved with lastError().</p>

*/"/>
    <method name="public boolean insertRows(int row__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Inserts <i>count</i> empty rows at position <i>row</i>. Note that <i>parent</i> must be invalid, since this model does not support parent-child relations.</p>
<p>Only one row at a time can be inserted when using the OnFieldChange or OnRowChange update strategies.</p>
<p>The primeInsert() signal will be emitted for each new row. Connect to it if you want to initialize the new row with default values.</p>
<p>Returns false if the parameters are out of bounds; otherwise returns true.</p>

*/"/>
    <method name="protected java.lang.String orderByClause()" doc="/**
<p>Returns an SQL <tt>ORDER BY</tt> clause based on the currently set sort order.</p>

*/"/>
    <method name="public boolean removeColumns(int column__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Removes <i>count</i> columns from the <i>parent</i> model, starting at index <i>column</i>.</p>
<p>Returns if the columns were successfully removed; otherwise returns false.</p>

*/"/>
    <method name="public boolean removeRows(int row__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Removes <i>count</i> rows starting at <i>row</i>. Since this model does not support hierarchical structures, <i>parent</i> must be an invalid model index.</p>
<p>Emits the beforeDelete() signal before a row is deleted.</p>
<p>Returns true if all rows could be removed; otherwise returns false. Detailed error information can be retrieved using lastError().</p>

*/"/>
    <method name="public void revert()" doc="/**
<p>This reimplemented slot is called by the item delegates when the user canceled editing the current row.</p>
<p>Reverts the changes if the model's strategy is set to OnRowChange. Does nothing for the other edit strategies.</p>
<p>Use revertAll() to revert all pending changes for the OnManualSubmit strategy or revertRow() to revert a specific row.</p>

*/"/>
    <method name="public void revertRow(int row__0)" doc="/**
<p>Reverts all changes for the specified <i>row</i>.</p>

*/"/>
    <method name="public int rowCount(com.trolltech.qt.core.QModelIndex parent__0)"/>
    <method name="public boolean select()" doc="/**
<p>Populates the model with data from the table that was set via setTable(), using the specified filter and sort condition, and returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="protected java.lang.String selectStatement()" doc="/**
<p>Returns the SQL <tt>SELECT</tt> statement used internally to populate the model. The statement includes the filter and the <tt>ORDER BY</tt> clause.</p>

*/"/>
    <method name="public boolean setData(com.trolltech.qt.core.QModelIndex index__0, java.lang.Object value__1, int role__2)" doc="/**
<p>Sets the data for the item <i>index</i> for the role <i>role</i> to <i>value</i>. Depending on the edit strategy, the value might be applied to the database at once or cached in the model.</p>
<p>Returns true if the value could be set or false on error, for example if <i>index</i> is out of bounds.</p>

*/"/>
    <method name="public void setEditStrategy(com.trolltech.qt.sql.QSqlTableModel.EditStrategy strategy__0)" doc="/**
<p>Sets the strategy for editing values in the database to <i>strategy</i>.</p>
<p>This will revert any pending changes.</p>

*/"/>
    <method name="public void setFilter(java.lang.String filter__0)" doc="/**
<p>Sets the current filter to <i>filter</i>.</p>
<p>The filter is a SQL <tt>WHERE</tt> clause without the keyword <tt>WHERE</tt> (for example, <tt>name='Josephine')</tt>.</p>
<p>If the model is already populated with data from a database, the model re-selects it with the new filter. Otherwise, the filter will be applied the next time select() is called.</p>

*/"/>
    <method name="public void setSort(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sets the sort oder for <i>column</i> to <i>order</i>. This does not affect the current data, to refresh the data using the new sort order, call select().</p>

*/"/>
    <method name="public void setTable(java.lang.String tableName__0)" doc="/**
<p>Sets the database table on which the model operates to <i>tableName</i>. Does not select data from the table, but fetches its field information.</p>
<p>To populate the model with the table's data, call select().</p>

*/"/>
    <method name="public void sort(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sorts the data by <i>column</i> with the sort order <i>order</i>. This will immediately select data, use setSort() to set a sort order without populating the model with data.</p>

*/"/>
    <method name="public boolean submit()" doc="/**
<p>This reimplemented slot is called by the item delegates when the user stopped editing the current row.</p>
<p>Submits the currently edited row if the model's strategy is set to OnRowChange or OnFieldChange. Does nothing for the OnManualSubmit strategy.</p>
<p>Use submitAll() to submit all pending changes for the OnManualSubmit strategy.</p>
<p>Returns true on success; otherwise returns false. Use lastError() to query detailed error information.</p>

*/"/>
    <method name="protected boolean updateRowInTable(int row__0, com.trolltech.qt.sql.QSqlRecord values__1)" doc="/**
<p>Updates the row <i>row</i> in the currently active database table with the values from <i>values</i>.</p>
<p>This is a low-level method that operates directly on the database and should not be called directly. Use setData() to update values. The model will decide depending on its edit strategy when to modify the database.</p>
<p>Note that only values that have the generated-flag set are updated. The generated-flag can be set with QSqlRecord::setGenerated() and tested with QSqlRecord::isGenerated().</p>

*/"/>
    <enum name="EditStrategy" doc="/**
<p>This enum type describes which strategy to choose when editing values in the database.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>All changes to the model will be applied immediately to the database.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Changes to a row will be applied when the user selects a different row.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>All changes will be cached in the model until either submitAll() or revertAll() is called.</td></tr>
</table></p>
<p>Note: To prevent inserting only partly initialized rows into the database, <tt>OnFieldChange</tt> will behave like <tt>OnRowChange</tt> for newly inserted rows.</p>

*/"/>
</class>
