<class name="QDropEvent" doc="/**
<p>The QDropEvent class provides an event which is sent when a drag and drop action is completed.</p>
<p>When a widget accepts drop events, it will receive this event if it has accepted the most recent QDragEnterEvent or QDragMoveEvent sent to it.</p>
<p>The drop event contains a proposed action, available from proposedAction(), for the widget to either accept or ignore. If the action can be handled by the widget, you should call the acceptProposedAction() function. Since the proposed action can be a combination of Qt::DropAction values, it may be useful to either select one of these values as a default action or ask the user to select their preferred action.</p>
<p>If the proposed drop action is not suitable, perhaps because your custom widget does not support that action, you can replace it with any of the possible drop actions by calling setDropAction() with your preferred action. If you set a value that is not present in the bitwise OR combination of values returned by possibleActions(), the default copy action will be used. Once a replacement drop action has been set, call accept() instead of acceptProposedAction() to complete the drop operation.</p>
<p>The mimeData() function provides the data dropped on the widget in a QMimeData object. This contains information about the MIME type of the data in addition to the data itself.</p>

*/">
    <method name="public QDropEvent(com.trolltech.qt.core.QPoint pos__0, com.trolltech.qt.core.Qt.DropActions actions__1, com.trolltech.qt.gui.QMimeData data__2, com.trolltech.qt.core.Qt.MouseButtons buttons__3, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__4, com.trolltech.qt.core.QEvent.Type type__5)" doc="/**
<p>Constructs a drop event of a certain <i>type</i> corresponding to a drop at the point specified by <i>pos</i> in the destination widget's coordinate system.</p>
<p>The <i>actions</i> indicate which types of drag and drop operation can be performed, and the drag data is stored as MIME-encoded data in <i>data</i>.</p>
<p>The states of the mouse buttons and keyboard modifiers at the time of the drop are specified by <i>buttons</i> and <i>modifiers</i>.</p>

*/"/>
    <method name="public final void acceptProposedAction()" doc="/**
<p>Sets the drop action to be the proposed action.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.DropAction dropAction()" doc="/**
<p>Returns the action to be performed on the data by the target. This may be different from the action supplied in proposedAction() if you have called setDropAction() to explicitly choose a drop action.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QByteArray encodedData(com.trolltech.qt.QNativePointer arg__0)" doc="/**
<p>Returns a byte array containing the drag's data, in <i>format</i>.</p>
<p>data() normally needs to get the data from the drag source, which is potentially very slow, so it's advisable to call this function only if you're sure that you will need the data in that particular <i>format</i>.</p>
<p>The resulting data will have a size of 0 if the format was not available.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer format(int n__0)" doc="/**
<p>Returns a string describing one of the available data types for this drag. Common examples are &quot;text/plain&quot; and &quot;image/gif&quot;. If <i>n</i> is less than zero or greater than the number of available data types, format() returns 0.</p>
<p>This function is provided mainly for debugging. Most drop targets will use provides().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.KeyboardModifiers keyboardModifiers()" doc="/**
<p>Returns the modifier keys that are pressed.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMimeData mimeData()" doc="/**
<p>Returns the data that was dropped on the widget and its associated MIME type information.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.MouseButtons mouseButtons()" doc="/**
<p>Returns the mouse buttons that are pressed..</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint pos()" doc="/**
<p>Returns the position where the drop was made.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.DropActions possibleActions()" doc="/**
<p>Returns an OR-combination of possible drop actions.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.DropAction proposedAction()" doc="/**
<p>Returns the proposed drop action.</p>

*/"/>
    <method name="public final boolean provides(com.trolltech.qt.QNativePointer arg__0)" doc="/**
<p>Returns true if this event provides format <i>mimeType</i>; otherwise returns false.</p>

*/"/>
    <method name="public final void setDropAction(com.trolltech.qt.core.Qt.DropAction action__0)" doc="/**
<p>Sets the <i>action</i> to be performed on the data by the target. Use this to override the proposed action with one of the possible actions.</p>
<p>If you set a drop action that is not one of the possible actions, the drag and drop operation will default to a copy operation.</p>
<p>Once you have supplied a replacement drop action, call accept() instead of acceptProposedAction().</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget source()" doc="/**
<p>If the source of the drag operation is a widget in this application, this function returns that source; otherwise it returns 0. The source of the operation is the first parameter to the QDrag object used instantiate the drag.</p>
<p>This is useful if your widget needs special behavior when dragging to itself.</p>

*/"/>
    <method name="protected final com.trolltech.qt.gui.QMimeData mdata()"/>
    <method name="protected final void setMdata(com.trolltech.qt.gui.QMimeData mdata)"/>
    <method name="protected final com.trolltech.qt.core.Qt.DropAction default_action()"/>
    <method name="protected final void setDefault_action(com.trolltech.qt.core.Qt.DropAction default_action)"/>
    <method name="protected final com.trolltech.qt.core.Qt.KeyboardModifiers modState()"/>
    <method name="protected final void setModState(com.trolltech.qt.core.Qt.KeyboardModifiers modState)"/>
    <method name="protected final com.trolltech.qt.core.Qt.MouseButtons mouseState()"/>
    <method name="protected final void setMouseState(com.trolltech.qt.core.Qt.MouseButtons mouseState)"/>
    <method name="protected final com.trolltech.qt.core.Qt.DropAction drop_action()"/>
    <method name="protected final void setDrop_action(com.trolltech.qt.core.Qt.DropAction drop_action)"/>
    <method name="protected final com.trolltech.qt.core.QPoint p()"/>
    <method name="protected final void setP(com.trolltech.qt.core.QPoint p)"/>
    <method name="protected final com.trolltech.qt.core.Qt.DropActions act()"/>
    <method name="protected final void setAct(com.trolltech.qt.core.Qt.DropActions act)"/>
</class>
