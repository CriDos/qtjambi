<class name="QTabWidget" doc="/**
<p>The QTabWidget class provides a stack of tabbed widgets.</p>
<p>A tab widget provides a tab bar (see QTabBar) and a &quot;page area&quot; that is used to display pages related to each tab. By default, the tab bar is shown above the page area, but different configurations are available (see TabPosition). Each tab is associated with a different widget (called a page). Only the current page is shown in the page area; all the other pages are hidden. The user can show a different page by clicking on its tab or by pressing its Alt+<i>letter</i> shortcut if it has one.</p>
<p>The normal way to use QTabWidget is to do the following:</p>
<ol type=&quote;1&quote;>
<li>Create a QTabWidget.</li>
<li>Create a QWidget for each of the pages in the tab dialog, but do not specify a parent widget - the tab widget will reparent the page widget later.</li>
<li>Insert children into the page widget, set up geometry management for it and use addTab() (or insertTab()) to set up a tab with an optional keyboard shortcut.</li>
<li>Connect to the signals and slots.</li>
</ol>
<p>The position of the tabs is defined by tabPosition, their shape by tabShape.</p>
<p>The signal currentChanged() is emitted when the user selects a page.</p>
<p>The current page index is available as currentIndex(), the current page widget with currentWidget(). You can retrieve a pointer to a page widget with a given index using widget(), and can find the index position of a widget with indexOf(). Use setCurrentWidget() or setCurrentIndex() to show a particular page.</p>
<p>You can change a tab's text and icon using setTabText() or setTabIcon(). A tab can be removed with removeTab().</p>
<p>Each tab is either enabled or disabled at any given time (see setTabEnabled()). If a tab is enabled, the tab text is drawn normally and the user can select that tab. If it is disabled, the tab is drawn in a different way and the user cannot select that tab. Note that even if a tab is disabled, the page can still be visible, for example if all of the tabs happen to be disabled.</p>
<p>Tab widgets can be a very good way to split up a complex dialog. An alternative is to use a QStackedWidget for which you provide some means of navigating between pages, for example, a QToolBar or a QListWidget.</p>
<p>Most of the functionality in QTabWidget is provided by a QTabBar (at the top, providing the tabs) and a QStackedWidget (most of the area, organizing the individual pages).</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image windowsxp-tabwidget.png]</font></td><td><font color=&quote;red&quote;>[Missing image macintosh-tabwidget.png]</font></td><td><font color=&quote;red&quote;>[Missing image plastique-tabwidget.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>A Windows XP style tab widget.</td><td>A Macintosh style tab widget.</td><td>A Plastique style tab widget.</td></tr>
</table></p>

*/">
    <method name="public QTabWidget(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a tabbed widget with parent <i>parent</i>.</p>

*/"/>
    <method name="public final int addTab(com.trolltech.qt.gui.QWidget widget__0, java.lang.String arg__1)" doc="/**
<p>Adds another tab and page to the tab view.</p>
<p>The new page is <i>child</i>; the tab's label is <i>label</i>.</p>
<p>If the tab's <i>label</i> contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is &quot;Bro&amp;wse&quot; then Alt+W becomes a shortcut which will move the focus to this tab.</p>
<p>If you call addTab() after show(), the layout system will try to adjust to the changes in it's widgets hierarchy and may cause flicker. To prevent this, you can set the QWidget::updatesEnabled property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.</p>

*/"/>
    <method name="public final int addTab(com.trolltech.qt.gui.QWidget widget__0, com.trolltech.qt.gui.QIcon icon__1, java.lang.String label__2)" doc="/**
<p>Adds another tab and page to the tab view.</p>
<p>This function is the same as addTab(), but with an additional <i>icon</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget cornerWidget(com.trolltech.qt.core.Qt.Corner corner__0)" doc="/**
<p>Returns the widget shown in the <i>corner</i> of the tab widget or 0.</p>

*/"/>
    <method name="public final int count()"/>
    <method name="public final int currentIndex()"/>
    <method name="public final com.trolltech.qt.gui.QWidget currentWidget()" doc="/**
<p>Returns a pointer to the page currently being displayed by the tab dialog. The tab dialog does its best to make sure that this value is never 0 (but if you try hard enough, it can be).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.TextElideMode elideMode()"/>
    <method name="public final com.trolltech.qt.core.QSize iconSize()"/>
    <method name="public final int indexOf(com.trolltech.qt.gui.QWidget widget__0)" doc="/**
<p>Returns the index position of the page occupied by the widget <i>w</i>, or -1 if the widget cannot be found.</p>

*/"/>
    <method name="public final int insertTab(int index__0, com.trolltech.qt.gui.QWidget widget__1, com.trolltech.qt.gui.QIcon icon__2, java.lang.String label__3)" doc="/**
<p>Inserts another tab and page to the tab view.</p>
<p>This function is the same as insertTab(), but with an additional <i>icon</i>.</p>

*/"/>
    <method name="public final int insertTab(int index__0, com.trolltech.qt.gui.QWidget widget__1, java.lang.String arg__2)" doc="/**
<p>Inserts another tab and page to the tab view.</p>
<p>The given <i>widget</i> is the new page, and the tab's label is specified by <i>label</i>. Note the difference between the widget name and the tab label: The name is internal to the program and invariant, whereas the label is shown on-screen and may vary according to language and other factors.</p>
<p>If the tab's <i>label</i> contains an ampersand, the letter following the ampersand is used as a shortcut for the tab, e.g. if the label is &quot;Bro&amp;wse&quot; then Alt+W becomes a shortcut which will move the focus to this tab.</p>
<p>If <i>index</i> is out of range, the tab is simply appended. Otherwise it is inserted at the specified position.</p>
<p>If the QTabWidget was empty before this function is called, the new page becomes the current page. Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current page.</p>
<p>If you call insertTab() after show(), the layout system will try to adjust to the changes in it's widgets hierarchy and may cause flicker. To prevent this, you can set the QWidget::updatesEnabled property to false prior to changes; remember to set the property to true when the changes are done, making the widget receive paint events again.</p>

*/"/>
    <method name="public final boolean isTabEnabled(int index__0)" doc="/**
<p>Returns true if the the page at position <i>index</i> is enabled; otherwise returns false.</p>

*/"/>
    <method name="public final void removeTab(int index__0)" doc="/**
<p>Removes the page at position <i>index</i> from this stack of widgets. Does not delete the page widget.</p>

*/"/>
    <method name="public final void setCornerWidget(com.trolltech.qt.gui.QWidget w__0, com.trolltech.qt.core.Qt.Corner corner__1)" doc="/**
<p>Sets the given <i>widget</i> to be shown in the specified <i>corner</i> of the tab widget.</p>
<p>Only the horizontal element of the <i>corner</i> will be used.</p>
<p>Note: Corner widgets are designed for North and South tab positions; other orientations are known to not work properly.</p>

*/"/>
    <method name="public final void setCurrentIndex(int index__0)"/>
    <method name="public final void setCurrentWidget(com.trolltech.qt.gui.QWidget widget__0)" doc="/**
<p>Makes <i>widget</i> the current widget. The <i>widget</i> used must be a page in this tab widget.</p>

*/"/>
    <method name="public final void setElideMode(com.trolltech.qt.core.Qt.TextElideMode arg__0)"/>
    <method name="public final void setIconSize(com.trolltech.qt.core.QSize size__0)"/>
    <method name="protected final void setTabBar(com.trolltech.qt.gui.QTabBar arg__0)" doc="/**
<p>Replaces the dialog's QTabBar heading with the tab bar <i>tb</i>. Note that this must be called <i>before</i> any tabs have been added, or the behavior is undefined.</p>

*/"/>
    <method name="public final void setTabEnabled(int index__0, boolean arg__1)" doc="/**
<p>If <i>enable</i> is true, the page at position <i>index</i> is enabled; otherwise the page at position <i>index</i> is disabled. The page's tab is redrawn appropriately.</p>
<p>QTabWidget uses QWidget::setEnabled() internally, rather than keeping a separate flag.</p>
<p>Note that even a disabled tab/page may be visible. If the page is visible already, QTabWidget will not hide it; if all the pages are disabled, QTabWidget will show one of them.</p>

*/"/>
    <method name="public final void setTabIcon(int index__0, com.trolltech.qt.gui.QIcon icon__1)" doc="/**
<p>Sets the <i>icon</i> for the tab at position <i>index</i>.</p>

*/"/>
    <method name="public final void setTabPosition(com.trolltech.qt.gui.QTabWidget.TabPosition arg__0)"/>
    <method name="public final void setTabShape(com.trolltech.qt.gui.QTabWidget.TabShape s__0)"/>
    <method name="public final void setTabText(int index__0, java.lang.String arg__1)" doc="/**
<p>Defines a new <i>label</i> for the page at position <i>index</i>'s tab.</p>

*/"/>
    <method name="public final void setTabToolTip(int index__0, java.lang.String tip__1)" doc="/**
<p>Sets the tab tool tip for the page at position <i>index</i> to <i>tip</i>.</p>

*/"/>
    <method name="public final void setTabWhatsThis(int index__0, java.lang.String text__1)" doc="/**
<p>Sets the What's This help text for the page at position <i>index</i> to <i>text</i>.</p>

*/"/>
    <method name="public final void setUsesScrollButtons(boolean useButtons__0)"/>
    <method name="protected final com.trolltech.qt.gui.QTabBar tabBar()" doc="/**
<p>Returns the current QTabBar.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QIcon tabIcon(int index__0)" doc="/**
<p>Returns the label text for the tab on the page at position <i>index</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTabWidget.TabPosition tabPosition()"/>
    <method name="public final com.trolltech.qt.gui.QTabWidget.TabShape tabShape()"/>
    <method name="public final java.lang.String tabText(int index__0)" doc="/**
<p>Returns the label text for the tab on the page at position <i>index</i>.</p>

*/"/>
    <method name="public final java.lang.String tabToolTip(int index__0)" doc="/**
<p>Returns the tab tool tip for the page at position <i>index</i> or an empty string if no tool tip has been set.</p>

*/"/>
    <method name="public final java.lang.String tabWhatsThis(int index__0)" doc="/**
<p>Returns the What's This help text for the page at position <i>index</i>, or an empty string if no help text has been set.</p>

*/"/>
    <method name="public final boolean usesScrollButtons()"/>
    <method name="public final com.trolltech.qt.gui.QWidget widget(int index__0)" doc="/**
<p>Returns the tab page at index position <i>index</i> or 0 if the <i>index</i> is out of range.</p>

*/"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSizeHint()" doc="/**
<p>Returns a suitable minimum size for the tab widget.</p>

*/"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)" doc="/**
<p>Paints the tab widget's tab bar in response to the paint <i>event</i>.</p>

*/"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent arg__0)"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="protected void tabInserted(int index__0)" doc="/**
<p>This virtual handler is called after a new tab was added or inserted at position <i>index</i>.</p>

*/"/>
    <method name="protected void tabRemoved(int index__0)" doc="/**
<p>This virtual handler is called after a tab was removed from position <i>index</i>.</p>

*/"/>
    <enum name="TabShape" doc="/**
<p>This enum type defines the shape of the tabs:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>rounded look (normal)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>triangular look</td></tr>
</table></p>

*/"/>
    <enum name="TabPosition" doc="/**
<p>This enum type defines where QTabWidget draws the tab row:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The tabs are drawn above the pages.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The tabs are drawn below the pages.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The tabs are drawn to the left of the pages.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The tabs are drawn to the right of the pages.</td></tr>
</table></p>

*/"/>
</class>
