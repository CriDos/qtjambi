<class name="QTextTableFormat" doc="/**
<p>The QTextTableFormat class provides formatting information for tables in a QTextDocument.</p>
<p>A table is a group of cells ordered into rows and columns. Each table contains at least one row and one column. Each cell contains a block. Tables in rich text documents are formatted using the properties defined in this class.</p>
<p>Tables are horizontally justified within their parent frame according to the table's alignment. This can be read with the alignment() function and set with setAlignment().</p>
<p>Cells within the table are separated by cell spacing. The number of pixels between cells is set with setCellSpacing() and read with cellSpacing(). The contents of each cell is surrounded by cell padding. The number of pixels between each cell edge and its contents is set with setCellPadding() and read with cellPadding().</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qtexttableformat-cell.png]</font></p><p>The table's background color can be read with the background() function, and can be specified with setBackground(). The background color of each cell can be set independently, and will control the color of the cell within the padded area.</p>
<p>The table format also provides a way to constrain the widths of the columns in the table. Columns can be assigned a fixed width, a variable width, or a percentage of the available width (see QTextLength). The columns() function returns the number of columns with constraints, and the columnWidthConstraints() function returns the constraints defined for the table. These quantities can also be set by calling setColumnWidthConstraints() with a vector containing new constraints. The setColumns() function can be used to change the number of constraints in use. If no constraints are required, clearColumnWidthConstraints() can be used to remove them.</p>

*/">
    <method name="public QTextTableFormat()" doc="/**
<p>Constructs a new table format object.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Alignment alignment()" doc="/**
<p>Returns the table's alignment.</p>

*/"/>
    <method name="public final double cellPadding()" doc="/**
<p>Returns the table's cell padding. This describes the distance between the border of a cell and its contents.</p>

*/"/>
    <method name="public final double cellSpacing()" doc="/**
<p>Returns the table's cell spacing. This describes the distance between adjacent cells.</p>

*/"/>
    <method name="public final void clearColumnWidthConstraints()" doc="/**
<p>Clears the column width constraints for the table.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QTextLength&gt; columnWidthConstraints()" doc="/**
<p>Returns a list of constraints used by this table format to control the appearance of columns in a table.</p>

*/"/>
    <method name="public final int columns()" doc="/**
<p>Returns the number of columns specified by the table format.</p>

*/"/>
    <method name="public final int headerRowCount()" doc="/**
<p>Returns the number of rows in the table that define the header.</p>

*/"/>
    <method name="public final void setAlignment(com.trolltech.qt.core.Qt.Alignment alignment__0)" doc="/**
<p>Sets the table's <i>alignment</i>.</p>

*/"/>
    <method name="public final void setCellPadding(double padding__0)" doc="/**
<p>Sets the cell <i>padding</i> for the table. This determines the distance between the border of a cell and its contents.</p>

*/"/>
    <method name="public final void setCellSpacing(double spacing__0)" doc="/**
<p>Sets the cell <i>spacing</i> for the table. This determines the distance between adjacent cells.</p>

*/"/>
    <method name="public final void setColumnWidthConstraints(java.util.List&lt;com.trolltech.qt.gui.QTextLength&gt; constraints__0)" doc="/**
<p>Sets the column width <i>constraints</i> for the table.</p>

*/"/>
    <method name="public final void setColumns(int columns__0)" doc="/**
<p>Sets the number of <i>columns</i> required by the table format.</p>

*/"/>
    <method name="public final void setHeaderRowCount(int count__0)" doc="/**
<p>Declares the first <i>count</i> rows of the table as table header. The table header rows get repeated when a table is broken across a page boundary.</p>

*/"/>
    <method name="public boolean isValid()" doc="/**
<p>Returns true if this table format is valid; otherwise returns false.</p>

*/"/>
</class>
