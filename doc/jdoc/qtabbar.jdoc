<class name="QTabBar" doc="/**
<p>The QTabBar class provides a tab bar, e.g. for use in tabbed dialogs.</p>
<p>QTabBar is straightforward to use; it draws the tabs using one of the predefined shapes, and emits a signal when a tab is selected. It can be subclassed to tailor the look and feel. Qt also provides a ready-made QTabWidget.</p>
<p>Each tab has a tabText(), an optional tabIcon(), an optional tabToolTip(), optional tabWhatsThis() and optional tabData(). The tabs's attributes can be changed with setTabText(), setTabIcon(), setTabToolTip(), setTabWhatsThis and setTabData(). Each tabs can be enabled or disabled individually with setTabEnabled().</p>
<p>Each tab can display text in a distinct color. The current text color for a tab can be found with the tabTextColor() function. Set the text color for a particular tab with setTabTextColor().</p>
<p>Tabs are added using addTab(), or inserted at particular positions using insertTab(). The total number of tabs is given by count(). Tabs can be removed from the tab bar with removeTab(). Combining removeTab() and insertTab() allows you to move tabs to different positions.</p>
<p>The shape property defines the tabs' appearance. The choice of shape is a matter of taste, although tab dialogs (for preferences and similar) invariably use RoundedNorth. Tab controls in windows other than dialogs almost always use either RoundedSouth or TriangularSouth. Many spreadsheets and other tab controls in which all the pages are essentially similar use TriangularSouth, whereas RoundedSouth is used mostly when the pages are different (e.g. a multi-page tool palette). The default in QTabBar is RoundedNorth.</p>
<p>The most important part of QTabBar's API is the currentChanged() signal. This is emitted whenever the current tab changes (even at startup, when the current tab changes from 'none'). There is also a slot, setCurrentIndex(), which can be used to select a tab programmatically. The function currentIndex() returns the index of the current tab, count holds the number of tabs.</p>
<p>QTabBar creates automatic mnemonic keys in the manner of QAbstractButton; e.g. if a tab's label is &quot;&amp;Graphics&quot;, Alt+G becomes a shortcut key for switching to that tab.</p>
<p>The following virtual functions may need to be reimplemented in order to tailor the look and feel or store extra data with each tab:</p>
<ul>
<li>tabSizeHint() calcuates the size of a tab.</li>
<li>tabInserted() notifies that a new tab was added.</li>
<li>tabRemoved() notifies that a tab was removed.</li>
<li>tabLayoutChange() notifies that the tabs have been re-laid out.</li>
<li>paintEvent() paints all tabs.</li>
</ul>
<p>For subclasses, you might also need the tabRect() functions which returns the visual geometry of a single tab.</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image plastique-tabbar.png]</font></td><td>A tab bar shown in the Plastique widget style.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image plastique-tabbar-truncated.png]</font></td><td>A truncated tab bar shown in the Plastique widget style.</td></tr>
</table></p>

*/">
    <method name="public QTabBar(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Creates a new tab bar with the given <i>parent</i>.</p>

*/"/>
    <method name="public final int addTab(java.lang.String text__0)" doc="/**
<p>Adds a new tab with text <i>text</i>. Returns the new tab's index.</p>

*/"/>
    <method name="public final int addTab(com.trolltech.qt.gui.QIcon icon__0, java.lang.String text__1)" doc="/**
<p>Adds a new tab with icon <i>icon</i> and text <i>text</i>. Returns the new tab's index.</p>

*/"/>
    <method name="public final int count()"/>
    <method name="public final int currentIndex()"/>
    <method name="public final boolean drawBase()"/>
    <method name="public final com.trolltech.qt.core.Qt.TextElideMode elideMode()"/>
    <method name="public final com.trolltech.qt.core.QSize iconSize()"/>
    <method name="public final int insertTab(int index__0, com.trolltech.qt.gui.QIcon icon__1, java.lang.String text__2)" doc="/**
<p>Inserts a new tab with icon <i>icon</i> and text <i>text</i> at position <i>index</i>. If <i>index</i> is out of range, the new tab is appended. Returns the new tab's index.</p>
<p>If the QTabBar was empty before this function is called, the inserted tab becomes the current tab.</p>
<p>Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current tab.</p>

*/"/>
    <method name="public final int insertTab(int index__0, java.lang.String text__1)" doc="/**
<p>Inserts a new tab with text <i>text</i> at position <i>index</i>. If <i>index</i> is out of range, the new tab is appened. Returns the new tab's index.</p>

*/"/>
    <method name="public final boolean isTabEnabled(int index__0)" doc="/**
<p>Returns true if the tab at position <i>index</i> is enabled; otherwise returns false.</p>

*/"/>
    <method name="public final void removeTab(int index__0)" doc="/**
<p>Removes the tab at position <i>index</i>.</p>

*/"/>
    <method name="public final void setCurrentIndex(int index__0)"/>
    <method name="public final void setDrawBase(boolean drawTheBase__0)"/>
    <method name="public final void setElideMode(com.trolltech.qt.core.Qt.TextElideMode arg__0)"/>
    <method name="public final void setIconSize(com.trolltech.qt.core.QSize size__0)"/>
    <method name="public final void setShape(com.trolltech.qt.gui.QTabBar.Shape shape__0)"/>
    <method name="public final void setTabData(int index__0, java.lang.Object data__1)" doc="/**
<p>Sets the data of the tab at position <i>index</i> to <i>data</i>.</p>

*/"/>
    <method name="public final void setTabEnabled(int index__0, boolean arg__1)" doc="/**
<p>If <i>enabled</i> is true then the tab at position <i>index</i> is enabled; otherwise the item at position <i>index</i> is disabled.</p>

*/"/>
    <method name="public final void setTabIcon(int index__0, com.trolltech.qt.gui.QIcon icon__1)" doc="/**
<p>Sets the icon of the tab at position <i>index</i> to <i>icon</i>.</p>

*/"/>
    <method name="public final void setTabText(int index__0, java.lang.String text__1)" doc="/**
<p>Sets the text of the tab at position <i>index</i> to <i>text</i>.</p>

*/"/>
    <method name="public final void setTabTextColor(int index__0, com.trolltech.qt.gui.QColor color__1)" doc="/**
<p>Sets the color of the text in the tab with the given <i>index</i> to the specified <i>color</i>.</p>
<p>If an invalid color is specified, the tab will use the QTabBar foreground role instead.</p>

*/"/>
    <method name="public final void setTabToolTip(int index__0, java.lang.String tip__1)" doc="/**
<p>Sets the tool tip of the tab at position <i>index</i> to <i>tip</i>.</p>

*/"/>
    <method name="public final void setTabWhatsThis(int index__0, java.lang.String text__1)" doc="/**
<p>Sets the What's This help text of the tab at position <i>index</i> to <i>text</i>.</p>

*/"/>
    <method name="public final void setUsesScrollButtons(boolean useButtons__0)"/>
    <method name="public final com.trolltech.qt.gui.QTabBar.Shape shape()"/>
    <method name="public final java.lang.Object tabData(int index__0)" doc="/**
<p>Returns the datad of the tab at position <i>index</i>, or a null variant if <i>index</i> is out of range.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QIcon tabIcon(int index__0)" doc="/**
<p>Returns the icon of the tab at position <i>index</i>, or a null icon if <i>index</i> is out of range.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect tabRect(int index__0)" doc="/**
<p>Returns the visual rectangle of the of the tab at position <i>index</i>, or a null rectangle if <i>index</i> is out of range.</p>

*/"/>
    <method name="public final java.lang.String tabText(int index__0)" doc="/**
<p>Returns the text of the tab at position <i>index</i>, or an empty string if <i>index</i> is out of range.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor tabTextColor(int index__0)" doc="/**
<p>Returns the text color of the tab with the given <i>index</i>, or a invalid color if <i>index</i> is out of range.</p>

*/"/>
    <method name="public final java.lang.String tabToolTip(int index__0)" doc="/**
<p>Returns the tool tip of the tab at position <i>index</i>, or an empty string if <i>index</i> is out of range.</p>

*/"/>
    <method name="public final java.lang.String tabWhatsThis(int index__0)" doc="/**
<p>Returns the What's This help text of the tab at position <i>index</i>, or an empty string if <i>index</i> is out of range.</p>

*/"/>
    <method name="public final boolean usesScrollButtons()"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSizeHint()"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent arg__0)"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="protected void tabInserted(int index__0)" doc="/**
<p>This virtual handler is called after a new tab was added or inserted at position <i>index</i>.</p>

*/"/>
    <method name="protected void tabLayoutChange()" doc="/**
<p>This virtual handler is called whenever the tab layout changes.</p>

*/"/>
    <method name="protected void tabRemoved(int index__0)" doc="/**
<p>This virtual handler is called after a tab was removed from position <i>index</i>.</p>

*/"/>
    <method name="protected com.trolltech.qt.core.QSize tabSizeHint(int index__0)" doc="/**
<p>Returns the size hint for the tab at position <i>index</i>.</p>

*/"/>
    <enum name="Shape" doc="/**
<p>This enum type lists the built-in shapes supported by QTabBar. Treat these as hints as some styles may not render some of the shapes. However, position should be honored.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The normal rounded look above the pages</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The normal rounded look below the pages</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The normal rounded look on the left side of the pages</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The normal rounded look on the right side the pages</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Triangular tabs above the pages.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Triangular tabs similar to those used in the Excel spreadsheet, for example</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Triangular tabs on the left of the pages.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Triangular tabs on the right of the pages.</td></tr>
</table></p>

*/"/>
</class>
