<class name="QAbstractItemView" doc="/**
<p>The QAbstractItemView class provides the basic functionality for item view classes.</p>
<p>QAbstractItemView class is the base class for every standard view that uses a QAbstractItemModel. QAbstractItemView is an abstract class and cannot itself be instantiated. It provides a standard interface for interoperating with models through the signals and slots mechanism, enabling subclasses to be kept up-to-date with changes to their models. This class provides standard support for keyboard and mouse navigation, viewport scrolling, item editing, and selections.</p>
<p>The QAbstractItemView class is one of the Model/View Classes and is part of Qt's model/view framework.</p>
<p>The view classes that inherit QAbstractItemView only need to implement their own view-specific functionality, such as drawing items, returning the geometry of items, finding items, etc.</p>
<p>QAbstractItemView provides common slots such as edit() and setCurrentIndex(). Many protected slots are also provided, including dataChanged(), rowsInserted(), rowsAboutToBeRemoved(), selectionChanged(), and currentChanged().</p>
<p>The root item is returned by rootIndex(), and the current item by currentIndex(). To make sure that an item is visible use scrollTo().</p>
<p>Some of QAbstractItemView's functions are concerned with scrolling, for example setHorizontalScrollMode() and setVerticalScrollMode(). To set the range of the scrollbars, you can, for example, reimplement the view's resizeEvent() function:</p>
<pre>    void MyView::resizeEvent(QResizeEvent *event) {
        horizontalScrollBar()-&gt;setRange(0, realWidth - width());
        ...
    }</pre>
<p>Note that the range is not updated until the widget is shown.</p>
<p>Several other functions are concerned with selection control; for example setSelectionMode(), and setSelectionBehavior(). This class provides a default selection model to work with (selectionModel()), but this can be replaced by using setSelectionModel() with an instance of QItemSelectionModel.</p>
<p>For complete control over the display and editing of items you can specify a delegate with setItemDelegate().</p>
<p>QAbstractItemView provides a lot of protected functions. Some are concerned with editing, for example, edit(), and commitData(), whilst others are keyboard and mouse event handlers.</p>

*/">
    <method name="public QAbstractItemView(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs an abstract item view with the given <i>parent</i>.</p>

*/"/>
    <method name="public final boolean alternatingRowColors()"/>
    <method name="public final void clearSelection()" doc="/**
<p>Clears all selected items. The current index will not be changed.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QModelIndex currentIndex()" doc="/**
<p>Returns the model index of the current item.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QPoint dirtyRegionOffset()" doc="/**
<p>Returns the offset of the dirty regions in the view.</p>
<p>If you use scrollDirtyRegion() and implementa paintEvent() in a subclass of QAbstractItemView, you should translate the area given by the paint event with the offset returned from this function.</p>

*/"/>
    <method name="protected final void doAutoScroll()"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemView.DragDropMode dragDropMode()"/>
    <method name="public final boolean dragDropOverwriteMode()"/>
    <method name="public final boolean dragEnabled()"/>
    <method name="protected final com.trolltech.qt.gui.QAbstractItemView.DropIndicatorPosition dropIndicatorPosition()" doc="/**
<p>Returns the position of the drop indicator in relation to the closest item.</p>

*/"/>
    <method name="public final void edit(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Starts editing the item corresponding to the given <i>index</i> if it is editable.</p>
<p>Note that this function does not change the current index. Since the current index defines the next and previous items to edit, users may find that keyboard navigation does not work as expected. To provide consistent navigation behavior, call setCurrentIndex() before this function with the same model index.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemView.EditTriggers editTriggers()"/>
    <method name="protected final void executeDelayedItemsLayout()" doc="/**
<p>Executes the scheduled layouts without waiting for the event processing to begin.</p>

*/"/>
    <method name="public final boolean hasAutoScroll()"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemView.ScrollMode horizontalScrollMode()"/>
    <method name="protected final int horizontalStepsPerItem()" doc="/**
<p>Returns the horizontal scrollbar's steps per item.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize iconSize()"/>
    <method name="public final com.trolltech.qt.gui.QWidget indexWidget(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the widget for the item at the given <i>index</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemDelegate itemDelegate(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the item delegate used by this view and model for the given <i>index</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemDelegate itemDelegate()" doc="/**
<p>Returns the item delegate used by this view and model. This is either one set with setItemDelegate(), or the default one.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemDelegate itemDelegateForColumn(int column__0)" doc="/**
<p>Returns the item delegate used by this view and model for the given <i>column</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemDelegate itemDelegateForRow(int row__0)" doc="/**
<p>Returns the item delegate used by this view and model for the given <i>row</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QAbstractItemModel model()" doc="/**
<p>Returns the model that this view is presenting.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QModelIndex rootIndex()" doc="/**
<p>Returns the model index of the model's root item. The root item is the parent item to the views toplevel items. The root can be invalid.</p>

*/"/>
    <method name="protected final void scheduleDelayedItemsLayout()" doc="/**
<p>Schedules a layout of the items in the view to be executed when the event processing starts.</p>
<p>Even if scheduleDelayedItemsLayout() is called multiple times before events are processed, the view will only do the layout once.</p>

*/"/>
    <method name="protected final void scrollDirtyRegion(int dx__0, int dy__1)" doc="/**
<p>Prepares the view for scrolling by (<i>dx</i>,<i>dy</i>) pixels by moving the dirty regions in the opposite direction. You only need to call this function if you are implementing a scrolling viewport in your view subclass.</p>
<p>If you implement scrollContentsBy() in a subclass of QAbstractItemView, call this function before you call QWidget::scroll() on the viewport. Alternatively, just call update().</p>

*/"/>
    <method name="public final void scrollToBottom()" doc="/**
<p>Scrolls the view to the bottom.</p>

*/"/>
    <method name="public final void scrollToTop()" doc="/**
<p>Scrolls the view to the top.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemView.SelectionBehavior selectionBehavior()"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemView.SelectionMode selectionMode()"/>
    <method name="public final com.trolltech.qt.gui.QItemSelectionModel selectionModel()" doc="/**
<p>Returns the current selection model.</p>

*/"/>
    <method name="public final void setAlternatingRowColors(boolean enable__0)"/>
    <method name="public final void setAutoScroll(boolean enable__0)"/>
    <method name="public final void setCurrentIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Sets the current item to be the item at <i>index</i>. Depending on the current selection mode, the item may also be selected. Note that this function also updates the starting position for any new selections the user performs.</p>
<p>To set an item as the current item without selecting it, call</p>
<p><tt>selectionModel()-&gt;setCurrentIndex(index, QItemSelectionModel::NoUpdate);</tt></p>

*/"/>
    <method name="protected final void setDirtyRegion(com.trolltech.qt.gui.QRegion region__0)" doc="/**
<p>Marks the given <i>region</i> as dirty and schedules it to be updated. You only need to call this function if you are implementing your own view subclass.</p>

*/"/>
    <method name="public final void setDragDropMode(com.trolltech.qt.gui.QAbstractItemView.DragDropMode behavior__0)"/>
    <method name="public final void setDragDropOverwriteMode(boolean overwrite__0)"/>
    <method name="public final void setDragEnabled(boolean enable__0)"/>
    <method name="public final void setDropIndicatorShown(boolean enable__0)"/>
    <method name="public final void setEditTriggers(com.trolltech.qt.gui.QAbstractItemView.EditTriggers triggers__0)"/>
    <method name="public final void setHorizontalScrollMode(com.trolltech.qt.gui.QAbstractItemView.ScrollMode mode__0)"/>
    <method name="protected final void setHorizontalStepsPerItem(int steps__0)" doc="/**
<p>Sets the horizontal scrollbar's steps per item to <i>steps</i>.</p>
<p>This is the number of steps used by the horizontal scrollbar to represent the width of an item.</p>
<p>Note that if the view has a horizontal header, the item steps will be ignored and the header section size will be used instead.</p>

*/"/>
    <method name="public final void setIconSize(com.trolltech.qt.core.QSize size__0)"/>
    <method name="public final void setIndexWidget(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.gui.QWidget widget__1)" doc="/**
<p>Sets the given <i>widget</i> on the item at the given <i>index</i>, passing the ownership of the widget to the viewport.</p>
<p>Note that the given <i>widget</i>'s autoFillBackground property must be set to true, otherwise the widget's background will be transparent, showing both the model data and the item at the given <i>index</i>.</p>
<p>This function should only be used to display static content within the visible area corresponding to an item of data. If you want to display custom dynamic content or implement a custom editor widget, subclass QItemDelegate instead.</p>

*/"/>
    <method name="public final void setItemDelegate(com.trolltech.qt.gui.QAbstractItemDelegate delegate__0)" doc="/**
<p>Sets the item delegate for this view and its model to <i>delegate</i>. This is useful if you want complete control over the editing and display of items.</p>

*/"/>
    <method name="public final void setItemDelegateForColumn(int column__0, com.trolltech.qt.gui.QAbstractItemDelegate delegate__1)" doc="/**
<p>Sets the given item <i>delegate</i> used by this view and model for the given <i>column</i>.</p>

*/"/>
    <method name="public final void setItemDelegateForRow(int row__0, com.trolltech.qt.gui.QAbstractItemDelegate delegate__1)" doc="/**
<p>Sets the given item <i>delegate</i> used by this view and model for the given <i>row</i>.</p>

*/"/>
    <method name="public final void setSelectionBehavior(com.trolltech.qt.gui.QAbstractItemView.SelectionBehavior behavior__0)"/>
    <method name="public final void setSelectionMode(com.trolltech.qt.gui.QAbstractItemView.SelectionMode mode__0)"/>
    <method name="protected final void setState(com.trolltech.qt.gui.QAbstractItemView.State state__0)" doc="/**
<p>Sets the item view's state to the given <i>state</i>.</p>

*/"/>
    <method name="public final void setTabKeyNavigation(boolean enable__0)"/>
    <method name="public final void setTextElideMode(com.trolltech.qt.core.Qt.TextElideMode mode__0)"/>
    <method name="public final void setVerticalScrollMode(com.trolltech.qt.gui.QAbstractItemView.ScrollMode mode__0)"/>
    <method name="protected final void setVerticalStepsPerItem(int steps__0)" doc="/**
<p>Sets the vertical scrollbar's steps per item to <i>steps</i>.</p>
<p>This is the number of steps used by the vertical scrollbar to represent the height of an item.</p>
<p>Note that if the view has a vertical header, the item steps will be ignored and the header section size will be used instead.</p>

*/"/>
    <method name="public final boolean showDropIndicator()"/>
    <method name="public final com.trolltech.qt.core.QSize sizeHintForIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the size hint for the item with the specified <i>index</i> or an invalid size for invalid indexes.</p>

*/"/>
    <method name="protected final void startAutoScroll()"/>
    <method name="protected final com.trolltech.qt.gui.QAbstractItemView.State state()" doc="/**
<p>Returns the item view's state.</p>

*/"/>
    <method name="protected final void stopAutoScroll()"/>
    <method name="public final boolean tabKeyNavigation()"/>
    <method name="public final com.trolltech.qt.core.Qt.TextElideMode textElideMode()"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemView.ScrollMode verticalScrollMode()"/>
    <method name="protected final int verticalStepsPerItem()" doc="/**
<p>Returns the vertical scrollbar's steps per item.</p>

*/"/>
    <method name="protected void closeEditor(com.trolltech.qt.gui.QWidget editor__0, com.trolltech.qt.gui.QAbstractItemDelegate.EndEditHint hint__1)" doc="/**
<p>Closes the given <i>editor</i>, and releases it. The <i>hint</i> is used to specify how the view should respond to the end of the editing operation. For example, the hint may indicate that the next item in the view should be opened for editing.</p>

*/"/>
    <method name="public void closePersistentEditor(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Closes the persistent editor for the item at the given <i>index</i>.</p>

*/"/>
    <method name="protected void commitData(com.trolltech.qt.gui.QWidget editor__0)" doc="/**
<p>Commit the data in the <i>editor</i> to the model.</p>

*/"/>
    <method name="protected void currentChanged(com.trolltech.qt.core.QModelIndex current__0, com.trolltech.qt.core.QModelIndex previous__1)" doc="/**
<p>This slot is called when a new item becomes the current item. The previous current item is specified by the <i>previous</i> index, and the new item by the <i>current</i> index.</p>
<p>If you want to know about changes to items see the dataChanged() signal.</p>

*/"/>
    <method name="protected void dataChanged(com.trolltech.qt.core.QModelIndex topLeft__0, com.trolltech.qt.core.QModelIndex bottomRight__1)" doc="/**
<p>This slot is called when items are changed in the model. The changed items are those from <i>topLeft</i> to <i>bottomRight</i> inclusive. If just one item is changed <i>topLeft</i> == <i>bottomRight</i>.</p>

*/"/>
    <method name="public void doItemsLayout()" doc="/**
<p>This function is intended to lay out the items in the view. The default implementatiidon just calls updateGeometries() and updates the viewport.</p>

*/"/>
    <method name="protected void dragEnterEvent(com.trolltech.qt.gui.QDragEnterEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a drag and drop operation enters the widget. If the drag is over a valid dropping place (e.g. over an item that accepts drops), the event is accepted; otherwise it is ignored.</p>

*/"/>
    <method name="protected void dragLeaveEvent(com.trolltech.qt.gui.QDragLeaveEvent event__0)" doc="/**
<p>This function is called when the item being dragged leaves the view. The <i>event</i> describes the state of the drag and drop operation.</p>

*/"/>
    <method name="protected void dragMoveEvent(com.trolltech.qt.gui.QDragMoveEvent event__0)" doc="/**
<p>This function is called continuously with the given <i>event</i> during a drag and drop operation over the widget. It can cause the view to scroll if, for example, the user drags a selection to view's right or bottom edge. In this case, the event will be accepted; otherwise it will be ignored.</p>

*/"/>
    <method name="protected void dropEvent(com.trolltech.qt.gui.QDropEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a drop event occurs over the widget. If the model accepts the even position the drop event is accepted; otherwise it is ignored.</p>

*/"/>
    <method name="protected boolean edit(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.gui.QAbstractItemView.EditTrigger trigger__1, com.trolltech.qt.core.QEvent event__2)" doc="/**
<p>Starts editing the item at <i>index</i>, creating an editor if necessary, and returns true if the view's State is now EditingState; otherwise returns false.</p>
<p>The action that caused the editing process is described by <i>trigger</i>, and the associated event is specified by <i>event</i>.</p>

*/"/>
    <method name="protected void editorDestroyed(com.trolltech.qt.core.QObject editor__0)" doc="/**
<p>This function is called when the given <i>editor</i> has been destroyed.</p>

*/"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent event__0)"/>
    <method name="protected void focusInEvent(com.trolltech.qt.gui.QFocusEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when the widget obtains the focus. By default, the event is ignored.</p>

*/"/>
    <method name="protected boolean focusNextPrevChild(boolean next__0)"/>
    <method name="protected void focusOutEvent(com.trolltech.qt.gui.QFocusEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when the widget obtains the focus. By default, the event is ignored.</p>

*/"/>
    <method name="protected abstract int horizontalOffset()" doc="/**
<p>Returns the horizontal offset of the view.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected void horizontalScrollbarAction(int action__0)"/>
    <method name="protected void horizontalScrollbarValueChanged(int value__0)"/>
    <method name="public abstract com.trolltech.qt.core.QModelIndex indexAt(com.trolltech.qt.core.QPoint point__0)" doc="/**
<p>Returns the model index of the item at the viewport coordinates <i>point</i>.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected void inputMethodEvent(com.trolltech.qt.gui.QInputMethodEvent event__0)"/>
    <method name="public java.lang.Object inputMethodQuery(com.trolltech.qt.core.Qt.InputMethodQuery query__0)"/>
    <method name="protected abstract boolean isIndexHidden(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns true if the item refered to by the given <i>index</i> is hidden in the view, otherwise returns false.</p>
<p>Hiding is a view specific feature. For example in TableView a column can be marked as hidden or a row in the TreeView.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a key event is sent to the widget. The default implementation handles basic cursor movement, e.g. Up, Down, Left, Right, Home, PageUp, and PageDown; the activated() signal is emitted if the current index is valid and the activation key is pressed (e.g. Enter or Return, depending on the platform). This function is where editing is initiated by key press, e.g. if F2 is pressed.</p>

*/"/>
    <method name="public void keyboardSearch(java.lang.String search__0)" doc="/**
<p>Moves to and selects the item best matching the string <i>search</i>. If no item is found nothing happens.</p>
<p>In the default implementation, the search is reset if <i>search</i> is empty, or the time interval since the last search has exceeded QApplication::keyboardInputInterval().</p>

*/"/>
    <method name="protected void mouseDoubleClickEvent(com.trolltech.qt.gui.QMouseEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a mouse button is double clicked inside the widget. If the double-click is on a valid item it emits the doubleClicked() signal and calls edit() on the item.</p>

*/"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a mouse move event is sent to the widget. If a selection is in progress and new items are moved over the selection is extended; if a drag is in progress it is continued.</p>

*/"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a mouse button is pressed while the cursor is inside the widget. If a valid item is pressed on it is made into the current item. This function emits the pressed() signal.</p>

*/"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a mouse button is released while the cursor is inside the widget. It will emit the clicked() signal if an item was being pressed.</p>

*/"/>
    <method name="protected abstract com.trolltech.qt.core.QModelIndex moveCursor(com.trolltech.qt.gui.QAbstractItemView.CursorAction cursorAction__0, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__1)" doc="/**
<p>Moves the cursor in the view according to the given <i>cursorAction</i> and keyboard modifiers specified by <i>modifiers</i>.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="public void openPersistentEditor(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Opens a persistent editor on the item at the given <i>index</i>. If no editor exists, the delegate will create a new editor.</p>

*/"/>
    <method name="public void reset()" doc="/**
<p>Reset the internal state of the view.</p>

*/"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a resize event is sent to the widget.</p>

*/"/>
    <method name="protected void rowsAboutToBeRemoved(com.trolltech.qt.core.QModelIndex parent__0, int start__1, int end__2)" doc="/**
<p>This slot is called when rows are about to be removed. The deleted rows are those under the given <i>parent</i> from <i>start</i> to <i>end</i> inclusive.</p>

*/"/>
    <method name="protected void rowsInserted(com.trolltech.qt.core.QModelIndex parent__0, int start__1, int end__2)" doc="/**
<p>This slot is called when rows are inserted. The new rows are those under the given <i>parent</i> from <i>start</i> to <i>end</i> inclusive. The base class implementation calls fetchMore() on the model to check for more data.</p>

*/"/>
    <method name="public abstract void scrollTo(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.gui.QAbstractItemView.ScrollHint hint__1)" doc="/**
<p>Scrolls the view if necessary to ensure that the item at <i>index</i> is visible. The view will try to position the item according to the given <i>hint</i>.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="public void selectAll()" doc="/**
<p>Selects all non-hidden items.</p>

*/"/>
    <method name="protected java.util.List&lt;com.trolltech.qt.core.QModelIndex&gt; selectedIndexes()" doc="/**
<p>This convenience function returns a list of all selected and non-hidden item indexes in the view. The list contains no duplicates, and is not sorted.</p>
<p>The default implementation does nothing.</p>

*/"/>
    <method name="protected void selectionChanged(com.trolltech.qt.gui.QItemSelection selected__0, com.trolltech.qt.gui.QItemSelection deselected__1)" doc="/**
<p>This slot is called when the selection is changed. The previous selection (which may be empty), is specified by <i>deselected</i>, and the new selection by <i>selected</i>.</p>

*/"/>
    <method name="protected com.trolltech.qt.gui.QItemSelectionModel.SelectionFlags selectionCommand(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.core.QEvent event__1)" doc="/**
<p>Returns the SelectionFlags to be used when updating a selection with to include the <i>index</i> specified. The <i>event</i> is a user input event, such as a mouse or keyboard event.</p>
<p>Reimplement this function to define your own selection behavior.</p>

*/"/>
    <method name="public void setModel(com.trolltech.qt.core.QAbstractItemModel model__0)" doc="/**
<p>Sets the <i>model</i> for the view to present.</p>
<p><b>Note:</b> This function will also create and set a new selection model, replacing any previously set with setSelectionModel(), but the old selection model will not be deleted.</p>

*/"/>
    <method name="public void setRootIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Sets the root item to the item at the given <i>index</i>.</p>

*/"/>
    <method name="protected abstract void setSelection(com.trolltech.qt.core.QRect rect__0, com.trolltech.qt.gui.QItemSelectionModel.SelectionFlags command__1)" doc="/**
<p>Applies the selection <i>flags</i> to the items in or touched by the rectangle, <i>rect</i>.</p>
<p>When implementing your own itemview setSelection should call selectionModel()-&gt;select(selection, flags) where selection is either an empty QModelIndex or a QItemSelection that contains all items that are contained in <i>rect</i>.</p>

*/"/>
    <method name="public void setSelectionModel(com.trolltech.qt.gui.QItemSelectionModel selectionModel__0)" doc="/**
<p>Sets the current selection model to the given <i>selectionModel</i>.</p>
<p>Note that, if you call setModel() after this function, the given <i>selectionModel</i> will be replaced by a one created by the view.</p>

*/"/>
    <method name="public int sizeHintForColumn(int column__0)" doc="/**
<p>Returns the width size hint for the specified <i>column</i> or -1 if there is no model.</p>
<p>This function is used in views with a horizontal header to find the size hint for a header section based on the contents of the given <i>column</i>.</p>

*/"/>
    <method name="public int sizeHintForRow(int row__0)" doc="/**
<p>Returns the height size hint for the specified <i>row</i> or -1 if there is no model.</p>
<p>The returned height is calculated using the size hints of the given <i>row</i>'s items, i.e. the returned value is the maximum height among the items. Note that to control the height of a row, you must reimplement the QAbstractItemDelegate::sizeHint() function.</p>
<p>This function is used in views with a vertical header to find the size hint for a header section based on the contents of the given <i>row</i>.</p>

*/"/>
    <method name="protected void startDrag(com.trolltech.qt.core.Qt.DropActions supportedActions__0)" doc="/**
<p>Starts a drag by calling drag-&gt;start() using the given <i>supportedActions</i>.</p>

*/"/>
    <method name="protected void timerEvent(com.trolltech.qt.core.QTimerEvent event__0)" doc="/**
<p>This function is called with the given <i>event</i> when a timer event is sent to the widget.</p>

*/"/>
    <method name="protected void updateEditorData()"/>
    <method name="protected void updateEditorGeometries()"/>
    <method name="protected void updateGeometries()"/>
    <method name="protected abstract int verticalOffset()" doc="/**
<p>Returns the vertical offset of the view.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected void verticalScrollbarAction(int action__0)"/>
    <method name="protected void verticalScrollbarValueChanged(int value__0)"/>
    <method name="protected com.trolltech.qt.gui.QStyleOptionViewItem viewOptions()" doc="/**
<p>Returns a QStyleOptionViewItem structure populated with the view's palette, font, state, alignments etc.</p>

*/"/>
    <method name="protected boolean viewportEvent(com.trolltech.qt.core.QEvent event__0)" doc="/**
<p>This function is used to handle tool tips, and What's This? mode, if the given <i>event</i> is a QEvent::ToolTip,or a QEvent::WhatsThis. It passes all other events on to its base class viewportEvent() handler.</p>

*/"/>
    <method name="public abstract com.trolltech.qt.core.QRect visualRect(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the rectangle on the viewport occupied by the item at <i>index</i>.</p>
<p>If your item is displayed in several areas then visualRect should return the primary area that contains index and not the complete area that index might encompasses, touch or cause drawing.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected abstract com.trolltech.qt.gui.QRegion visualRegionForSelection(com.trolltech.qt.gui.QItemSelection selection__0)" doc="/**
<p>Returns the region from the viewport of the items in the given <i>selection</i>.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <enum name="DragDropMode" doc="/**
<p>Describes the various drag and drop events the view can act upon. By default the view does not support dragging or dropping (<tt>NoDragDrop</tt>).</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Does not support dragging or dropping.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The view supports dragging of its own items</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The view accepts drops</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The view supports both draging and dropping</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>only accepts move operations only from itself.</td></tr>
</table></p>

*/"/>
    <enum name="SelectionBehavior" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Selecting single items.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Selecting only rows.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Selecting only columns.</td></tr>
</table></p>

*/"/>
    <enum name="EditTrigger" doc="/**
<p>This enum describes actions which will initiate item editing.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>No editing possible.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Editing start whenever current item changes.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Editing starts when an item is double clicked.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Editing starts when clicking on an already selected item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Editing starts when the platform edit key has been pressed over an item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Editing starts when any key is pressed over an item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Editing starts for all above actions.</td></tr>
</table></p>

*/"/>
    <enum name="ScrollMode" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The view will scroll the contents one item at a time.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The view will scroll the contents one pixel at a time.</td></tr>
</table></p>

*/"/>
    <enum name="CursorAction" doc="/**
<p>This enum describes the different ways to navigate between items,</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the item above the current item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the item below the current item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the item left of the current item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the item right of the current item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the top-left corner item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the bottom-right corner item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move one page up above the current item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move one page down below the current item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the item after the current item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Move to the item before the current item.</td></tr>
</table></p>

*/"/>
    <enum name="DropIndicatorPosition" doc="/**
<p>This enum indicates the position of the drop indicator in relation to the index at the current mouse position:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The item will be dropped on the index.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The item will be dropped above the index.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The item will be dropped below the index.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The item will be dropped onto a region of the viewport with no items. The way each view handles items dropped onto the viewport depends on the behavior of the underlying model in use.</td></tr>
</table></p>

*/"/>
    <enum name="ScrollHint" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Scroll to ensure that the item is visible.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Scroll to position the item at the top of the viewport.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Scroll to position the item at the bottom of the viewport.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Scroll to position the item at the center of the viewport.</td></tr>
</table></p>

*/"/>
    <enum name="SelectionMode" doc="/**
<p>This enum indicates how the view responds to user selections:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Items cannot be selected.</td></tr>
</table></p>
<p>The most commonly used modes are SingleSelection and ExtendedSelection.</p>

*/"/>
    <enum name="State" doc="/**
<p>Describes the different states the view can be in. This is usually only interesting when reimplementing your own view.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The is the default state.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The user is dragging items.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The user is selecting items.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The user is editing an item in a widget editor.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The user is opening a branch of items.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The user is closing a branch of items.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The item view is performing an animation.</td></tr>
</table></p>

*/"/>
</class>
