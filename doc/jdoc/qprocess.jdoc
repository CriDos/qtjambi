<class name="QProcess" doc="/**
<p>The QProcess class is used to start external programs and to communicate with them.</p>
<p>To start a process, pass the name and command line arguments of the program you want to run as arguments to start(). For example:</p>
<pre>        QObject *parent;
        ...
        QString program = &quot;./path/to/Qt/examples/widgets/analogclock&quot;;
        QStringList arguments;
        arguments &lt;&lt; &quot;-style&quot; &lt;&lt; &quot;motif&quot;;

        QProcess *myProcess = new QProcess(parent);
        myProcess-&gt;start(program, arguments);</pre>
<p>QProcess then enters the Starting state, and when the program has started, QProcess enters the Running state and emits started().</p>
<p>QProcess allows you to treat a process as a sequential I/O device. You can write to and read from the process just as you would access a network connection using QTcpSocket. You can then write to the process's standard input by calling write(), and read the standard output by calling read(), readLine(), and getChar(). Because it inherits QIODevice, QProcess can also be used as an input source for QXmlReader, or for generating data to be uploaded using QFtp.</p>
<p>When the process exits, QProcess reenters the NotRunning state (the initial state), and emits finished().</p>
<p>The finished() signal provides the exit code and exit status of the process as arguments, and you can also call exitCode() to obtain the exit code of the last process that finished, and exitStatus() to obtain its exit status. If an error occurs at any point in time, QProcess will emit the error() signal. You can also call error() to find the type of error that occurred last, and state() to find the current process state.</p>
<p>Processes have two predefined output channels: The standard output channel (<tt>stdout</tt>) supplies regular console output, and the standard error channel (<tt>stderr</tt>) usually supplies the errors that are printed by the process. These channels represent two separate streams of data. You can toggle between them by calling setReadChannel(). QProcess emits readyRead() when data is available on the current read channel. It also emits readyReadStandardOutput() when new standard output data is available, and when new standard error data is available, readyReadStandardError() is emitted. Instead of calling read(), readLine(), or getChar(), you can explicitly read all data from either of the two channels by calling readAllStandardOutput() or readAllStandardError().</p>
<p>The terminology for the channels can be misleading. Be aware that the process's output channels correspond to QProcess's <i>read</i> channels, whereas the process's input channels correspond to QProcess's <i>write</i> channels. This is because what we read using QProcess is the process's output, and what we write becomes the process's input.</p>
<p>QProcess can merge the two output channels, so that standard output and standard error data from the running process both use the standard output channel. Call setProcessChannelMode() with MergedChannels before starting the process to activative this feature. You also have the option of forwarding the output of the running process to the calling, main process, by passing ForwardedChannels as the argument.</p>
<p>Certain processes need special environment settings in order to operate. You can set environment variables for your process by calling setEnvironment(). To set a working directory, call setWorkingDirectory(). By default, processes are run in the current working directory of the calling process.</p>
<p>QProcess provides a set of functions which allow it to be used without an event loop, by suspending the calling thread until certain signals are emitted:</p>
<ul>
<li>waitForStarted() blocks until the process has started.</li>
<li>waitForReadyRead() blocks until new data is available for reading on the current read channel.</li>
<li>waitForBytesWritten() blocks until one payload of data has been written to the process.</li>
<li>waitForFinished() blocks until the process has finished.</li>
</ul>
<p>Calling these functions from the main thread (the thread that calls QApplication::exec()) may cause your user interface to freeze.</p>
<p>The following example runs <tt>gzip</tt> to compress the string &quot;Qt rocks!&quot;, without an event loop:</p>
<pre>        QProcess gzip;
        gzip.start(&quot;gzip&quot;, QStringList() &lt;&lt; &quot;-c&quot;);
        if (!gzip.waitForStarted())
            return false;

        gzip.write(&quot;Qt rocks!&quot;);
        gzip.closeWriteChannel();

        if (!gzip.waitForFinished())
            return false;

        QByteArray result = gzip.readAll();</pre>

*/">
    <method name="public QProcess(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a QProcess object with the given <i>parent</i>.</p>

*/"/>
    <method name="public final void closeReadChannel(com.trolltech.qt.core.QProcess.ProcessChannel channel__0)" doc="/**
<p>Closes the read channel <i>channel</i>. After calling this function, QProcess will no longer receive data on the channel. Any data that has already been received is still available for reading.</p>
<p>Call this function to save memory, if you are not interested in the output of the process.</p>

*/"/>
    <method name="public final void closeWriteChannel()" doc="/**
<p>Schedules the write channel of QProcess to be closed. The channel will close once all data has been written to the process. After calling this function, any attempts to write to the process will fail.</p>
<p>Closing the write channel is necessary for programs that read input data until the channel has been closed. For example, the program &quot;more&quot; is used to display text data in a console on both Unix and Windows. But it will not display the text data until QProcess's write channel has been closed. Example:</p>
<pre>    QProcess more;
    more.start(&quot;more&quot;);
    more.write(&quot;Text to display&quot;);
    more.closeWriteChannel();
<span class=&quote;comment&quote;>    // QProcess will emit readyRead() once &quot;more&quot; starts printing</span></pre>
<p>The write channel is implicitly opened when start() is called.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; environment()" doc="/**
<p>Returns the environment that QProcess will use when starting a process, or an empty QStringList if no environment has been set using setEnvironment(). If no environment has been set, the environment of the calling process will be used.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QProcess.ProcessError error()" doc="/**
<p>Returns the type of error that occurred last.</p>

*/"/>
    <method name="public final int exitCode()" doc="/**
<p>Returns the exit code of the last process that finished.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QProcess.ExitStatus exitStatus()" doc="/**
<p>Returns the exit status of the last process that finished.</p>
<p>On Windows, if the process was terminated with TerminateProcess() from another application this function will still return NormalExit unless the exit code is less than 0.</p>

*/"/>
    <method name="public final void kill()" doc="/**
<p>Kills the current process, causing it to exit immediately.</p>
<p>On Windows, kill() uses TerminateProcess, and on Unix and Mac OS X, the SIGKILL signal is sent to the process.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QProcess.ProcessChannelMode processChannelMode()" doc="/**
<p>Returns the channel mode of the QProcess standard output and standard error channels.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QByteArray readAllStandardError()" doc="/**
<p>Regardless of the current read channel, this function returns all data available from the standard error of the process as a QByteArray.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QByteArray readAllStandardOutput()" doc="/**
<p>Regardless of the current read channel, this function returns all data available from the standard output of the process as a QByteArray.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QProcess.ProcessChannel readChannel()" doc="/**
<p>Returns the current read channel of the QProcess.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QProcess.ProcessChannelMode readChannelMode()" doc="/**
<p>Returns the read channel mode of the QProcess. This function is equivalent to processChannelMode()</p>

*/"/>
    <method name="public final void setEnvironment(java.util.List&lt;java.lang.String&gt; environment__0)" doc="/**
<p>Sets the environment that QProcess will use when starting a process to the <i>environment</i> specified which consists of a list of key=value pairs.</p>
<p>For example, the following code adds the <tt>C:\\BIN</tt> directory to the list of executable paths (<tt>PATHS</tt>) on Windows:</p>
<pre>    QProcess process;
    QStringList env = QProcess::systemEnvironment();
    env &lt;&lt; &quot;TMPDIR=C:\\MyApp\\temp&quot;; <span class=&quote;comment&quote;>// Add an environment variable</span>
    env.replaceInStrings(QRegExp(&quot;^PATH=(.*)&quot;, Qt::CaseInsensitive), &quot;PATH=\\1;C:\\Bin&quot;);
    process.setEnvironment(env);
    process.start(&quot;myapp&quot;);</pre>

*/"/>
    <method name="public final void setProcessChannelMode(com.trolltech.qt.core.QProcess.ProcessChannelMode mode__0)" doc="/**
<p>Sets the channel mode of the QProcess standard output and standard error channels to the <i>mode</i> specified. This mode will be used the next time start() is called. For example:</p>
<pre>    QProcess builder;
    builder.setProcessChannelMode(QProcess::MergedChannels);
    builder.start(&quot;make&quot;, QStringList() &lt;&lt; &quot;-j2&quot;);

    if (!builder.waitForFinished())
        qDebug() &lt;&lt; &quot;Make failed:&quot; &lt;&lt; builder.errorString();
    else
        qDebug() &lt;&lt; &quot;Make output:&quot; &lt;&lt; builder.readAll();</pre>

*/"/>
    <method name="protected final void setProcessState(com.trolltech.qt.core.QProcess.ProcessState state__0)" doc="/**
<p>Sets the current state of the QProcess to the <i>state</i> specified.</p>

*/"/>
    <method name="public final void setReadChannel(com.trolltech.qt.core.QProcess.ProcessChannel channel__0)" doc="/**
<p>Sets the current read channel of the QProcess to the given <i>channel</i>. The current input channel is used by the functions read(), readAll(), readLine(), and getChar(). It also determines which channel triggers QProcess to emit readyRead().</p>
<p>Changing the read channel will clear the unget buffer.</p>

*/"/>
    <method name="public final void setReadChannelMode(com.trolltech.qt.core.QProcess.ProcessChannelMode mode__0)" doc="/**
<p>Use setProcessChannelMode(<i>mode</i>) instead.</p>

*/"/>
    <method name="public final void setStandardErrorFile(java.lang.String fileName__0, com.trolltech.qt.core.QIODevice.OpenMode mode__1)" doc="/**
<p>Redirects the process' standard error to the file <i>fileName</i>. When the redirection is in place, the standard error read channel is closed: reading from it using read() will always fail, as will readAllStandardError(). The file will be appended to if <i>mode</i> is Append, otherwise, it will be truncated.</p>
<p>See setStandardOutputFile() for more information on how the file is opened.</p>
<p>Note: if setProcessChannelMode() was called with an argument of QProcess::MergedChannels, this function has no effect.</p>

*/"/>
    <method name="public final void setStandardInputFile(java.lang.String fileName__0)" doc="/**
<p>Redirects the process' standard input to the file indicated by <i>fileName</i>. When an input redirection is in place, the QProcess object will be in read-only mode (calling write() will result in error).</p>
<p>If the file <i>fileName</i> does not exist at the moment start() is called or is not readable, starting the process will fail.</p>
<p>Calling setStandardInputFile() after the process has started has no effect.</p>

*/"/>
    <method name="public final void setStandardOutputFile(java.lang.String fileName__0, com.trolltech.qt.core.QIODevice.OpenMode mode__1)" doc="/**
<p>Redirects the process' standard output to the file <i>fileName</i>. When the redirection is in place, the standard output read channel is closed: reading from it using read() will always fail, as will readAllStandardOutput().</p>
<p>If the file <i>fileName</i> doesn't exist at the moment start() is called, it will be created. If it cannot be created, the starting will fail.</p>
<p>If the file exists and <i>mode</i> is QIODevice::Truncate, the file will be truncated. Otherwise (if <i>mode</i> is QIODevice::Append), the file will be appended to.</p>
<p>Calling setStandardOutputFile() after the process has started has no effect.</p>

*/"/>
    <method name="public final void setStandardOutputProcess(com.trolltech.qt.core.QProcess destination__0)" doc="/**
<p>Pipes the standard output stream of this process to the <i>destination</i> process' standard input.</p>
<p>The following shell command:</p>
<pre>    command1 | command2</pre>
<p>Can be accomplished with QProcesses with the following code:</p>
<pre>    QProcess process1;
    QProcess process2;

    process1.setStandardOutputProcess(process2);

    process1.start(&quot;command1&quot;);
    process2.start(&quot;command2&quot;);</pre>

*/"/>
    <method name="public final void setWorkingDirectory(java.lang.String dir__0)" doc="/**
<p>Sets the working directory to <i>dir</i>. QProcess will start the process in this directory. The default behavior is to start the process in the working directory of the calling process.</p>

*/"/>
    <method name="public final void start(java.lang.String program__0, com.trolltech.qt.core.QIODevice.OpenMode mode__1)" doc="/**
<p>Starts the program <i>program</i> in a new process. <i>program</i> is a single string of text containing both the program name and its arguments. The arguments are separated by one or more spaces. For example:</p>
<pre>    QProcess process;
    process.start(&quot;del /s *.txt&quot;);
<span class=&quote;comment&quote;>    // same as process.start(&quot;del&quot;, QStringList() &lt;&lt; &quot;/s&quot; &lt;&lt; &quot;*.txt&quot;);</span>
    ...</pre>
<p>The <i>program</i> string can also contain quotes, to ensure that arguments containing spaces are correctly supplied to the new process. For example:</p>
<pre>    QProcess process;
    process.start(&quot;dir \&quot;My Documents\&quot;&quot;);</pre>
<p>Note that, on Windows, quotes need to be both escaped and quoted. For example, the above code would be specified in the following way to ensure that <tt>&quot;My Documents&quot;</tt> is used as the argument to the <tt>dir</tt> executable:</p>
<pre>    QProcess process;
    process.start(&quot;dir \&quot;\&quot;\&quot;My Documents\&quot;\&quot;\&quot;&quot;);</pre>
<p>The OpenMode is set to <i>mode</i>.</p>

*/"/>
    <method name="public final void start(java.lang.String program__0, java.util.List&lt;java.lang.String&gt; arguments__1, com.trolltech.qt.core.QIODevice.OpenMode mode__2)" doc="/**
<p>Starts the program <i>program</i> in a new process, passing the command line arguments in <i>arguments</i>. The OpenMode is set to <i>mode</i>. QProcess will immediately enter the Starting state. If the process starts successfully, QProcess will emit started(); otherwise, error() will be emitted.</p>
<p>On Windows, arguments that contain spaces are wrapped in quotes.</p>
<p>Note: processes are started asynchronously, which means the started() and error() signals may be delayed. Call waitForStarted() to make sure the process has started (or has failed to start) and those signals have been emitted.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QProcess.ProcessState state()" doc="/**
<p>Returns the current state of the process.</p>

*/"/>
    <method name="public final void terminate()" doc="/**
<p>Attempts to terminate the process.</p>
<p>The process may not exit as a result of calling this function (it is given the chance to prompt the user for any unsaved files, etc).</p>
<p>On Windows, terminate() posts a WM_CLOSE message to the process, and on Unix and Mac OS X the SIGTERM signal is sent.</p>

*/"/>
    <method name="public final boolean waitForFinished(int msecs__0)" doc="/**
<p>Blocks until the process has finished and the finished() signal has been emitted, or until <i>msecs</i> milliseconds have passed.</p>
<p>Returns true if the process finished; otherwise returns false (if the operation timed out or if an error occurred).</p>
<p>This function can operate without an event loop. It is useful when writing non-GUI applications and when performing I/O operations in a non-GUI thread.</p>
<p><b>Warning:</b> Calling this function from the main (GUI) thread might cause your user interface to freeze.</p>
<p>If msecs is -1, this function will not time out.</p>

*/"/>
    <method name="public final boolean waitForStarted(int msecs__0)" doc="/**
<p>Blocks until the process has started and the started() signal has been emitted, or until <i>msecs</i> milliseconds have passed.</p>
<p>Returns true if the process was started successfully; otherwise returns false (if the operation timed out or if an error occurred).</p>
<p>This function can operate without an event loop. It is useful when writing non-GUI applications and when performing I/O operations in a non-GUI thread.</p>
<p><b>Warning:</b> Calling this function from the main (GUI) thread might cause your user interface to freeze.</p>
<p>If msecs is -1, this function will not time out.</p>

*/"/>
    <method name="public final java.lang.String workingDirectory()" doc="/**
<p>Returns the working directory that the QProcess will enter before the program has started.</p>

*/"/>
    <method name="public boolean atEnd()" doc="/**
<p>Returns true if the process is not running, and no more data is available for reading; otherwise returns false.</p>

*/"/>
    <method name="public long bytesAvailable()"/>
    <method name="public long bytesToWrite()"/>
    <method name="public boolean canReadLine()" doc="/**
<p>This function operates on the current read channel.</p>

*/"/>
    <method name="public void close()" doc="/**
<p>Closes all communication with the process. After calling this function, QProcess will no longer emit readyRead(), and data can no longer be read or written.</p>

*/"/>
    <method name="public boolean isSequential()"/>
    <method name="protected long readData(com.trolltech.qt.QNativePointer data__0, long maxlen__1)" doc="/**
<p>Reads up to <i>maxSize</i> bytes from the device into <i>data</i>, and returns the number of bytes read or -1 if an error occurred.</p>
<p>This function is called by QIODevice. Reimplement this function when creating a subclass of QIODevice.</p>

*/"/>
    <method name="protected void setupChildProcess()" doc="/**
<p>This function is called in the child process context just before the program is executed on Unix or Mac OS X (i.e., after <i>fork()</i>, but before <i>execve()</i>). Reimplement this function to do last minute initialization of the child process. Example:</p>
<pre>    class SandboxProcess : public QProcess
    {
        ...
     protected:
         void setupChildProcess();
        ...
    };

    void SandboxProcess::setupChildProcess()
    {
        <span class=&quote;comment&quote;>// Drop all privileges in the child process, and enter</span>
        <span class=&quote;comment&quote;>// a chroot jail.</span>
    #if defined Q_OS_UNIX
        ::setgroups(0, 0);
        ::chroot(&quot;/etc/safe&quot;);
        ::chdir(&quot;/&quot;);
        ::setgid(safeGid);
        ::setuid(safeUid);
        ::umask(0);
    #endif
    }</pre>
<p><b>Warning:</b> This function is called by QProcess on Unix and Mac OS X only. On Windows, it is not called.</p>

*/"/>
    <method name="public boolean waitForBytesWritten(int msecs__0)"/>
    <method name="public boolean waitForReadyRead(int msecs__0)"/>
    <method name="protected long writeData(com.trolltech.qt.QNativePointer data__0, long len__1)" doc="/**
<p>Writes up to <i>maxSize</i> bytes from <i>data</i> to the device. Returns the number of bytes written, or -1 if an error occurred.</p>
<p>This function is called by QIODevice. Reimplement this function when creating a subclass of QIODevice.</p>

*/"/>
    <method name="public native static int execute(java.lang.String program__0, java.util.List&lt;java.lang.String&gt; arguments__1)" doc="/**
<p>Starts the program <i>program</i> with the arguments <i>arguments</i> in a new process, waits for it to finish, and then returns the exit code of the process. Any data the new process writes to the console is forwarded to the calling process.</p>
<p>The environment and working directory are inherited by the calling process.</p>
<p>On Windows, arguments that contain spaces are wrapped in quotes.</p>

*/"/>
    <method name="public native static int execute(java.lang.String program__0)" doc="/**
<p>Starts the program <i>program</i> in a new process. <i>program</i> is a single string of text containing both the program name and its arguments. The arguments are separated by one or more spaces.</p>

*/"/>
    <method name="public native static boolean startDetached(java.lang.String program__0)" doc="/**
<p>Starts the program <i>program</i> in a new process. <i>program</i> is a single string of text containing both the program name and its arguments. The arguments are separated by one or more spaces.</p>
<p>The <i>program</i> string can also contain quotes, to ensure that arguments containing spaces are correctly supplied to the new process.</p>

*/"/>
    <method name="public native static boolean startDetached(java.lang.String program__0, java.util.List&lt;java.lang.String&gt; arguments__1)" doc="/**
<p>Starts the program <i>program</i> with the arguments <i>arguments</i> in a new process, and detaches from it. Returns true on success; otherwise returns false. If the calling process exits, the detached process will continue to live.</p>
<p>On Unix, the started process will run in its own session and act like a daemon. On Windows, it will run as a regular standalone process.</p>
<p>On Windows, arguments that contain spaces are wrapped in quotes.</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; systemEnvironment()" doc="/**
<p>Returns the environment of the calling process as a list of key=value pairs. Example:</p>
<pre>    QStringList environment = QProcess::systemEnvironment();
<span class=&quote;comment&quote;>    // environment = {&quot;PATH=/usr/bin:/usr/local/bin&quot;,</span>
                      &quot;USER=greg&quot;, &quot;HOME=/home/greg&quot;}</pre>

*/"/>
    <enum name="ProcessError" doc="/**
<p>This enum describes the different types of errors that are reported by QProcess.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The process failed to start. Either the invoked program is missing, or you may have insufficient permissions to invoke the program.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The process crashed some time after starting successfully.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The last waitFor...() function timed out. The state of QProcess is unchanged, and you can try calling waitFor...() again.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An error occurred when attempting to write to the process. For example, the process may not be running, or it may have closed its input channel.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An error occurred when attempting to read from the process. For example, the process may not be running.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An unknown error occurred. This is the default return value of error().</td></tr>
</table></p>

*/"/>
    <enum name="ProcessChannelMode" doc="/**
<p>This enum describes the process channel modes of QProcess. Pass one of these values to setProcessChannelMode() to set the current read channel mode.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QProcess manages the output of the running process, keeping standard output and standard error data in separate internal buffers. You can select the QProcess's current read channel by calling setReadChannel(). This is the default channel mode of QProcess.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QProcess merges the output of the running process into the standard output channel (<tt>stdout</tt>). The standard error channel (<tt>stderr</tt>) will not receive any data. The standard output and standard error data of the running process are interleaved.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>QProcess forwards the output of the running process onto the main process. Anything the child process writes to its standard output and standard error will be written to the standard output and standard error of the main process.</td></tr>
</table></p>

*/"/>
    <enum name="ProcessChannel" doc="/**
<p>This enum describes the process channels used by the running process. Pass one of these values to setReadChannel() to set the current read channel of QProcess.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The standard output (stdout) of the running process.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The standard error (stderr) of the running process.</td></tr>
</table></p>

*/"/>
    <enum name="ProcessState" doc="/**
<p>This enum describes the different states of QProcess.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The process is not running.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The process is starting, but the program has not yet been invoked.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The process is running and is ready for reading and writing.</td></tr>
</table></p>

*/"/>
    <enum name="ExitStatus" doc="/**
<p>This enum describes the different exit statuses of QProcess.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The process exited normally.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The process crashed.</td></tr>
</table></p>

*/"/>
</class>
