<class name="QListView" doc="/**
<p>The QListView class provides a list or icon view onto a model.</p>
<p>A QListView presents items stored in a model, either as a simple non-hierarchical list, or as a collection of icons. This class is used to provide lists and icon views that were previously provided by the <tt>QListBox</tt> and <tt>QIconView</tt> classes, but using the more flexible approach provided by Qt's model/view architecture.</p>
<p>The QListView class is one of the Model/View Classes and is part of Qt's model/view framework.</p>
<p>This view does not display horizontal or vertical headers; to display a list of items with a horizontal header, use QTreeView instead.</p>
<p>QListView implements the interfaces defined by the QAbstractItemView class to allow it to display data provided by models derived from the QAbstractItemModel class.</p>
<p>Items in a list view can be displayed using one of two view modes: In ListMode, the items are displayed in the form of a simple list; in IconMode, the list view takes the form of an <i>icon view</i> in which the items are displayed with icons like files in a file manager. By default, the list view is in ListMode. To change the view mode, use the setViewMode() function, and to determine the current view mode, use viewMode().</p>
<p>Items in these views are laid out in the direction specified by the flow() of the list view. The items may be fixed in place, or allowed to move, depending on the view's movement() state.</p>
<p>If the items in the model cannot be completely laid out in the direction of flow, they can be wrapped at the boundary of the view widget; this depends on isWrapping(). This property is useful when the items are being represented by an icon view.</p>
<p>The resizeMode() and layoutMode() govern how and when the items are laid out. Items are spaced according to their spacing(), and can exist within a notional grid of size specified by gridSize(). The items can be rendered as large or small icons depending on their iconSize().</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image windowsxp-listview.png]</font></td><td><font color=&quote;red&quote;>[Missing image macintosh-listview.png]</font></td><td><font color=&quote;red&quote;>[Missing image plastique-listview.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>A Windows XP style list view.</td><td>A Macintosh style list view.</td><td>A Plastique style list view.</td></tr>
</table></p>

*/">
    <method name="public QListView(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Creates a new QListView with the given <i>parent</i> to view a model. Use setModel() to set the model.</p>

*/"/>
    <method name="public final int batchSize()"/>
    <method name="public final void clearPropertyFlags()" doc="/**
<p>Clears the QListView-specific property flags. See viewMode.</p>
<p>Properties inherited from QAbstractItemView are not covered by the property flags. Specifically, dragEnabled and acceptDrops are computed by QListView when calling setMovement() or setViewMode().</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QSize contentsSize()"/>
    <method name="public final com.trolltech.qt.gui.QListView.Flow flow()"/>
    <method name="public final com.trolltech.qt.core.QSize gridSize()"/>
    <method name="protected final void internalDrag(com.trolltech.qt.core.Qt.DropActions supportedActions__0)" doc="/**
<p>Called whenever the user starts dragging items and the items are movable, enabling internal dragging and dropping of items.</p>

*/"/>
    <method name="protected final void internalDrop(com.trolltech.qt.gui.QDropEvent e__0)" doc="/**
<p>Called whenever items from the view is dropped on the viewport. The <i>event</i> provides additional information.</p>

*/"/>
    <method name="public final boolean isRowHidden(int row__0)" doc="/**
<p>Returns true if the <i>row</i> is hidden; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isWrapping()"/>
    <method name="public final com.trolltech.qt.gui.QListView.LayoutMode layoutMode()"/>
    <method name="public final int modelColumn()"/>
    <method name="public final com.trolltech.qt.gui.QListView.Movement movement()"/>
    <method name="protected final com.trolltech.qt.core.QRect rectForIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the rectangle of the item at position <i>index</i> in the model. The rectangle is in contents coordinates.</p>

*/"/>
    <method name="protected final void resizeContents(int width__0, int height__1)" doc="/**
<p>Resize the internal contents to <i>width</i> and <i>height</i> and set the scrollbar ranges accordingly.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QListView.ResizeMode resizeMode()"/>
    <method name="public final void setBatchSize(int batchSize__0)"/>
    <method name="public final void setFlow(com.trolltech.qt.gui.QListView.Flow flow__0)"/>
    <method name="public final void setGridSize(com.trolltech.qt.core.QSize size__0)"/>
    <method name="public final void setLayoutMode(com.trolltech.qt.gui.QListView.LayoutMode mode__0)"/>
    <method name="public final void setModelColumn(int column__0)"/>
    <method name="public final void setMovement(com.trolltech.qt.gui.QListView.Movement movement__0)"/>
    <method name="protected final void setPositionForIndex(com.trolltech.qt.core.QPoint position__0, com.trolltech.qt.core.QModelIndex index__1)" doc="/**
<p>Sets the contents position of the item at <i>index</i> in the model to the given <i>position</i>. If the list view's movement mode is Static, this function will have no effect.</p>

*/"/>
    <method name="public final void setResizeMode(com.trolltech.qt.gui.QListView.ResizeMode mode__0)"/>
    <method name="public final void setRowHidden(int row__0, boolean hide__1)" doc="/**
<p>If <i>hide</i> is true, the given <i>row</i> will be hidden; otherwise the <i>row</i> will be shown.</p>

*/"/>
    <method name="public final void setSpacing(int space__0)"/>
    <method name="public final void setUniformItemSizes(boolean enable__0)"/>
    <method name="public final void setViewMode(com.trolltech.qt.gui.QListView.ViewMode mode__0)"/>
    <method name="public final void setWordWrap(boolean on__0)"/>
    <method name="public final void setWrapping(boolean enable__0)"/>
    <method name="public final int spacing()"/>
    <method name="public final boolean uniformItemSizes()"/>
    <method name="public final com.trolltech.qt.gui.QListView.ViewMode viewMode()"/>
    <method name="public final boolean wordWrap()"/>
    <method name="protected void dataChanged(com.trolltech.qt.core.QModelIndex topLeft__0, com.trolltech.qt.core.QModelIndex bottomRight__1)"/>
    <method name="public void doItemsLayout()" doc="/**
<p>Layout the items according to the flow and wrapping properties.</p>

*/"/>
    <method name="protected void dragLeaveEvent(com.trolltech.qt.gui.QDragLeaveEvent e__0)"/>
    <method name="protected void dragMoveEvent(com.trolltech.qt.gui.QDragMoveEvent e__0)"/>
    <method name="protected void dropEvent(com.trolltech.qt.gui.QDropEvent e__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected int horizontalOffset()"/>
    <method name="public com.trolltech.qt.core.QModelIndex indexAt(com.trolltech.qt.core.QPoint p__0)"/>
    <method name="protected boolean isIndexHidden(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected com.trolltech.qt.core.QModelIndex moveCursor(com.trolltech.qt.gui.QAbstractItemView.CursorAction cursorAction__0, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__1)" doc="/**
<p>Moves the cursor in the view according to the given <i>cursorAction</i> and keyboard modifiers specified by <i>modifiers</i>.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent e__0)"/>
    <method name="public void reset()"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent e__0)"/>
    <method name="protected void rowsAboutToBeRemoved(com.trolltech.qt.core.QModelIndex parent__0, int start__1, int end__2)"/>
    <method name="protected void rowsInserted(com.trolltech.qt.core.QModelIndex parent__0, int start__1, int end__2)"/>
    <method name="protected void scrollContentsBy(int dx__0, int dy__1)" doc="/**
<p>Scroll the view contents by <i>dx</i> and <i>dy</i>.</p>

*/"/>
    <method name="public void scrollTo(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.gui.QAbstractItemView.ScrollHint hint__1)" doc="/**
<p>Scrolls the view if necessary to ensure that the item at <i>index</i> is visible. The view will try to position the item according to the given <i>hint</i>.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected java.util.List&lt;com.trolltech.qt.core.QModelIndex&gt; selectedIndexes()"/>
    <method name="public void setRootIndex(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="protected void setSelection(com.trolltech.qt.core.QRect rect__0, com.trolltech.qt.gui.QItemSelectionModel.SelectionFlags command__1)" doc="/**
<p>Applies the selection <i>flags</i> to the items in or touched by the rectangle, <i>rect</i>.</p>
<p>When implementing your own itemview setSelection should call selectionModel()-&gt;select(selection, flags) where selection is either an empty QModelIndex or a QItemSelection that contains all items that are contained in <i>rect</i>.</p>

*/"/>
    <method name="protected void startDrag(com.trolltech.qt.core.Qt.DropActions supportedActions__0)" doc="/**
<p>Starts a drag by calling drag-&gt;start() using the given <i>supportedActions</i>.</p>

*/"/>
    <method name="protected void timerEvent(com.trolltech.qt.core.QTimerEvent e__0)"/>
    <method name="protected void updateGeometries()"/>
    <method name="protected int verticalOffset()"/>
    <method name="protected com.trolltech.qt.gui.QStyleOptionViewItem viewOptions()"/>
    <method name="public com.trolltech.qt.core.QRect visualRect(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="protected com.trolltech.qt.gui.QRegion visualRegionForSelection(com.trolltech.qt.gui.QItemSelection selection__0)"/>
    <enum name="ResizeMode" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items will only be laid out the first time the view is shown.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items will be laid out every time the view is resized.</td></tr>
</table></p>

*/"/>
    <enum name="LayoutMode" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items are laid out all at once.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items are laid out in batches of batchSize items.</td></tr>
</table></p>

*/"/>
    <enum name="ViewMode" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items are layed out using TopToBottom flow, with Small size and Static movement</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items are layed out using LeftToRight flow, with Large size and Free movement</td></tr>
</table></p>

*/"/>
    <enum name="Flow" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items are laid out in the view from the left to the right.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items are laid out in the view from the top to the bottom.</td></tr>
</table></p>

*/"/>
    <enum name="Movement" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items cannot be moved by the user.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items can be moved freely by the user.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The items snap to the specified grid when moved; see setGridSize().</td></tr>
</table></p>

*/"/>
</class>
