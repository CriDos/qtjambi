<class name="QComboBox" doc="/**
<p>The QComboBox widget is a combined button and popup list.</p>
<p>A QComboBox provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.</p>
<p>A combobox is a selection widget that displays the current item, and can pop up a list of selectable items. A combobox may be editable, allowing the user to modify each item in the list.</p>
<p>Comboboxes can contain pixmaps as well as strings; the insertItem() and changeItem() functions are suitably overloaded. For editable comboboxes, the function clearEdit() is provided, to clear the displayed string without changing the combobox's contents.</p>
<p>There are two signals emitted if the current item of a combobox changes, currentIndexChanged() and activated(). currentIndexChanged() is always emitted regardless if the change was done programmatically or by user interaction, while activated() is only emitted when the change is caused by user interaction. The highlighted() signal is emitted when the user highlights an item in the combobox popup list. All three signals exist in two versions, one with a QString argument and one with an <tt>int</tt> argument. If the user selectes or highlights a pixmap, only the <tt>int</tt> signals are emitted. Whenever the text of an editable combobox is changed the editTextChanged() signal is emitted.</p>
<p>When the user enters a new string in an editable combobox, the widget may or may not insert it, and it can insert it in several locations. The default policy is is AtBottom but you can change this using setInsertPolicy().</p>
<p>It is possible to constrain the input to an editable combobox using QValidator; see setValidator(). By default, any input is accepted.</p>
<p>A combobox can be populated using the insert functions, insertStringList() and insertItem() for example. Items can be changed with changeItem(). An item can be removed with removeItem() and all items can be removed with clear(). The text of the current item is returned by currentText(), and the text of a numbered item is returned with text(). The current item can be set with setCurrentIndex(). The number of items in the combobox is returned by count(); the maximum number of items can be set with setMaxCount(). You can allow editing using setEditable(). For editable comboboxes you can set auto-completion using setCompleter() and whether or not the user can add duplicates is set with setDuplicatesEnabled().</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qstyle-comboboxes.png]</font></p>
*/">
    <method name="public QComboBox(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a combobox with the given <i>parent</i>, using the default model QStandardItemModel.</p>

*/"/>
    <method name="public final void addItem(java.lang.String text__0, java.lang.Object userData__1)" doc="/**
<p>Adds an item to the combobox with the given <i>text</i>, and containing the specified <i>userData</i>. The item is appended to the list of existing items.</p>

*/"/>
    <method name="public final void addItem(com.trolltech.qt.gui.QIcon icon__0, java.lang.String text__1, java.lang.Object userData__2)" doc="/**
<p>Adds an item to the combobox with the given <i>icon</i> and <i>text</i>, and containing the specified <i>userData</i>. The item is appended to the list of existing items.</p>

*/"/>
    <method name="public final void addItems(java.util.List&lt;java.lang.String&gt; texts__0)" doc="/**
<p>Adds each of the strings in the given <i>texts</i> to the combobox. Each item is appended to the list of existing items in turn.</p>

*/"/>
    <method name="public final boolean autoCompletion()" doc="/**
<p>Use setCompleter() instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.CaseSensitivity autoCompletionCaseSensitivity()" doc="/**
<p>Use setCompleter() and QCompleter::setCaseSensitivity() instead.</p>

*/"/>
    <method name="public final void clear()" doc="/**
<p>Clears the combobox, removing all items.</p>
<p>Note: If you have set an external model on the combobox this model will still be cleared when calling this function.</p>

*/"/>
    <method name="public final void clearEditText()" doc="/**
<p>Clears the contents of the line edit used for editing in the combobox.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QCompleter completer()" doc="/**
<p>Returns the completer that is used to auto complete text input for the combobox.</p>

*/"/>
    <method name="public final int count()"/>
    <method name="public final int currentIndex()"/>
    <method name="public final java.lang.String currentText()"/>
    <method name="public final boolean duplicatesEnabled()"/>
    <method name="public final int findData(java.lang.Object data__0, int role__1, com.trolltech.qt.core.Qt.MatchFlags flags__2)" doc="/**
<p>Returns the index of the item containing the given <i>data</i> for the given <i>role</i>; otherwise returns -1.</p>
<p>The <i>flags</i> specify how the items in the combobox are searched.</p>

*/"/>
    <method name="public final int findText(java.lang.String text__0, com.trolltech.qt.core.Qt.MatchFlags flags__1)" doc="/**
<p>Returns the index of the item containing the given <i>text</i>; otherwise returns -1.</p>
<p>The <i>flags</i> specify how the items in the combobox are searched.</p>

*/"/>
    <method name="public final boolean hasFrame()"/>
    <method name="public final com.trolltech.qt.core.QSize iconSize()"/>
    <method name="public final void insertItem(int index__0, java.lang.String text__1, java.lang.Object userData__2)" doc="/**
<p>Inserts the <i>text</i> and <i>userData</i> into the combobox at the given <i>index</i>.</p>
<p>If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.</p>

*/"/>
    <method name="public final void insertItem(int index__0, com.trolltech.qt.gui.QIcon icon__1, java.lang.String text__2, java.lang.Object userData__3)" doc="/**
<p>Inserts the <i>icon</i>, <i>text</i> and <i>userData</i> into the combobox at the given <i>index</i>.</p>
<p>If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.</p>

*/"/>
    <method name="public final void insertItems(int index__0, java.util.List&lt;java.lang.String&gt; texts__1)" doc="/**
<p>Inserts the strings from the <i>list</i> into the combobox as separate items, starting at the <i>index</i> specified.</p>
<p>If the index is equal to or higher than the total number of items, the new items are appended to the list of existing items. If the index is zero or negative, the new items are prepended to the list of existing items.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QComboBox.InsertPolicy insertPolicy()"/>
    <method name="public final boolean isEditable()"/>
    <method name="public final java.lang.Object itemData(int index__0, int role__1)" doc="/**
<p>Returns the data for the given <i>role</i> in the given <i>index</i> in the combobox, or QVariant::Invalid if there is no data for this role.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemDelegate itemDelegate()" doc="/**
<p>Returns the item delegate used by the popup list view.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QIcon itemIcon(int index__0)" doc="/**
<p>Returns the icon for the given <i>index</i> in the combobox.</p>

*/"/>
    <method name="public final java.lang.String itemText(int index__0)" doc="/**
<p>Returns the text for the given <i>index</i> in the combobox.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QLineEdit lineEdit()" doc="/**
<p>Returns the line edit used to edit items in the combobox, or 0 if there is no line edit.</p>
<p>Only editable combo boxes have a line edit.</p>

*/"/>
    <method name="public final int maxCount()"/>
    <method name="public final int maxVisibleItems()"/>
    <method name="public final int minimumContentsLength()"/>
    <method name="public final com.trolltech.qt.core.QAbstractItemModel model()" doc="/**
<p>Returns the model used by the combobox.</p>

*/"/>
    <method name="public final int modelColumn()"/>
    <method name="public final void removeItem(int index__0)" doc="/**
<p>Removes the item at the given <i>index</i> from the combobox. This will update the current index if the index is removed.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QModelIndex rootModelIndex()" doc="/**
<p>Returns the root model item index for the items in the combobox.</p>

*/"/>
    <method name="public final void setAutoCompletion(boolean enable__0)" doc="/**
<p>Use setCompleter() instead.</p>

*/"/>
    <method name="public final void setAutoCompletionCaseSensitivity(com.trolltech.qt.core.Qt.CaseSensitivity sensitivity__0)" doc="/**
<p>Use setCompleter() and QCompleter::setCaseSensitivity() instead.</p>

*/"/>
    <method name="public final void setCompleter(com.trolltech.qt.gui.QCompleter c__0)" doc="/**
<p>Sets the <i>completer</i> to use instead of the current completer. If <i>completer</i> is 0, auto completion is disabled.</p>
<p>By default, for an editable combo box, a QCompleter that performs case insensitive inline completion is automatically created.</p>

*/"/>
    <method name="public final void setCurrentIndex(int index__0)"/>
    <method name="public final void setDuplicatesEnabled(boolean enable__0)"/>
    <method name="public final void setEditText(java.lang.String text__0)" doc="/**
<p>Sets the <i>text</i> in the combobox's text edit.</p>

*/"/>
    <method name="public final void setEditable(boolean editable__0)"/>
    <method name="public final void setFrame(boolean arg__0)"/>
    <method name="public final void setIconSize(com.trolltech.qt.core.QSize size__0)"/>
    <method name="public final void setInsertPolicy(com.trolltech.qt.gui.QComboBox.InsertPolicy policy__0)"/>
    <method name="public final void setItemData(int index__0, java.lang.Object value__1, int role__2)" doc="/**
<p>Sets the data <i>role</i> for the item on the given <i>index</i> in the combobox to the specified <i>value</i>.</p>

*/"/>
    <method name="public final void setItemDelegate(com.trolltech.qt.gui.QAbstractItemDelegate delegate__0)" doc="/**
<p>Sets the item <i>delegate</i> for the popup list view. The combobox takes ownership of the delegate.</p>

*/"/>
    <method name="public final void setItemIcon(int index__0, com.trolltech.qt.gui.QIcon icon__1)" doc="/**
<p>Sets the <i>icon</i> for the item on the given <i>index</i> in the combobox.</p>

*/"/>
    <method name="public final void setItemText(int index__0, java.lang.String text__1)" doc="/**
<p>Sets the <i>text</i> for the item on the given <i>index</i> in the combobox.</p>

*/"/>
    <method name="public final void setLineEdit(com.trolltech.qt.gui.QLineEdit edit__0)" doc="/**
<p>Sets the line <i>edit</i> to use instead of the current line edit widget.</p>
<p>The combo box takes ownership of the line edit.</p>

*/"/>
    <method name="public final void setMaxCount(int max__0)"/>
    <method name="public final void setMaxVisibleItems(int maxItems__0)"/>
    <method name="public final void setMinimumContentsLength(int characters__0)"/>
    <method name="public final void setModel(com.trolltech.qt.core.QAbstractItemModel model__0)" doc="/**
<p>Sets the model to be <i>model</i>. <i>model</i> must not be 0. If you want to clear the contents of a model, call clear().</p>

*/"/>
    <method name="public final void setModelColumn(int visibleColumn__0)"/>
    <method name="public final void setRootModelIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Sets the root model item <i>index</i> for the items in the combobox.</p>

*/"/>
    <method name="public final void setSizeAdjustPolicy(com.trolltech.qt.gui.QComboBox.SizeAdjustPolicy policy__0)"/>
    <method name="public final void setValidator(com.trolltech.qt.gui.QValidator v__0)" doc="/**
<p>Sets the <i>validator</i> to use instead of the current validator.</p>

*/"/>
    <method name="public final void setView(com.trolltech.qt.gui.QAbstractItemView itemView__0)" doc="/**
<p>Sets the view to be used in the combobox popup to the given <i>itemView</i>. The combobox takes ownership of the view.</p>
<p>Note: If you want to use the convenience views (like QListWidget, QTableWidget or QTreeWidget), make sure to call setModel() on the combobox with the convenience widgets model before calling this function.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QComboBox.SizeAdjustPolicy sizeAdjustPolicy()"/>
    <method name="public final com.trolltech.qt.gui.QValidator validator()" doc="/**
<p>Returns the validator that is used to constrain text input for the combobox.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemView view()" doc="/**
<p>Returns the list view used for the combobox popup.</p>

*/"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected void contextMenuEvent(com.trolltech.qt.gui.QContextMenuEvent e__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent event__0)"/>
    <method name="protected void focusInEvent(com.trolltech.qt.gui.QFocusEvent e__0)"/>
    <method name="protected void focusOutEvent(com.trolltech.qt.gui.QFocusEvent e__0)"/>
    <method name="protected void hideEvent(com.trolltech.qt.gui.QHideEvent e__0)"/>
    <method name="public void hidePopup()" doc="/**
<p>Hides the list of items in the combobox if it is currently visible; otherwise this function does nothing.</p>

*/"/>
    <method name="protected void inputMethodEvent(com.trolltech.qt.gui.QInputMethodEvent arg__0)"/>
    <method name="public java.lang.Object inputMethodQuery(com.trolltech.qt.core.Qt.InputMethodQuery arg__0)"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent e__0)"/>
    <method name="protected void keyReleaseEvent(com.trolltech.qt.gui.QKeyEvent e__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSizeHint()"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent e__0)"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent e__0)"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent e__0)"/>
    <method name="public void showPopup()" doc="/**
<p>Displays the list of items in the combobox. If the list is empty then the no items will be shown.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()" doc="/**
<p>This implementation caches the size hint to avoid resizing when the contents change dynamically. To invalidate the cached value change the sizeAdjustPolicy.</p>

*/"/>
    <method name="protected void wheelEvent(com.trolltech.qt.gui.QWheelEvent e__0)"/>
    <enum name="InsertPolicy" doc="/**
<p>This enum specifies what the QComboBox should do when a new string is entered by the user.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The string will not be inserted into the combobox.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The string will be inserted as the first item in the combobox.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The current item will be <i>replaced</i> by the string.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The string will be inserted after the last item in the combobox.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The string is inserted after the current item in the combobox.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The string is inserted before the current item in the combobox.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The string is inserted in the alphabetic order in the combobox.</td></tr>
</table></p>

*/"/>
    <enum name="SizeAdjustPolicy" doc="/**
<p>This enum specifies how the size hint of the QComboBox should adjust when new content is added or content changes.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The combobox will always adjust to the contents</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The combobox will adjust to its contents the first time it is show.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Use AdjustToContents or AdjustToContentsOnFirstShow instead.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The combobox will adjust to minimumContentsLength plus space for an icon. For performance reasons use this policy on large models.</td></tr>
</table></p>

*/"/>
</class>
