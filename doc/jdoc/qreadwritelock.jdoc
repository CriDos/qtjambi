<class name="QReadWriteLock" doc="/**
<p>The QReadWriteLock class provides read-write locking.</p>
<p>A read-write lock is a synchronization tool for protecting resources that can be accessed for reading and writing. This type of lock is useful if you want to allow multiple threads to have simultaneous read-only access, but as soon as one thread wants to write to the resource, all other threads must be blocked until the writing is complete.</p>
<p>In many cases, QReadWriteLock is a direct competitor to QMutex. QReadWriteLock is a good choice if there are many concurrent reads and writing occurs infrequently.</p>
<p>Example:</p>
<pre>    QReadWriteLock lock;

    void ReaderThread::run()
    {
        ...
        lock.lockForRead();
        read_file();
        lock.unlock();
        ...
    }

    void WriterThread::run()
    {
        ...
        lock.lockForWrite();
        write_file();
        lock.unlock();
        ...
    }</pre>
<p>To ensure that writers aren't blocked forever by readers, readers attempting to obtain a lock will not succeed if there is a blocked writer waiting for access, even if the lock is currently only accessed by other readers. Also, if the lock is accessed by a writer and another writer comes in, that writer will have priority over any readers that might also be waiting.</p>

*/">
    <method name="public QReadWriteLock()" doc="/**
<p>Constructs a QReadWriteLock object.</p>

*/"/>
    <method name="public final void lockForRead()" doc="/**
<p>Locks the lock for reading. This function will block the current thread if another thread has locked for writing.</p>

*/"/>
    <method name="public final void lockForWrite()" doc="/**
<p>Locks the lock for writing. This function will block the current thread if any thread has locked for reading or writing.</p>

*/"/>
    <method name="public final boolean tryLockForRead()" doc="/**
<p>Attempts to lock for reading. If the lock was obtained, this function returns true, otherwise it returns false instead of waiting for the lock to become available, i.e. it does not block.</p>
<p>The lock attempt will fail if another thread has locked for writing.</p>
<p>If the lock was obtained, the lock must be unlocked with unlock() before another thread can successfully lock it.</p>

*/"/>
    <method name="public final boolean tryLockForWrite()" doc="/**
<p>Attempts to lock for writing. If the lock was obtained, this function returns true; otherwise, it returns false immediately.</p>
<p>The lock attempt will fail if any thread has locked for reading or writing.</p>
<p>If the lock was obtained, the lock must be unlocked with unlock() before another thread can successfully lock it.</p>

*/"/>
    <method name="public final void unlock()" doc="/**
<p>Unlocks the lock.</p>
<p>Attempting to unlock a lock that is not locked is an error, and will result in program termination.</p>

*/"/>
</class>
