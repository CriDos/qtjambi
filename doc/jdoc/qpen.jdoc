<class name="QPen" doc="/**
<p>The QPen class defines how a QPainter should draw lines and outlines of shapes.</p>
<p>A pen has a style(), width(), brush(), capStyle() and joinStyle().</p>
<p>The pen style defines the line type. The brush is used to fill strokes generated with the pen. Use the QBrush class to specify fill styles. The cap style determines the line end caps that can be drawn using QPainter, while the join style describes how joins between two lines are drawn. The pen width can be specified in both integer (width()) and floating point (widthF()) precision. A line width of zero indicates a cosmetic pen. This means that the pen width is always drawn one pixel wide, independent of the transformation set on the painter.</p>
<p>The various settings can easily be modified using the corresponding setStyle(), setWidth(), setBrush(), setCapStyle() and setJoinStyle() functions (note that the painter's pen must be reset when altering the pen's properties).</p>
<p>For example:</p>
<pre>    QPainter painter(this);
    QPen pen(Qt::green, 3, Qt::DashDotLine, Qt::RoundCap, Qt::RoundJoin);
    painter.setPen(pen);</pre>
<p>which is equivalent to</p>
<pre>    QPainter painter(this);
    QPen pen();  <span class=&quote;comment&quote;>// creates a default pen</span>

    pen.setStyle(Qt::DashDotLine);
    pen.setWidth(3);
    pen.setBrush(Qt::green);
    pen.setCapStyle(Qt::RoundCap);
    pen.setJoinStyle(Qt::RoundJoin);

    painter.setPen(pen);</pre>
<p>The default pen is a solid black brush with 0 width, square cap style (Qt::SquareCap), and bevel join style (Qt::BevelJoin).</p>
<p>In addition QPen provides the color() and setColor() convenience functions to extract and set the color of the pen's brush, respectively. Pens may also be compared and streamed.</p>
<p>For more information about painting in general, see {The Paint System} documentation.</p>
<ul><li><a href=&quote;#pen-style&quote;>Pen Style</a></li>
<li><a href=&quote;#cap-style&quote;>Cap Style</a></li>
<li><a href=&quote;#join-style&quote;>Join Style</a></li>
</ul>
<a name=&quote;pen-style&quote;></a>
<h3>Pen Style</h3>
<p>Qt provides several built-in styles represented by the Qt::PenStyle enum:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qpen-solid.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-dash.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-dot.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::SolidLine</td><td>Qt::DashLine</td><td>Qt::DotLine</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qpen-dashdot.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-dashdotdot.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-custom.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::DashDotLine</td><td>Qt::DashDotDotLine</td><td>Qt::CustomDashLine</td></tr>
</table></p>
<p>Simply use the setStyle() function to convert the pen style to either of the built-in styles, except the Qt::CustomDashLine style which we will come back to shortly. Setting the style to Qt::NoPen tells the painter to not draw lines or outlines. The default pen style is Qt::SolidLine.</p>
<p>Since Qt 4.1 it is also possible to specify a custom dash pattern using the setDashPattern() function which implicitly converts the style of the pen to Qt::CustomDashLine. The pattern argument, a QVector, must be specified as an even number of qreal entries where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the spaces. For example, the custom pattern shown above is created using the following code:</p>
<pre>    QPen pen;
    QVector&lt;qreal&gt; dashes;
    qreal space = 4;

    dashes &lt;&lt; 1 &lt;&lt; space &lt;&lt; 3 &lt;&lt; space &lt;&lt; 9 &lt;&lt; space
               &lt;&lt; 27 &lt;&lt; space &lt;&lt; 9;

    pen.setDashPattern(dashes);</pre>
<p>Note that the dash pattern is specified in units of the pens width, e.g. a dash of length 5 in width 10 is 50 pixels long.</p>
<p>The currently set dash pattern can be retrieved using the dashPattern() function. Use the isSolid() function to determine whether the pen has a solid fill, or not.</p>
<a name=&quote;cap-style&quote;></a>
<h3>Cap Style</h3>
<p>The cap style defines how the end points of lines are drawn using QPainter. The cap style only apply to wide lines, i.e. when the width is 1 or greater. The Qt::PenCapStyle enum provides the following styles:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qpen-square.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-flat.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-roundcap.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::SquareCap</td><td>Qt::FlatCap</td><td>Qt::RoundCap</td></tr>
</table></p>
<p>The Qt::SquareCap style is a square line end that covers the end point and extends beyond it by half the line width. The Qt::FlatCap style is a square line end that does not cover the end point of the line. And the Qt::RoundCap style is a rounded line end covering the end point.</p>
<p>The default is Qt::SquareCap.</p>
<p>Whether or not end points are drawn when the pen width is 0 or 1 depends on the cap style. Using Qt::SquareCap or Qt::RoundCap they are drawn, using Qt::FlatCap they are not drawn.</p>
<a name=&quote;join-style&quote;></a>
<h3>Join Style</h3>
<p>The join style defines how joins between two connected lines can be drawn using QPainter. The join style only apply to wide lines, i.e. when the width is 1 or greater. The Qt::PenJoinStyle enum provides the following styles:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qpen-bevel.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-miter.png]</font></td><td><font color=&quote;red&quote;>[Missing image qpen-roundjoin.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::BevelJoin</td><td>Qt::MiterJoin</td><td>Qt::RoundJoin</td></tr>
</table></p>
<p>The Qt::BevelJoin style fills the triangular notch between the two lines. The Qt::MiterJoin style extends the lines to meet at an angle. And the Qt::RoundJoin style fills a circular arc between the two lines.</p>
<p>The default is Qt::BevelJoin.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qpen-miterlimit.png]</font></p><p>When the Qt::MiterJoin style is applied, it is possible to use the setMiterLimit() function to specify how far the miter join can extend from the join point. The miterLimit() is used to reduce artifacts between line joins where the lines are close to parallel.</p>
<p>The miterLimit() must be specified in units of the pens width, e.g. a miter limit of 5 in width 10 is 50 pixels long. The default miter limit is 2, i.e. twice the pen width in pixels.</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qpen-demo.png]</font></td><td><b>The Path Stroking Demo</b><p>The Path Stroking demo shows Qt's built-in dash patterns and shows how custom patterns can be used to extend the range of available patterns.</p>
</td></tr>
</table></p>

*/">
    <method name="public QPen(com.trolltech.qt.gui.QColor color__0)" doc="/**
<p>Constructs a pen with 0 width and the given <i>color</i>.</p>

*/"/>
    <method name="public QPen()" doc="/**
<p>Constructs a default black solid line pen with 0 width.</p>

*/"/>
    <method name="public QPen(com.trolltech.qt.gui.QPen pen__0)" doc="/**
<p>Constructs a pen that is a copy of the given <i>pen</i>.</p>

*/"/>
    <method name="public QPen(com.trolltech.qt.core.Qt.PenStyle arg__0)" doc="/**
<p>Constructs a black pen with 0 width and the given <i>style</i>.</p>

*/"/>
    <method name="public QPen(com.trolltech.qt.gui.QBrush brush__0, double width__1, com.trolltech.qt.core.Qt.PenStyle s__2, com.trolltech.qt.core.Qt.PenCapStyle c__3, com.trolltech.qt.core.Qt.PenJoinStyle j__4)" doc="/**
<p>Constructs a pen with the specified <i>brush</i>, <i>width</i>, pen <i>style</i>, <i>cap</i> style and <i>join</i> style.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QBrush brush()" doc="/**
<p>Returns the brush used to fill strokes generated with this pen.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.PenCapStyle capStyle()" doc="/**
<p>Returns the pen's cap style.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor color()" doc="/**
<p>Returns the color of this pen's brush.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.Double&gt; dashPattern()" doc="/**
<p>Returns the dash pattern of this pen.</p>

*/"/>
    <method name="public final boolean isDetached()"/>
    <method name="public final boolean isSolid()" doc="/**
<p>Returns true if the pen has a solid fill, otherwise false.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.PenJoinStyle joinStyle()" doc="/**
<p>Returns the pen's join style.</p>

*/"/>
    <method name="public final double miterLimit()" doc="/**
<p>Returns the miter limit of the pen. The miter limit is only relevant when the join style is set to Qt::MiterJoin.</p>

*/"/>
    <method name="public final void setBrush(com.trolltech.qt.gui.QBrush brush__0)" doc="/**
<p>Sets the brush used to fill strokes generated with this pen to the given <i>brush</i>.</p>

*/"/>
    <method name="public final void setCapStyle(com.trolltech.qt.core.Qt.PenCapStyle pcs__0)" doc="/**
<p>Sets the pen's cap style to the given <i>style</i>. The default value is Qt::SquareCap.</p>

*/"/>
    <method name="public final void setColor(com.trolltech.qt.gui.QColor color__0)" doc="/**
<p>Sets the color of this pen's brush to the given <i>color</i>.</p>

*/"/>
    <method name="public final void setDashPattern(java.util.List&lt;java.lang.Double&gt; pattern__0)" doc="/**
<p>Sets the dash pattern for this pen to the given <i>pattern</i>. This implicitly converts the style of the pen to Qt::CustomDashLine.</p>
<p>The pattern must be specified as an even number of entries where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the spaces. For example:</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qpen-custom.png]</font></td><td><pre>    QPen pen;
    QVector&lt;qreal&gt; dashes;
    qreal space = 4;
    dashes &lt;&lt; 1 &lt;&lt; space &lt;&lt; 3 &lt;&lt; space &lt;&lt; 9 &lt;&lt; space
               &lt;&lt; 27 &lt;&lt; space &lt;&lt; 9;
    pen.setDashPattern(dashes);</pre>
</td></tr>
</table></p>
<p>The dash pattern is specified in units of the pens width, e.g. a dash of length 5 in width 10 is 50 pixels long. Each dash is also subject to cap styles so a dash of 1 with square cap set will extend 0.5 pixels out in each direction resulting in a total width of 2.</p>
<p>Note that the default cap style is Qt::SquareCap, meaning that a square line end covers the end point and extends beyond it by half the line width.</p>

*/"/>
    <method name="public final void setJoinStyle(com.trolltech.qt.core.Qt.PenJoinStyle pcs__0)" doc="/**
<p>Sets the pen's join style to the given <i>style</i>. The default value is Qt::BevelJoin.</p>

*/"/>
    <method name="public final void setMiterLimit(double limit__0)" doc="/**
<p>Sets the miter limit of this pen to the given <i>limit</i>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qpen-miterlimit.png]</font></p><p>The miter limit describes how far a miter join can extend from the join point. This is used to reduce artifacts between line joins where the lines are close to parallel.</p>
<p>This value does only have effect when the pen style is set to Qt::MiterJoin. The value is specified in units of the pen's width, e.g. a miter limit of 5 in width 10 is 50 pixels long. The default miter limit is 2, i.e. twice the pen width in pixels.</p>

*/"/>
    <method name="public final void setStyle(com.trolltech.qt.core.Qt.PenStyle arg__0)" doc="/**
<p>Sets the pen style to the given <i>style</i>.</p>
<p>See the Qt::PenStyle documentation for a list of the available styles. Since Qt 4.1 it is also possible to specify a custom dash pattern using the setDashPattern() function which implicitly converts the style of the pen to Qt::CustomDashLine.</p>

*/"/>
    <method name="public final void setWidth(int width__0)" doc="/**
<p>Sets the pen width to the given <i>width</i> with integer point precision.</p>
<p>A line width of zero indicates a cosmetic pen. This means that the pen width is always drawn one pixel wide, independent of the transformation set on the painter.</p>
<p>Setting a pen width with a negative value is not supported.</p>

*/"/>
    <method name="public final void setWidthF(double width__0)" doc="/**
<p>Sets the pen width to the given <i>width</i> with floating point precision.</p>
<p>A line width of zero indicates a cosmetic pen. This means that the pen width is always drawn one pixel wide, independent of the transformation on the painter.</p>
<p>Setting a pen width with a negative value is not supported.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.PenStyle style()" doc="/**
<p>Returns the pen style.</p>

*/"/>
    <method name="public final int width()" doc="/**
<p>Returns the pen width with integer precision.</p>

*/"/>
    <method name="public final double widthF()" doc="/**
<p>Returns the pen width with floating point precision.</p>

*/"/>
</class>
