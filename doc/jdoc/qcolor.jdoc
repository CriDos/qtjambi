<class name="QColor" doc="/**
<p>The QColor class provides colors based on RGB, HSV or CMYK values.</p>
<p>A color is normally specified in terms of RGB (red, green, and blue) components, but it is also possible to specify it in terms of HSV (hue, saturation, and value) and CMYK (cyan, magenta, yellow and black) components. In addition a color can be specified using a color name. The color name can be any of the SVG 1.0 color names.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qcolor-rgb.png]</font></td><td><font color=&quote;red&quote;>[Missing image qcolor-hsv.png]</font></td><td><font color=&quote;red&quote;>[Missing image qcolor-cmyk.png]</font></td></tr>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>RGB</th><th>HSV</th><th>CMYK</th></tr></thead>
</table></p>
<p>The QColor constructor creates the color based on RGB values. To create a QColor based on either HSV or CMYK values, use the toHsv() and toCmyk() functions respectively. These functions return a copy of the color using the desired format. In addition the static fromRgb(), fromHsv() and fromCmyk() functions create colors from the specified values. Alternatively, a color can be converted to any of the three formats using the convertTo() function (returning a copy of the color in the desired format), or any of the setRgb(), setHsv() and setCmyk() functions altering <i>this</i> color's format. The spec() function tells how the color was specified.</p>
<p>A color can be set by passing an RGB string (such as &quot;#112233&quot;), or a color name (such as &quot;blue&quot;), to the setNamedColor() function. The color names are taken from the SVG 1.0 color names. The name() function returns the name of the color in the format #AARRGGBB. Colors can also be set using setRgb(), setHsv() and setCmyk(). To get a lighter or darker color use the light() and dark() functions respectively.</p>
<p>The isValid() function indicates whether a QColor is legal at all. For example, a RGB color with RGB values out of range is illegal. For performance reasons, QColor mostly disregards illegal colors, and for that reason, the result of using an invalid color is undefined.</p>
<p>The color components can be retrieved individually, e.g with red(), hue() and cyan(). The values of the color components can also be retrieved in one go using the getRgb(), getHsv() and getCmyk() functions. Using the RGB color model, the color components can in addition be accessed with rgb().</p>
<p>There are several related non-members: QRgb is a typdef for an unsigned int representing the RGB value triplet (r, g, b). Note that it also can hold a value for the alpha-channel (for more information, see the Alpha-Blended Drawing section). The qRed(), qBlue() and qGreen() functions return the respective component of the given QRgb value, while the qRgb() and qRgba() functions create and return the QRgb triplet based on the given component values. Finally, the qAlpha() function returns the alpha component of the provided QRgb, and the qGray() function calculates and return a gray value based on the given value.</p>
<p>QColor is platform and device independent. The QColormap class maps the color to the hardware.</p>
<p>For more information about painting in general, see {The Paint System} documentation.</p>
<ul><li><a href=&quote;#integer-vs-floating-point-precision&quote;>Integer vs. Floating Point Precision</a></li>
<li><a href=&quote;#alpha-blended-drawing&quote;>Alpha-Blended Drawing</a></li>
<li><a href=&quote;#predefined-colors&quote;>Predefined Colors</a></li>
<li><a href=&quote;#the-hsv-color-model&quote;>The HSV Color Model</a></li>
<li><a href=&quote;#the-cmyk-color-model&quote;>The CMYK Color Model</a></li>
</ul>
<a name=&quote;integer-vs-floating-point-precision&quote;></a>
<h3>Integer vs. Floating Point Precision</h3>
<p>QColor supports floating point precision and provides floating point versions of all the color components functions, e.g. getRgbF(), hueF() and fromCmykF(). Note that since the components is stored using 16-bit integers, there might be minor deviations between the values set using, for example, setRgbF() and the values returned by the getRgbF() function due to rounding.</p>
<p>While the integer based functions take values in the range 0-255 (except hue() which must can be specified within the range 0-359), the floating point functions accept values in the range 0.0 - 1.0.</p>
<a name=&quote;alpha-blended-drawing&quote;></a>
<h3>Alpha-Blended Drawing</h3>
<p>QColor also support alpha-blended outlining and filling. The alpha channel of a color specifies the transparency effect, 0 represents a fully transparent color, while 255 represents a fully opaque color. For example:</p>
<pre><span class=&quote;comment&quote;>    // Specfiy semi-transparent red</span>
    painter.setBrush(QColor(255, 0, 0, 127));
    painter.drawRect(0, 0, width()/2, height());

<span class=&quote;comment&quote;>    // Specify semi-transparend blue</span>
    painter.setBrush(QColor(0, 0, 255, 127));
    painter.drawRect(0, 0, width(), height()/2);</pre>
<p>The code above produces the following output:</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image alphafill.png]</font></p><p>Alpha-blended drawing is supported on Windows, Mac OS X, and on X11 systems that have the X Render extension installed.</p>
<p>The alpha channel of a color can be retrieved and set using the alpha() and setAlpha() functions if its value is an integer, and alphaF() and setAlphaF() if its value is qreal (double). By default, the alpha-channel is set to 255 (opaque). To retrieve and set <i>all</i> the RGB color components (including the alpha-channel) in one go, use the rgba() and setRgba() functions.</p>
<a name=&quote;predefined-colors&quote;></a>
<h3>Predefined Colors</h3>
<p>There are 20 predefined QColors: Qt::white, Qt::black, Qt::red, Qt::darkRed, Qt::green, Qt::darkGreen, Qt::blue, Qt::darkBlue, Qt::cyan, Qt::darkCyan, Qt::magenta, Qt::darkMagenta, Qt::yellow, Qt::darkYellow, Qt::gray, Qt::darkGray, Qt::lightGray, Qt::color0, Qt::color1, and Qt::transparent.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qt-colors.png]</font></p><p>QColor provides the static colorNames() function which returns a QStringList containing the color names Qt knows about.</p>
<p>The colors Qt::color0 (zero pixel value) and Qt::color1 (non-zero pixel value) are special colors for drawing in QBitmaps. Painting with Qt::color0 sets the bitmap bits to 0 (transparent, i.e. background), and painting with Qt::color1 sets the bits to 1 (opaque, i.e. foreground).</p>
<a name=&quote;the-hsv-color-model&quote;></a>
<h3>The HSV Color Model</h3>
<p>The RGB model is hardware-oriented. Its representation is close to what most monitors show. In contrast, HSV represents color in a way more suited to the human perception of color. For example, the relationships &quot;stronger than&quot;, &quot;darker than&quot;, and &quot;the opposite of&quot; are easily expressed in HSV but are much harder to express in RGB.</p>
<p>HSV, like RGB, has three components:</p>
<ul>
<li>H, for hue, is in the range 0 to 359 if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees on the color wheel familiar to most people. Red is 0 (degrees), green is 120, and blue is 240.<p><font color=&quote;red&quote;>[Missing image qcolor-hue.png]</font></p>
</li>
<li>S, for saturation, is in the range 0 to 255, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 255.<p><font color=&quote;red&quote;>[Missing image qcolor-saturation.png]</font></p>
</li>
<li>V, for value, is in the range 0 to 255 and represents lightness or brightness of the color. 0 is black; 255 is as far from black as possible.<p><font color=&quote;red&quote;>[Missing image qcolor-value.png]</font></p>
</li>
</ul>
<p>Here are some examples: pure red is H=0, S=255, V=255; a dark red, moving slightly towards the magenta, could be H=350 (equivalent to -10), S=255, V=180; a grayish light red could have H about 0 (say 350-359 or 0-10), S about 50-100, and S=255.</p>
<p>Qt returns a hue value of -1 for achromatic colors. If you pass a hue value that is too large, Qt forces it into range. Hue 360 or 720 is treated as 0; hue 540 is treated as 180.</p>
<p>In addition to the standard HSV model, Qt provides an alpha-channel to feature alpha-blended drawing.</p>
<a name=&quote;the-cmyk-color-model&quote;></a>
<h3>The CMYK Color Model</h3>
<p>While the RGB and HSV color models are used for display on computer monitors, the CMYK model is used in the four-color printing process of printing presses and some hard-copy devices.</p>
<p>CMYK has four components, all in the range 0-255: cyan (C), magenta (M), yellow (Y) and black (K). Cyan, magenta and yellow are called subtractive colors; the CMYK color model creates color by starting with a white surface and then subtracting color by applying the appropriate components. While combining cyan, magenta and yellow gives the color black, subtracting one or more will yield any other color. When combined in various percentages, these three colors can create the entire spectrum of colors.</p>
<p>Mixing 100 percent of cyan, magenta and yellow <i>does</i> produce black, but the result is unsatisfactory since it wastes ink, increases drying time, and gives a muddy colour when printing. For that reason, black is added in professional printing to provide a solid black tone; hence the term 'four color process'.</p>
<p>In addition to the standard CMYK model, Qt provides an alpha-channel to feature alpha-blended drawing.</p>

*/">
    <method name="public QColor(com.trolltech.qt.core.Qt.GlobalColor color__0)" doc="/**
<p>Constructs a new color with a color value of <i>color</i>.</p>

*/"/>
    <method name="public QColor(com.trolltech.qt.QNativePointer name__0)" doc="/**
<p>Constructs a named color in the same way as setNamedColor() using the given <i>name</i>.</p>
<p>The color is left invalid if the <i>name</i> cannot be parsed.</p>

*/"/>
    <method name="public QColor()" doc="/**
<p>Constructs an invalid color with the RGB value (0, 0, 0). An invalid color is a color that is not properly set up for the underlying window system.</p>
<p>The alpha value of an invalid color is unspecified.</p>

*/"/>
    <method name="public QColor(com.trolltech.qt.gui.QColor color__0)" doc="/**
<p>Constructs a color that is a copy of <i>color</i>.</p>

*/"/>
    <method name="public QColor(java.lang.String name__0)" doc="/**
<p>Constructs a named color in the same way as setNamedColor() using the given <i>name</i>.</p>
<p>The color is left invalid if the <i>name</i> cannot be parsed.</p>

*/"/>
    <method name="public QColor(int r__0, int g__1, int b__2, int a__3)" doc="/**
<p>Constructs a color with the RGB value <i>r</i>, <i>g</i>, <i>b</i>, and the alpha-channel (transparency) value of <i>a</i>.</p>
<p>The color is left invalid if any of the arguments are invalid.</p>

*/"/>
    <method name="public final int alpha()" doc="/**
<p>Returns the alpha color component of this color.</p>

*/"/>
    <method name="public final double alphaF()" doc="/**
<p>Returns the alpha color component of this color.</p>

*/"/>
    <method name="public final int black()" doc="/**
<p>Returns the black color component of this color.</p>

*/"/>
    <method name="public final double blackF()" doc="/**
<p>Returns the black color component of this color.</p>

*/"/>
    <method name="public final int blue()" doc="/**
<p>Returns the blue color component of this color.</p>

*/"/>
    <method name="public final double blueF()" doc="/**
<p>Returns the blue color component of this color.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor convertTo(com.trolltech.qt.gui.QColor.Spec colorSpec__0)" doc="/**
<p>Creates a copy of <i>this</i> color in the format specified by <i>colorSpec</i>.</p>

*/"/>
    <method name="public final int cyan()" doc="/**
<p>Returns the cyan color component of this color.</p>

*/"/>
    <method name="public final double cyanF()" doc="/**
<p>Returns the cyan color component of this color.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor dark(int f__0)" doc="/**
<p>Returns a darker (or lighter) color, but does not change this object.</p>
<p>If the <i>factor</i> is greater than 100, this functions returns a darker color. Setting <i>factor</i> to 300 returns a color that has one-third the brightness. If the <i>factor</i> is less than 100, the return color is lighter, but we recommend using the light() function for this purpose. If the <i>factor</i> is 0 or negative, the return value is unspecified.</p>
<p>The function converts the current RGB color to HSV, divides the value (V) component by <i>factor</i> and converts the color back to RGB.</p>

*/"/>
    <method name="public final void getCmyk(com.trolltech.qt.QNativePointer c__0, com.trolltech.qt.QNativePointer m__1, com.trolltech.qt.QNativePointer y__2, com.trolltech.qt.QNativePointer k__3, com.trolltech.qt.QNativePointer a__4)" doc="/**
<p>Sets the contents pointed to by <i>c</i>, <i>m</i>, <i>y</i>, <i>k</i>, and <i>a</i>, to the cyan, magenta, yellow, black, and alpha-channel (transparency) components of the color's CMYK value.</p>
<p>Note that the components can be retrieved individually using the cyan(), magenta(), yellow(), black() and alpha() functions.</p>

*/"/>
    <method name="public final void getCmykF(com.trolltech.qt.QNativePointer c__0, com.trolltech.qt.QNativePointer m__1, com.trolltech.qt.QNativePointer y__2, com.trolltech.qt.QNativePointer k__3, com.trolltech.qt.QNativePointer a__4)" doc="/**
<p>Sets the contents pointed to by <i>c</i>, <i>m</i>, <i>y</i>, <i>k</i>, and <i>a</i>, to the cyan, magenta, yellow, black, and alpha-channel (transparency) components of the color's CMYK value.</p>
<p>Note that the components can be retrieved individually using the cyanF(), magentaF(), yellowF(), blackF() and alphaF() functions.</p>

*/"/>
    <method name="public final void getHsv(com.trolltech.qt.QNativePointer h__0, com.trolltech.qt.QNativePointer s__1, com.trolltech.qt.QNativePointer v__2, com.trolltech.qt.QNativePointer a__3)" doc="/**
<p>Sets the contents pointed to by <i>h</i>, <i>s</i>, <i>v</i>, and <i>a</i>, to the hue, saturation, value, and alpha-channel (transparency) components of the color's HSV value.</p>
<p>Note that the components can be retrieved individually using the hue(), saturation(), value() and alpha() functions.</p>

*/"/>
    <method name="public final void getHsvF(com.trolltech.qt.QNativePointer h__0, com.trolltech.qt.QNativePointer s__1, com.trolltech.qt.QNativePointer v__2, com.trolltech.qt.QNativePointer a__3)" doc="/**
<p>Sets the contents pointed to by <i>h</i>, <i>s</i>, <i>v</i>, and <i>a</i>, to the hue, saturation, value, and alpha-channel (transparency) components of the color's HSV value.</p>
<p>Note that the components can be retrieved individually using the hueF(), saturationF(), valueF() and alphaF() functions.</p>

*/"/>
    <method name="public final void getRgb(com.trolltech.qt.QNativePointer r__0, com.trolltech.qt.QNativePointer g__1, com.trolltech.qt.QNativePointer b__2, com.trolltech.qt.QNativePointer a__3)" doc="/**
<p>Sets the contents pointed to by <i>r</i>, <i>g</i>, <i>b</i>, and <i>a</i>, to the red, green, blue, and alpha-channel (transparency) components of the color's RGB value.</p>
<p>Note that the components can be retrieved individually using the red(), green(), blue() and alpha() functions.</p>

*/"/>
    <method name="public final void getRgbF(com.trolltech.qt.QNativePointer r__0, com.trolltech.qt.QNativePointer g__1, com.trolltech.qt.QNativePointer b__2, com.trolltech.qt.QNativePointer a__3)" doc="/**
<p>Sets the contents pointed to by <i>r</i>, <i>g</i>, <i>b</i>, and <i>a</i>, to the red, green, blue, and alpha-channel (transparency) components of the color's RGB value.</p>
<p>Note that the components can be retrieved individually using the redF(), greenF(), blueF() and alphaF() functions.</p>

*/"/>
    <method name="public final int green()" doc="/**
<p>Returns the green color component of this color.</p>

*/"/>
    <method name="public final double greenF()" doc="/**
<p>Returns the green color component of this color.</p>

*/"/>
    <method name="public final int hue()" doc="/**
<p>Returns the hue color component of this color.</p>

*/"/>
    <method name="public final double hueF()" doc="/**
<p>Returns the hue color component of this color.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the color is valid; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor light(int f__0)" doc="/**
<p>Returns a lighter (or darker) color, but does not change this object.</p>
<p>If the <i>factor</i> is greater than 100, this functions returns a lighter color. Setting <i>factor</i> to 150 returns a color that is 50% brighter. If the <i>factor</i> is less than 100, the return color is darker, but we recommend using the dark() function for this purpose. If the <i>factor</i> is 0 or negative, the return value is unspecified.</p>
<p>The function converts the current RGB color to HSV, multiplies the value (V) component by <i>factor</i> and converts the color back to RGB.</p>

*/"/>
    <method name="public final int magenta()" doc="/**
<p>Returns the magenta color component of this color.</p>

*/"/>
    <method name="public final double magentaF()" doc="/**
<p>Returns the magenta color component of this color.</p>

*/"/>
    <method name="public final java.lang.String name()" doc="/**
<p>Returns the name of the color in the format &quot;#RRGGBB&quot;; i.e. a &quot;#&quot; character followed by three two-digit hexadecimal numbers.</p>

*/"/>
    <method name="public final int red()" doc="/**
<p>Returns the red color component of this color.</p>

*/"/>
    <method name="public final double redF()" doc="/**
<p>Returns the red color component of this color.</p>

*/"/>
    <method name="public final int rgb()" doc="/**
<p>Returns the RGB value of the color. The alpha is stripped for compatibility.</p>

*/"/>
    <method name="public final int rgba()" doc="/**
<p>Returns the RGB value of the color. Note that unlike rgb(), the alpha is not stripped.</p>
<p>For an invalid color, the alpha value of the returned color is unspecified.</p>

*/"/>
    <method name="public final int saturation()" doc="/**
<p>Returns the saturation color component of this color.</p>

*/"/>
    <method name="public final double saturationF()" doc="/**
<p>Returns the saturation color component of this color.</p>

*/"/>
    <method name="public final void setAlpha(int alpha__0)" doc="/**
<p>Sets the alpha of this color to <i>alpha</i>. Integer alpha is specified in the range 0-255.</p>

*/"/>
    <method name="public final void setAlphaF(double alpha__0)" doc="/**
<p>Sets the alpha of this color to <i>alpha</i>. qreal alpha is specified in the range 0.0-1.0.</p>

*/"/>
    <method name="public final void setBlue(int blue__0)" doc="/**
<p>Sets the blue color component of this color to <i>blue</i>. Int components are specified in the range 0-255.</p>

*/"/>
    <method name="public final void setBlueF(double blue__0)" doc="/**
<p>Sets the blue color component of this color to <i>blue</i>. Float components are specified in the range 0.0-1.0.</p>

*/"/>
    <method name="public final void setCmyk(int c__0, int m__1, int y__2, int k__3, int a__4)" doc="/**
<p>Sets the color to CMYK values, <i>c</i> (cyan), <i>m</i> (magenta), <i>y</i> (yellow), <i>k</i> (black), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>All the values must be in the range 0-255.</p>

*/"/>
    <method name="public final void setCmykF(double c__0, double m__1, double y__2, double k__3, double a__4)" doc="/**
<p>Sets the color to CMYK values, <i>c</i> (cyan), <i>m</i> (magenta), <i>y</i> (yellow), <i>k</i> (black), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>All the values must be in the range 0.0-1.0.</p>

*/"/>
    <method name="public final void setGreen(int green__0)" doc="/**
<p>Sets the green color component of this color to <i>green</i>. Int components are specified in the range 0-255.</p>

*/"/>
    <method name="public final void setGreenF(double green__0)" doc="/**
<p>Sets the green color component of this color to <i>green</i>. Float components are specified in the range 0.0-1.0.</p>

*/"/>
    <method name="public final void setHsv(int h__0, int s__1, int v__2, int a__3)" doc="/**
<p>Sets a HSV color value; <i>h</i> is the hue, <i>s</i> is the saturation, <i>v</i> is the value and <i>a</i> is the alpha component of the HSV color.</p>
<p>The saturation, value and alpha-channel values must be in the range 0-255, and the hue value must be greater than -1.</p>

*/"/>
    <method name="public final void setHsvF(double h__0, double s__1, double v__2, double a__3)" doc="/**
<p>Sets a HSV color value; <i>h</i> is the hue, <i>s</i> is the saturation, <i>v</i> is the value and <i>a</i> is the alpha component of the HSV color.</p>
<p>All the values must be in the range 0.0-1.0.</p>

*/"/>
    <method name="public final void setNamedColor(java.lang.String name__0)" doc="/**
<p>Sets the RGB value of this QColor to <i>name</i>, which may be in one of these formats:</p>
<ul>
<li>#RGB (each of R, G, and B is a single hex digit)</li>
<li>#RRGGBB</li>
<li>#RRRGGGBBB</li>
<li>#RRRRGGGGBBBB</li>
<li>A name from the list of colors defined in the list of SVG color keyword names provided by the World Wide Web Consortium; for example, &quot;steelblue&quot; or &quot;gainsboro&quot;. These color names work on all platforms.</li>
<li><tt>transparent</tt> - representing the absence of a color.</li>
</ul>
<p>The color is invalid if <i>name</i> cannot be parsed.</p>

*/"/>
    <method name="public final void setRed(int red__0)" doc="/**
<p>Sets the red color component of this color to <i>red</i>. Int components are specified in the range 0-255.</p>

*/"/>
    <method name="public final void setRedF(double red__0)" doc="/**
<p>Sets the red color component of this color to <i>red</i>. Float components are specified in the range 0.0-1.0.</p>

*/"/>
    <method name="public final void setRgb(int rgb__0)" doc="/**
<p>Sets the RGB value to <i>rgb</i>, ignoring the alpha.</p>

*/"/>
    <method name="public final void setRgb(int r__0, int g__1, int b__2, int a__3)" doc="/**
<p>Sets the RGB value to <i>r</i>, <i>g</i>, <i>b</i> and the alpha value to <i>a</i>.</p>
<p>All the values must be in the range 0-255.</p>

*/"/>
    <method name="public final void setRgbF(double r__0, double g__1, double b__2, double a__3)" doc="/**
<p>Sets the color channels of this color to <i>r</i> (red), <i>g</i> (green), <i>b</i> (blue) and <i>a</i> (alpha, transparency).</p>
<p>All values must be in the range 0.0-1.0.</p>

*/"/>
    <method name="public final void setRgba(int rgba__0)" doc="/**
<p>Sets the RGBA value to <i>rgba</i>. Note that unlike setRgb(QRgb rgb), this function does not ignore the alpha.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor.Spec spec()" doc="/**
<p>Returns how the color was specified.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor toCmyk()" doc="/**
<p>Creates and returns a CMYK QColor based on this color.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor toHsv()" doc="/**
<p>Creates and returns an HSV QColor based on this color.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QColor toRgb()" doc="/**
<p>Create and returns an RGB QColor based on this color.</p>

*/"/>
    <method name="public final int value()" doc="/**
<p>Returns the value color component of this color.</p>

*/"/>
    <method name="public final double valueF()" doc="/**
<p>Returns the value color component of this color.</p>

*/"/>
    <method name="public final int yellow()" doc="/**
<p>Returns the yellow color component of this color.</p>

*/"/>
    <method name="public final double yellowF()" doc="/**
<p>Returns the yellow color component of this color.</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; colorNames()" doc="/**
<p>Returns a QStringList containing the color names Qt knows about.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromCmyk(int c__0, int m__1, int y__2, int k__3, int a__4)" doc="/**
<p>Static convenience function that returns a QColor constructed from the given CMYK color values: <i>c</i> (cyan), <i>m</i> (magenta), <i>y</i> (yellow), <i>k</i> (black), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>All the values must be in the range 0-255.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromCmykF(double c__0, double m__1, double y__2, double k__3, double a__4)" doc="/**
<p>Static convenience function that returns a QColor constructed from the given CMYK color values: <i>c</i> (cyan), <i>m</i> (magenta), <i>y</i> (yellow), <i>k</i> (black), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>All the values must be in the range 0.0-1.0.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromHsv(int h__0, int s__1, int v__2, int a__3)" doc="/**
<p>Static convenience function that returns a QColor constructed from the HSV color values, <i>h</i> (hue), <i>s</i> (saturation), <i>v</i> (value), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>The value of <i>s</i>, <i>v</i>, and <i>a</i> must all be in the range 0-255; the value of <i>h</i> must be in the range 0-359.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromHsvF(double h__0, double s__1, double v__2, double a__3)" doc="/**
<p>Static convenience function that returns a QColor constructed from the HSV color values, <i>h</i> (hue), <i>s</i> (saturation), <i>v</i> (value), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>All the values must be in the range 0.0-1.0.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromRgb(int rgb__0)" doc="/**
<p>Static convenience function that returns a QColor constructed from the given QRgb value <i>rgb</i>.</p>
<p>Note that the alpha component of <i>rgb</i> is ignored (i.e. it is automatically set to 255), use the fromRgba() function to include the alpha-channel specified by the given QRgb value.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromRgb(int r__0, int g__1, int b__2, int a__3)" doc="/**
<p>Static convenience function that returns a QColor constructed from the RGB color values, <i>r</i> (red), <i>g</i> (green), <i>b</i> (blue), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>All the values must be in the range 0-255.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromRgbF(double r__0, double g__1, double b__2, double a__3)" doc="/**
<p>Static convenience function that returns a QColor constructed from the RGB color values, <i>r</i> (red), <i>g</i> (green), <i>b</i> (blue), and <i>a</i> (alpha-channel, i.e. transparency).</p>
<p>All the values must be in the range 0.0-1.0.</p>

*/"/>
    <method name="public native static com.trolltech.qt.gui.QColor fromRgba(int rgba__0)" doc="/**
<p>Static convenience function that returns a QColor constructed from the given QRgb value <i>rgba</i>.</p>
<p>Note that unlike the fromRgb() function, the alpha-channel specified by the given QRgb value is included.</p>

*/"/>
    <enum name="Spec" doc="/**
<p>The type of color specified, either RGB, HSV or CMYK.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;40%&quote;>
<tr><th width=&quote;60%&quote;>Constant</th><th width=&quote;40%&quote;>Value</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
</table></p>

*/"/>
</class>
