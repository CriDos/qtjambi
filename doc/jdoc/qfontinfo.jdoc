<class name="QFontInfo" doc="/**
<p>The QFontInfo class provides general information about fonts.</p>
<p>The QFontInfo class provides the same access functions as QFont, e.g. family(), pointSize(), italic(), weight(), fixedPitch(), styleHint() etc. But whilst the QFont access functions return the values that were set, a QFontInfo object returns the values that apply to the font that will actually be used to draw the text.</p>
<p>For example, when the program asks for a 25pt Courier font on a machine that has a non-scalable 24pt Courier font, QFont will (normally) use the 24pt Courier for rendering. In this case, QFont::pointSize() returns 25 and QFontInfo::pointSize() returns 24.</p>
<p>There are three ways to create a QFontInfo object.</p>
<ol type=&quote;1&quote;>
<li>Calling the QFontInfo constructor with a QFont creates a font info object for a screen-compatible font, i.e. the font cannot be a printer font. If the font is changed later, the font info object is <i>not</i> updated.<p>(Note: If you use a printer font the values returned may be inaccurate. Printer fonts are not always accessible so the nearest screen font is used if a printer font is supplied.)</p>
</li>
<li>QWidget::fontInfo() returns the font info for a widget's font. This is equivalent to calling QFontInfo(widget-&gt;font()). If the widget's font is changed later, the font info object is <i>not</i> updated.</li>
<li>QPainter::fontInfo() returns the font info for a painter's current font. If the painter's font is changed later, the font info object is <i>not</i> updated.</li>
</ol>

*/">
    <method name="public QFontInfo(com.trolltech.qt.gui.QFontInfo arg__0)" doc="/**
<p>Constructs a copy of <i>fi</i>.</p>

*/"/>
    <method name="public QFontInfo(com.trolltech.qt.gui.QFont arg__0)" doc="/**
<p>Constructs a font info object for <i>font</i>.</p>
<p>The font must be screen-compatible, i.e. a font you use when drawing text in widgets or pixmaps, not QPicture or QPrinter.</p>
<p>The font info object holds the information for the font that is passed in the constructor at the time it is created, and is not updated if the font's attributes are changed later.</p>
<p>Use QPainter::fontInfo() to get the font info when painting. This will give correct results also when painting on paint device that is not screen-compatible.</p>

*/"/>
    <method name="public final boolean bold()" doc="/**
<p>Returns true if weight() would return a value greater than QFont::Normal; otherwise returns false.</p>

*/"/>
    <method name="public final boolean exactMatch()" doc="/**
<p>Returns true if the matched window system font is exactly the same as the one specified by the font; otherwise returns false.</p>

*/"/>
    <method name="public final java.lang.String family()" doc="/**
<p>Returns the family name of the matched window system font.</p>

*/"/>
    <method name="public final boolean fixedPitch()" doc="/**
<p>Returns the fixed pitch value of the matched window system font.</p>

*/"/>
    <method name="public final boolean italic()" doc="/**
<p>Returns the italic value of the matched window system font.</p>

*/"/>
    <method name="public final boolean overline()" doc="/**
<p>Returns the overline value of the matched window system font.</p>
<p>Here we read the overline flag directly from the QFont. This is OK for X11 and for Windows because we always get what we want.</p>

*/"/>
    <method name="public final int pixelSize()" doc="/**
<p>Returns the pixel size of the matched window system font.</p>

*/"/>
    <method name="public final int pointSize()" doc="/**
<p>Returns the point size of the matched window system font.</p>

*/"/>
    <method name="public final double pointSizeF()" doc="/**
<p>Returns the point size of the matched window system font.</p>

*/"/>
    <method name="public final boolean rawMode()" doc="/**
<p>Returns true if the font is a raw mode font; otherwise returns false.</p>
<p>If it is a raw mode font, all other functions in QFontInfo will return the same values set in the QFont, regardless of the font actually used.</p>

*/"/>
    <method name="public final boolean strikeOut()" doc="/**
<p>Returns the strikeout value of the matched window system font.</p>
<p>This is OK for X11 and for Windows because we always get what we want.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QFont.Style style()" doc="/**
<p>Returns the style value of the matched window system font.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QFont.StyleHint styleHint()" doc="/**
<p>Returns the style of the matched window system font.</p>
<p>Currently only returns the style hint set in QFont.</p>

*/"/>
    <method name="public final boolean underline()" doc="/**
<p>Returns the underline value of the matched window system font.</p>
<p>Here we read the underline flag directly from the QFont. This is OK for X11 and for Windows because we always get what we want.</p>

*/"/>
    <method name="public final int weight()" doc="/**
<p>Returns the weight of the matched window system font.</p>

*/"/>
</class>
