<class name="QInputContext" doc="/**
<p>The QInputContext class abstracts the input method dependent data and composing state.</p>
<p>An input method is responsible to input complex text that cannot be inputted via simple keymap. It converts a sequence of input events (typically key events) into a text string through the input method specific converting process. The class of the processes are widely ranging from simple finite state machine to complex text translator that pools a whole paragraph of a text with text editing capability to perform grammar and semantic analysis.</p>
<p>To abstract such different input method specific intermediate information, Qt offers the QInputContext as base class. The concept is well known as 'input context' in the input method domain. An input context is created for a text widget in response to a demand. It is ensured that an input context is prepared for an input method before input to a text widget.</p>
<p>Multiple input contexts that is belonging to a single input method may concurrently coexist. Suppose multi-window text editor. Each text widget of window A and B holds different QInputContext instance which contains different state information such as partially composed text.</p>
<a name=&quote;groups-of-functions&quote;></a>
<h3>Groups of Functions</h3>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Context</th><th>Functions</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Receiving information</td><td>x11FilterEvent(), filterEvent(), mouseHandler()</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Sending back composed text</td><td>sendEvent()</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>State change notification</td><td>setFocusWidget(), reset()</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Context information</td><td>identifierName(), language(), font(), isComposing()</td></tr>
</table></p>

*/">
    <method name="public QInputContext(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs an input context with the given <i>parent</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget focusWidget()" doc="/**
<p>Returns the widget that has an input focus for this input context. Ordinary input methods should not call this function directly to keep platform independence and flexible configuration possibility.</p>
<p>The return value may differ from holderWidget() if the input context is shared between several text widgets.</p>

*/"/>
    <method name="public final void sendEvent(com.trolltech.qt.gui.QInputMethodEvent event__0)" doc="/**
<p>Sends an input method event specified by <i>event</i> to the current focus widget. Implementations of QInputContext should call this method to send the generated input method events and not QApplication::sendEvent(), as the events might have to get dispatched to a different application on some platforms.</p>
<p>Some complex input methods route the handling to several child contexts (e.g. to enable language switching). To account for this, QInputContext will check if the parent object is a QInputContext. If yes, it will call the parents sendEvent() implementation instead of sending the event directly.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextFormat standardFormat(com.trolltech.qt.gui.QInputContext.StandardFormat s__0)" doc="/**
<p>Returns a QTextFormat object that specifies the format for component <i>s</i>.</p>

*/"/>
    <method name="public java.util.List&lt;com.trolltech.qt.gui.QAction&gt; actions()" doc="/**
<p>This is a preliminary interface for Qt 4.</p>

*/"/>
    <method name="public boolean filterEvent(com.trolltech.qt.core.QEvent event__0)" doc="/**
<p>This function can be reimplemented in a subclass to filter input events.</p>
<p>Return true if the <i>event</i> has been consumed. Otherwise, the unfiltered <i>event</i> will be forwarded to widgets as ordinary way. Although the input events have accept() and ignore() methods, leave it untouched.</p>
<p><i>event</i> is currently restricted to QKeyEvent. But some input method related events such as QWheelEvent or QTabletEvent may be added in future.</p>
<p>The filtering opportunity is always given to the input context as soon as possible. It has to be taken place before any other key event consumers such as eventfilters and accelerators because some input methods require quite various key combination and sequences. It often conflicts with accelerators and so on, so we must give the input context the filtering opportunity first to ensure all input methods work properly regardless of application design.</p>
<p>Ordinary input methods require discrete key events to work properly, so Qt's key compression is always disabled for any input contexts.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QFont font()" doc="/**
<p>Returns the font of the current input widget</p>

*/"/>
    <method name="public abstract java.lang.String identifierName()" doc="/**
<p>This function must be implemented in any subclasses to return the identifier name of the input method.</p>
<p>Return value is the name to identify and specify input methods for the input method switching mechanism and so on. The name has to be consistent with QInputContextPlugin::keys(). The name has to consist of ASCII characters only.</p>
<p>There are two different names with different responsibility in the input method domain. This function returns one of them. Another name is called 'display name' that stands for the name for endusers appeared in a menu and so on.</p>

*/"/>
    <method name="public abstract boolean isComposing()" doc="/**
<p>This function indicates whether InputMethodStart event had been sent to the current focus widget. It is ensured that an input context can send InputMethodCompose or InputMethodEnd event safely if this function returned true.</p>
<p>The state is automatically being tracked through sendEvent().</p>

*/"/>
    <method name="public abstract java.lang.String language()" doc="/**
<p>This function must be implemented in any subclasses to return a language code (e.g. &quot;zh_CN&quot;, &quot;zh_TW&quot;, &quot;zh_HK&quot;, &quot;ja&quot;, &quot;ko&quot;, ...) of the input context. If the input context can handle multiple languages, return the currently used one. The name has to be consistent with QInputContextPlugin::language().</p>
<p>This information will be used by language tagging feature in QInputMethodEvent. It is required to distinguish unified han characters correctly. It enables proper font and character code handling. Suppose CJK-awared multilingual web browser (that automatically modifies fonts in CJK-mixed text) and XML editor (that automatically inserts lang attr).</p>

*/"/>
    <method name="public void mouseHandler(int x__0, com.trolltech.qt.gui.QMouseEvent event__1)" doc="/**
<p>This function can be reimplemented in a subclass to handle mouse press, release, double-click, and move events within the preedit text. You can use the function to implement mouse-oriented user interface such as text selection or popup menu for candidate selection.</p>
<p>The <i>x</i> parameter is the offset within the string that was sent with the InputMethodCompose event. The alteration boundary of <i>x</i> is ensured as character boundary of preedit string accurately.</p>
<p>The <i>event</i> parameter is the event that was sent to the editor widget. The event type is QEvent::MouseButtonPress, QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick or QEvent::MouseButtonMove. The event's button and state indicate the kind of operation that was performed.</p>

*/"/>
    <method name="public abstract void reset()" doc="/**
<p>This function can be reimplemented in a subclass to reset the state of the input method.</p>
<p>This function is called by several widgets to reset input state. For example, a text widget call this function before inserting a text to make widget ready to accept a text.</p>
<p>Default implementation is sufficient for simple input method. You can override this function to reset external input method engines in complex input method. In the case, call QInputContext::reset() to ensure proper termination of inputting.</p>
<p>You must not send any QInputMethodEvent except empty InputMethodEnd event using QInputContext::reset() at reimplemented reset(). It will break input state consistency.</p>

*/"/>
    <method name="public void setFocusWidget(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Sets the widget that has an input focus for this input context. Ordinary input methods must not call this function directly.</p>

*/"/>
    <method name="public void update()" doc="/**
<p>This virtual function is called when a state in the focus widget has changed. QInputContext can then use QWidget::inputMethodQuery() to query the new state of the widget.</p>

*/"/>
    <method name="public void widgetDestroyed(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>This virtual function is called when the specified <i>widget</i> is destroyed. The <i>widget</i> is a widget on which this input context is installed.</p>

*/"/>
    <enum name="StandardFormat" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The preedit text.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The selection text.</td></tr>
</table></p>

*/"/>
</class>
