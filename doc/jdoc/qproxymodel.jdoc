<class name="QProxyModel" doc="/**
<p>The QProxyModel class provides support for processing data passed between another model and a view.</p>
<p>If you want to do filtering and sorting, see QSortFilterProxyModel.</p>
<p>Proxy models provide a standard model interface that can be used to manipulate the data retrieved through an underlying model. They can be used to perform operations such as sorting and filtering on the data obtained without changing the contents of the model.</p>
<p>Just as with subclasses of QAbstractItemView, QProxyModel provides the setModel() function that is used to specify the model to be acted on by the proxy. Views can be connected to either the underlying model or the proxy model with QAbstractItemView::setModel().</p>
<p>Since views rely on the information provided in model indexes to identify items of data from models, and to position these items in some visual representation, proxy models must create their own model indexes instead of supplying model indexes from their underlying models.</p>

*/">
    <method name="public QProxyModel(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a proxy model with the given <i>parent</i>.</p>

*/"/>
    <method name="protected final void connectToModel(com.trolltech.qt.core.QAbstractItemModel model__0)" doc="/**
<p>Connect to all the signals emitted by given <i>model</i>.</p>

*/"/>
    <method name="protected final void disconnectFromModel(com.trolltech.qt.core.QAbstractItemModel model__0)" doc="/**
<p>Disconnect from all the signals emitted by the given <i>model</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QAbstractItemModel model()" doc="/**
<p>Returns the model that contains the data that is available through the proxy model.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QModelIndex setProxyModel(com.trolltech.qt.core.QModelIndex source_index__0)" doc="/**
<p>Change the model pointer in the given <i>source_index</i> to point to the proxy model.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QModelIndex setSourceModel(com.trolltech.qt.core.QModelIndex proxy_index__0)" doc="/**
<p>Change the model pointer in the given <i>proxy_index</i> to point to the source model.</p>

*/"/>
    <method name="public int columnCount(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Returns the number of columns for the given <i>parent</i>.</p>

*/"/>
    <method name="public java.lang.Object data(com.trolltech.qt.core.QModelIndex index__0, int role__1)" doc="/**
<p>Returns the data stored in the item with the given <i>index</i> under the specified <i>role</i>.</p>

*/"/>
    <method name="public boolean dropMimeData(com.trolltech.qt.gui.QMimeData data__0, com.trolltech.qt.core.Qt.DropAction action__1, int row__2, int column__3, com.trolltech.qt.core.QModelIndex parent__4)" doc="/**
<p>Returns true if the model accepts the <i>data</i> dropped onto an attached view for the specified <i>action</i>; otherwise returns false.</p>
<p>The <i>parent</i>, <i>row</i>, and <i>column</i> details can be used to control which MIME types are acceptable to different parts of a model when received via the drag and drop system.</p>

*/"/>
    <method name="public void fetchMore(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Fetches more child items of the given <i>parent</i>. This function is used by views to tell the model that they can display more data than the model has provided.</p>

*/"/>
    <method name="public com.trolltech.qt.core.Qt.ItemFlags flags(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the item flags for the given <i>index</i>.</p>

*/"/>
    <method name="public boolean hasChildren(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Returns true if the item corresponding to the <i>parent</i> index has child items; otherwise returns false.</p>

*/"/>
    <method name="public java.lang.Object headerData(int section__0, com.trolltech.qt.core.Qt.Orientation orientation__1, int role__2)" doc="/**
<p>Returns the data stored in the <i>section</i> of the header with specified <i>orientation</i> under the given <i>role</i>.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QModelIndex index(int row__0, int column__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Returns the model index with the given <i>row</i>, <i>column</i>, and <i>parent</i>.</p>

*/"/>
    <method name="public boolean insertColumns(int column__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Inserts <i>count</i> columns into the model, creating new items as children of the given <i>parent</i>. The new columns are inserted before the <i>column</i> specified. If the <i>parent</i> item has no children, a single row is created to contain the required number of columns.</p>
<p>Returns true if the columns were successfully inserted; otherwise returns false.</p>

*/"/>
    <method name="public boolean insertRows(int row__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Inserts <i>count</i> rows into the model, creating new items as children of the given <i>parent</i>. The new rows are inserted before the <i>row</i> specified. If the <i>parent</i> item has no children, a single column is created to contain the required number of rows.</p>
<p>Returns true if the rows were successfully inserted; otherwise returns false.</p>

*/"/>
    <method name="public java.util.List&lt;com.trolltech.qt.core.QModelIndex&gt; match(com.trolltech.qt.core.QModelIndex start__0, int role__1, java.lang.Object value__2, int hits__3, com.trolltech.qt.core.Qt.MatchFlags flags__4)" doc="/**
<p>Returns a list of model indexes that each contain the given <i>value</i> for the <i>role</i> specified. The search begins at the <i>start</i> index and is performed according to the specified <i>flags</i>. The search continues until the number of matching data items equals <i>hits</i>, the last row is reached, or the search reaches <i>start</i> again, depending on whether <tt>MatchWrap</tt> is specified in <i>flags</i>.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QMimeData mimeData(java.util.List&lt;com.trolltech.qt.core.QModelIndex&gt; indexes__0)" doc="/**
<p>Returns MIME data for the specified <i>indexes</i> in the model.</p>

*/"/>
    <method name="public java.util.List&lt;java.lang.String&gt; mimeTypes()" doc="/**
<p>Returns a list of MIME types that are supported by the model.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QModelIndex parent(com.trolltech.qt.core.QModelIndex child__0)" doc="/**
<p>Returns the model index that corresponds to the parent of the given <i>child</i> index.</p>

*/"/>
    <method name="public void revert()"/>
    <method name="public int rowCount(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Returns the number of rows for the given <i>parent</i>.</p>

*/"/>
    <method name="public boolean setData(com.trolltech.qt.core.QModelIndex index__0, java.lang.Object value__1, int role__2)" doc="/**
<p>Sets the <i>role</i> data for the item at <i>index</i> to <i>value</i>. Returns true if successful; otherwise returns false.</p>
<p>The base class implementation returns false. This function and data() must be reimplemented for editable models.</p>

*/"/>
    <method name="public boolean setHeaderData(int section__0, com.trolltech.qt.core.Qt.Orientation orientation__1, java.lang.Object value__2, int role__3)" doc="/**
<p>Sets the <i>role</i> data in the <i>section</i> of the header with the specified <i>orientation</i> to the <i>value</i> given.</p>

*/"/>
    <method name="public void setModel(com.trolltech.qt.core.QAbstractItemModel model__0)" doc="/**
<p>Sets the given <i>model</i> to be processed by the proxy model.</p>

*/"/>
    <method name="public void sort(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sorts the child items in the specified <i>column</i> according to the sort order defined by <i>order</i>.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QSize span(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the size of the item that corresponds to the specified <i>index</i>.</p>

*/"/>
    <method name="public boolean submit()"/>
    <method name="public com.trolltech.qt.core.Qt.DropActions supportedDropActions()" doc="/**
<p>Returns the drop actions that are supported by the model; this is a combination of the individual actions defined in Qt::DropActions.</p>
<p>The selection of drop actions provided by the model will influence the behavior of the component that started the drag and drop operation.</p>

*/"/>
</class>
