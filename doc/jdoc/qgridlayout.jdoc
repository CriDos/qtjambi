<class name="QGridLayout" doc="/**
<p>The QGridLayout class lays out widgets in a grid.</p>
<p>QGridLayout takes the space made available to it (by its parent layout or by the parentWidget()), divides it up into rows and columns, and puts each widget it manages into the correct cell.</p>
<p>Columns and rows behave identically; we will discuss columns, but there are equivalent functions for rows.</p>
<p>Each column has a minimum width and a stretch factor. The minimum width is the greatest of that set using setColumnMinimumWidth() and the minimum width of each widget in that column. The stretch factor is set using setColumnStretch() and determines how much of the available space the column will get over and above its necessary minimum.</p>
<p>Normally, each managed widget or layout is put into a cell of its own using addWidget(). It is also possible for a widget to occupy multiple cells using the row and column spanning overloads of addItem() and addWidget(). If you do this, QGridLayout will guess how to distribute the size over the columns/rows (based on the stretch factors).</p>
<p>To remove a widget from a layout, call remove(). Calling QWidget::hide() on a widget also effectively removes the widget from the layout until QWidget::show() is called.</p>
<p>This illustration shows a fragment of a dialog with a five-column, three-row grid (the grid is shown overlaid in magenta):</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image gridlayout.png]</font></p><p>Columns 0, 2 and 4 in this dialog fragment are made up of a QLabel, a QLineEdit, and a QListBox. Columns 1 and 3 are placeholders made with setColumnMinimumWidth(). Row 0 consists of three QLabel objects, row 1 of three QLineEdit objects and row 2 of three QListBox objects. We used placeholder columns (1 and 3) to get the right amount of space between the columns.</p>
<p>Note that the columns and rows are not equally wide or tall. If you want two columns to have the same width, you must set their minimum widths and stretch factors to be the same yourself. You do this using setColumnMinimumWidth() and setColumnStretch().</p>
<p>If the QGridLayout is not the top-level layout (i.e. does not manage all of the widget's area and children), you must add it to its parent layout when you create it, but before you do anything with it. The normal way to add a layout is by calling addLayout() on the parent layout.</p>
<p>Once you have added your layout you can start putting widgets and other layouts into the cells of your grid layout using addWidget(), addItem(), and addLayout().</p>
<p>QGridLayout also includes two margin widths: the margin and the spacing. The margin is the width of the reserved space along each of the QGridLayout's four sides. The spacing is the width of the automatically allocated spacing between neighboring boxes.</p>
<p>The default margin and spacing values are provided by the style. The default margin Qt styles specify is 9 for child widgets and 11 for windows. The spacing defaults to the same as the margin width for a top-level layout, or to the same as the parent layout.</p>

*/">
    <method name="public QGridLayout(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a new QGridLayout with parent widget, <i>parent</i>. The layout has one row and one column initially, and will expand when new items are inserted.</p>

*/"/>
    <method name="public QGridLayout()" doc="/**
<p>Constructs a new grid layout.</p>
<p>You must insert this grid into another layout. You can insert widgets and layouts into this layout at any time, but laying out will not be performed before this is inserted into another layout.</p>

*/"/>
    <method name="public final void addItem(com.trolltech.qt.gui.QLayoutItemInterface item__0, int row__1, int column__2, int rowSpan__3, int columnSpan__4, com.trolltech.qt.core.Qt.Alignment arg__5)" doc="/**
<p>Adds <i>item</i> at position <i>row</i>, <i>column</i>, spanning <i>rowSpan</i> rows and <i>columnSpan</i> columns, and aligns it according to <i>alignment</i>. If <i>rowSpan</i> and/or <i>columnSpan</i> is -1, then the item will extend to the bottom and/or right edge, respectively. The layout takes ownership of the <i>item</i>.</p>
<p><b>Warning:</b> Do not use this function to add child layouts or child widget items. Use addLayout() or addWidget() instead.</p>

*/"/>
    <method name="public final void addLayout(com.trolltech.qt.gui.QLayout arg__0, int row__1, int column__2, com.trolltech.qt.core.Qt.Alignment arg__3)" doc="/**
<p>Places the <i>layout</i> at position (<i>row</i>, <i>column</i>) in the grid. The top-left position is (0, 0).</p>
<p>The alignment is specified by <i>alignment</i>. The default alignment is 0, which means that the widget fills the entire cell.</p>
<p>A non-zero alignment indicates that the layout should not grow to fill the available space but should be sized according to sizeHint().</p>
<p><i>layout</i> becomes a child of the grid layout.</p>

*/"/>
    <method name="public final void addLayout(com.trolltech.qt.gui.QLayout arg__0, int row__1, int column__2, int rowSpan__3, int columnSpan__4, com.trolltech.qt.core.Qt.Alignment arg__5)" doc="/**
<p>This version adds the layout <i>layout</i> to the cell grid, spanning multiple rows/columns. The cell will start at <i>row</i>, <i>column</i> spanning <i>rowSpan</i> rows and <i>columnSpan</i> columns.</p>
<p>If <i>rowSpan</i> and/or <i>columnSpan</i> is -1, then the layout will extend to the bottom and/or right edge, respectively.</p>

*/"/>
    <method name="public final void addWidget(com.trolltech.qt.gui.QWidget arg__0, int row__1, int column__2, com.trolltech.qt.core.Qt.Alignment arg__3)" doc="/**
<p>Adds the given <i>widget</i> to the cell grid at <i>row</i>, <i>column</i>. The top-left position is (0, 0) by default.</p>
<p>The alignment is specified by <i>alignment</i>. The default alignment is 0, which means that the widget fills the entire cell.</p>

*/"/>
    <method name="public final void addWidget(com.trolltech.qt.gui.QWidget arg__0, int row__1, int column__2, int rowSpan__3, int columnSpan__4, com.trolltech.qt.core.Qt.Alignment arg__5)" doc="/**
<p>This version adds the given <i>widget</i> to the cell grid, spanning multiple rows/columns. The cell will start at <i>fromRow</i>, <i>fromColumn</i> spanning <i>rowSpan</i> rows and <i>columnSpan</i> columns. The grid will have the given <i>alignment</i>.</p>
<p>If <i>rowSpan</i> and/or <i>columnSpan</i> is -1, then the widget will extend to the bottom and/or right edge, respectively.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect cellRect(int row__0, int column__1)" doc="/**
<p>Returns the geometry of the cell with row <i>row</i> and column <i>column</i> in the grid. Returns an invalid rectangle if <i>row</i> or <i>column</i> is outside the grid.</p>
<p><b>Warning:</b> in the current version of Qt this function does not return valid results until setGeometry() has been called, i.e. after the parentWidget() is visible.</p>

*/"/>
    <method name="public final int columnCount()" doc="/**
<p>Returns the number of columns in this grid.</p>

*/"/>
    <method name="public final int columnMinimumWidth(int column__0)" doc="/**
<p>Returns the column spacing for column <i>column</i>.</p>

*/"/>
    <method name="public final int columnStretch(int column__0)" doc="/**
<p>Returns the stretch factor for column <i>column</i>.</p>

*/"/>
    <method name="public final void getItemPosition(int idx__0, com.trolltech.qt.QNativePointer row__1, com.trolltech.qt.QNativePointer column__2, com.trolltech.qt.QNativePointer rowSpan__3, com.trolltech.qt.QNativePointer columnSpan__4)" doc="/**
<p>Returns the position information of the item with the given <i>index</i>.</p>
<p>The variables passed as <i>row</i> and <i>column</i> are updated with the position of the item in the layout, and the <i>rowSpan</i> and <i>columnSpan</i> variables are updated with the vertical and horizontal spans of the item.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Corner originCorner()" doc="/**
<p>Returns the corner that's used for the grid's origin, i.e. for position (0, 0).</p>

*/"/>
    <method name="public final int rowCount()" doc="/**
<p>Returns the number of rows in this grid.</p>

*/"/>
    <method name="public final int rowMinimumHeight(int row__0)" doc="/**
<p>Returns the minimum width set for row <i>row</i>.</p>

*/"/>
    <method name="public final int rowStretch(int row__0)" doc="/**
<p>Returns the stretch factor for row <i>row</i>.</p>

*/"/>
    <method name="public final void setColumnMinimumWidth(int column__0, int minSize__1)" doc="/**
<p>Sets the minimum width of column <i>column</i> to <i>minSize</i> pixels.</p>

*/"/>
    <method name="public final void setColumnStretch(int column__0, int stretch__1)" doc="/**
<p>Sets the stretch factor of column <i>column</i> to <i>stretch</i>. The first column is number 0.</p>
<p>The stretch factor is relative to the other columns in this grid. Columns with a higher stretch factor take more of the available space.</p>
<p>The default stretch factor is 0. If the stretch factor is 0 and no other column in this table can grow at all, the column may still grow.</p>
<p>An alternative approach is to add spacing using addItem() with a QSpacerItem.</p>

*/"/>
    <method name="public final void setDefaultPositioning(int n__0, com.trolltech.qt.core.Qt.Orientation orient__1)" doc="/**
<p>Sets the positioning mode used by addItem(). If <i>orient</i> is Qt::Horizontal, this layout is expanded to <i>n</i> columns, and items will be added columns-first. Otherwise it is expanded to <i>n</i> rows and items will be added rows-first.</p>

*/"/>
    <method name="public final void setOriginCorner(com.trolltech.qt.core.Qt.Corner arg__0)" doc="/**
<p>Sets the grid's origin corner, i.e. position (0, 0), to <i>corner</i>.</p>

*/"/>
    <method name="public final void setRowMinimumHeight(int row__0, int minSize__1)" doc="/**
<p>Sets the minimum height of row <i>row</i> to <i>minSize</i> pixels.</p>

*/"/>
    <method name="public final void setRowStretch(int row__0, int stretch__1)" doc="/**
<p>Sets the stretch factor of row <i>row</i> to <i>stretch</i>. The first row is number 0.</p>
<p>The stretch factor is relative to the other rows in this grid. Rows with a higher stretch factor take more of the available space.</p>
<p>The default stretch factor is 0. If the stretch factor is 0 and no other row in this table can grow at all, the row may still grow.</p>

*/"/>
    <method name="public void addItem(com.trolltech.qt.gui.QLayoutItemInterface arg__0)"/>
    <method name="public void addWidget(com.trolltech.qt.gui.QWidget w__0)"/>
    <method name="public int count()"/>
    <method name="public com.trolltech.qt.core.Qt.Orientations expandingDirections()"/>
    <method name="public boolean hasHeightForWidth()"/>
    <method name="public int heightForWidth(int arg__0)"/>
    <method name="public void invalidate()"/>
    <method name="public com.trolltech.qt.gui.QLayoutItemInterface itemAt(int arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize maximumSize()"/>
    <method name="public int minimumHeightForWidth(int arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSize()"/>
    <method name="public void setGeometry(com.trolltech.qt.core.QRect arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="public com.trolltech.qt.gui.QLayoutItemInterface takeAt(int arg__0)"/>
</class>
