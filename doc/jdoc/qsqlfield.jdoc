<class name="QSqlField" doc="/**
<p>The QSqlField class manipulates the fields in SQL database tables and views.</p>
<p>QSqlField represents the characteristics of a single column in a database table or view, such as the data type and column name. A field also contains the value of the database column, which can be viewed or changed.</p>
<p>Field data values are stored as QVariants. Using an incompatible type is not permitted. For example:</p>
<pre>        QSqlField field(&quot;age&quot;, QVariant::Int);
        field.setValue(QPixmap());  <span class=&quote;comment&quote;>// WRONG</span></pre>
<p>However, the field will attempt to cast certain data types to the field data type where possible:</p>
<pre>        QSqlField field(&quot;age&quot;, QVariant::Int);
        field.setValue(QString(&quot;123&quot;));  <span class=&quote;comment&quote;>// casts QString to int</span></pre>
<p>QSqlField objects are rarely created explicitly in application code. They are usually accessed indirectly through QSqlRecords that already contain a list of fields. For example:</p>
<pre>        QSqlQuery query;
        ...
        QSqlRecord record = query.record();
        QSqlField field = record.field(&quot;country&quot;);</pre>
<p>A QSqlField object can provide some meta-data about the field, for example, its name(), variant type(), length(), precision(), defaultValue(), typeID(), and its requiredStatus(), isGenerated() and isReadOnly(). The field's data can be checked to see if it isNull(), and its value() retrieved. When editing the data can be set with setValue() or set to NULL with clear().</p>

*/">
    <method name="public QSqlField(java.lang.String fieldName__0, int type__1)" doc="/**
<p>Constructs an empty field called <i>fieldName</i> of variant type <i>type</i>.</p>

*/"/>
    <method name="public QSqlField(com.trolltech.qt.sql.QSqlField other__0)" doc="/**
<p>Constructs a copy of <i>other</i>.</p>

*/"/>
    <method name="public final void clear()" doc="/**
<p>Clears the value of the field and sets it to NULL. If the field is read-only, nothing happens.</p>

*/"/>
    <method name="public final java.lang.Object defaultValue()" doc="/**
<p>Returns the field's default value (which may be NULL).</p>

*/"/>
    <method name="public final boolean isAutoValue()" doc="/**
<p>Returns true if the value is auto-generated by the database, for example auto-increment primary key values.</p>

*/"/>
    <method name="public final boolean isGenerated()" doc="/**
<p>Returns true if the field is generated; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if the field's value is NULL; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isReadOnly()" doc="/**
<p>Returns true if the field's value is read-only; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the field's variant type is valid; otherwise returns false.</p>

*/"/>
    <method name="public final int length()" doc="/**
<p>Returns the field's length.</p>
<p>If the returned value is negative, it means that the information is not available from the database.</p>

*/"/>
    <method name="public final java.lang.String name()" doc="/**
<p>Returns the name of the field.</p>

*/"/>
    <method name="public final int precision()" doc="/**
<p>Returns the field's precision; this is only meaningful for numeric types.</p>
<p>If the returned value is negative, it means that the information is not available from the database.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlField.RequiredStatus requiredStatus()" doc="/**
<p>Returns true if this is a required field; otherwise returns false. An <tt>INSERT</tt> will fail if a required field does not have a value.</p>

*/"/>
    <method name="public final void setAutoValue(boolean autoVal__0)" doc="/**
<p>Marks the field as an auto-generated value if <i>autoVal</i> is true.</p>

*/"/>
    <method name="public final void setDefaultValue(java.lang.Object value__0)" doc="/**
<p>Sets the default value used for this field to <i>value</i>.</p>

*/"/>
    <method name="public final void setGenerated(boolean gen__0)" doc="/**
<p>Sets the generated state. If <i>gen</i> is false, no SQL will be generated for this field; otherwise, Qt classes such as QSqlQueryModel and QSqlTableModel will generate SQL for this field.</p>

*/"/>
    <method name="public final void setLength(int fieldLength__0)" doc="/**
<p>Sets the field's length to <i>fieldLength</i>. For strings this is the maximum number of characters the string can hold; the meaning varies for other types.</p>

*/"/>
    <method name="public final void setName(java.lang.String name__0)" doc="/**
<p>Sets the name of the field to <i>name</i>.</p>

*/"/>
    <method name="public final void setPrecision(int precision__0)" doc="/**
<p>Sets the field's <i>precision</i>. This only affects numeric fields.</p>

*/"/>
    <method name="public final void setReadOnly(boolean readOnly__0)" doc="/**
<p>Sets the read only flag of the field's value to <i>readOnly</i>. A read-only field cannot have its value set with setValue() and cannot be cleared to NULL with clear().</p>

*/"/>
    <method name="public final void setRequired(boolean required__0)" doc="/**
<p>Sets the required status of this field to Required if <i>required</i> is true; otherwise sets it to Optional.</p>

*/"/>
    <method name="public final void setRequiredStatus(com.trolltech.qt.sql.QSqlField.RequiredStatus status__0)" doc="/**
<p>Sets the required status of this field to <i>required</i>.</p>

*/"/>
    <method name="public final void setSqlType(int type__0)"/>
    <method name="public final void setType(int type__0)" doc="/**
<p>Set's the field's variant type to <i>type</i>.</p>

*/"/>
    <method name="public final void setValue(java.lang.Object value__0)" doc="/**
<p>Sets the value of the field to <i>value</i>. If the field is read-only (isReadOnly() returns true), nothing happens.</p>
<p>If the data type of <i>value</i> differs from the field's current data type, an attempt is made to cast it to the proper type. This preserves the data type of the field in the case of assignment, e.g. a QString to an integer data type.</p>
<p>To set the value to NULL, use clear().</p>

*/"/>
    <method name="public final int type()" doc="/**
<p>Returns the field's type as stored in the database. Note that the actual value might have a different type, Numerical values that are too large to store in a long int or double are usually stored as strings to prevent precision loss.</p>

*/"/>
    <method name="public final int typeID()" doc="/**
<p>Returns the type ID for the field.</p>
<p>If the returned value is negative, it means that the information is not available from the database.</p>

*/"/>
    <method name="public final java.lang.Object value()" doc="/**
<p>Returns the value of the field as a QVariant.</p>
<p>Use isNull() to check if the field's value is NULL.</p>

*/"/>
    <enum name="RequiredStatus" doc="/**
<p>Specifies whether the field is required or optional.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The field must be specified when inserting records.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The fields doesn't have to be specified when inserting records.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The database driver couldn't determine whether the field is required or optional.</td></tr>
</table></p>

*/"/>
</class>
