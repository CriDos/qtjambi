<class name="QAbstractFileEngine" doc="/**
<p>The QAbstractFileEngine class provides an abstraction for accessing the filesystem.</p>
<p>The QDir, QFile, and QFileInfo classes all make use of a QAbstractFileEngine internally. If you create your own QAbstractFileEngine subclass (and register it with Qt by creating a QAbstractFileEngineHandler subclass), your file engine will be used when the path is one that your file engine handles.</p>
<p>A QAbstractFileEngine refers to one file or one directory. If the referent is a file, the setFileName(), rename(), and remove() functions are applicable. If the referent is a directory the mkdir(), rmdir(), and entryList() functions are applicable. In all cases the caseSensitive(), isRelativePath(), fileFlags(), ownerId(), owner(), and fileTime() functions are applicable.</p>
<p>A QAbstractFileEngine subclass can be created to do syncronous network I/O based file system operations, local file system operations, or to operate as a resource system to access file based resources.</p>

*/">
    <method name="protected QAbstractFileEngine()" doc="/**
<p>Constructs a new QAbstractFileEngine that does not refer to any file or directory.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QFile.FileError error()" doc="/**
<p>Returns the QFile::FileError that resulted from the last failed operation. If QFile::UnspecifiedError is returned, QFile will use its own idea of the error status.</p>

*/"/>
    <method name="public final java.lang.String errorString()" doc="/**
<p>Returns the human-readable message appropriate to the current error reported by error(). If no suitable string is available, an empty string is returned.</p>

*/"/>
    <method name="protected final void setError(com.trolltech.qt.core.QFile.FileError error__0, java.lang.String str__1)" doc="/**
<p>Sets the error type to <i>error</i>, and the error string to <i>errorString</i>. Call this function to set the error values returned by the higher-level classes.</p>

*/"/>
    <method name="public boolean caseSensitive()" doc="/**
<p>Should return true if the underlying file system is case-sensitive; otherwise return false.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean close()" doc="/**
<p>Closes the file.</p>

*/"/>
    <method name="public boolean copy(java.lang.String newName__0)" doc="/**
<p>Copies the contents of this file to a file with the name <i>newName</i>. Returns true on success; otherwise, false is returned.</p>

*/"/>
    <method name="public java.util.List&lt;java.lang.String&gt; entryList(com.trolltech.qt.core.QDir.Filters filters__0, java.util.List&lt;java.lang.String&gt; filterNames__1)" doc="/**
<p>Requests that a list of all the files matching the <i>filters</i> list based on the <i>filterNames</i> in the file engine's directory are returned.</p>
<p>Should return an empty list if the file engine refers to a file rather than a directory, or if the directory is unreadable or does not exist or if nothing matches the specifications.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QAbstractFileEngine.FileFlags fileFlags(com.trolltech.qt.core.QAbstractFileEngine.FileFlags type__0)" doc="/**
<p>This function should return the set of OR'd flags that are true for the file engine's file, and that are in the <i>type</i>'s OR'd members.</p>
<p>In your reimplementation you can use the <i>type</i> argument as an optimization hint and only return the OR'd set of members that are true and that match those in <i>type</i>; in other words you can ignore any members not mentioned in <i>type</i>, thus avoiding some potentially expensive lookups or system calls.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public java.lang.String fileName(com.trolltech.qt.core.QAbstractFileEngine.FileName file__0)" doc="/**
<p>Return the file engine's current file name in the format specified by <i>file</i>.</p>
<p>If you don't handle some <tt>FileName</tt> possibilities, return the file name set in setFileName() when an unhandled format is requested.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QDateTime fileTime(com.trolltech.qt.core.QAbstractFileEngine.FileTime time__0)" doc="/**
<p>If <i>time</i> is <tt>CreationTime</tt>, return when the file was created. If <i>time</i> is <tt>ModificationTime</tt>, return when the file was most recently modified. If <i>time</i> is <tt>AccessTime</tt>, return when the file was most recently accessed (e.g. read or written). If the time cannot be determined return QDateTime() (an invalid date time).</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean flush()" doc="/**
<p>Flushes the open file.</p>

*/"/>
    <method name="public int handle()" doc="/**
<p>Returns the native file handle for this file engine. This handle must be used with care; its value and type are platform specific, and using it will most likely lead to non-portable code.</p>

*/"/>
    <method name="public boolean isRelativePath()" doc="/**
<p>Return true if the file referred to by this file engine has a relative path; otherwise return false.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean isSequential()" doc="/**
<p>Returns true if the file is a sequential access device; returns false if the file is a direct access device.</p>
<p>Operations involving size() and seek(int) are not valid on sequential devices.</p>

*/"/>
    <method name="public boolean link(java.lang.String newName__0)" doc="/**
<p>Creates a link from the file currently specified by fileName() to <i>newName</i>. What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Unix). Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public boolean mkdir(java.lang.String dirName__0, boolean createParentDirectories__1)" doc="/**
<p>Requests that the directory <i>dirName</i> be created. If <i>createParentDirectories</i> is true, then any sub-directories in <i>dirName</i> that don't exist must be created. If <i>createParentDirectories</i> is false then any sub-directories in <i>dirName</i> must already exist for the function to succeed. If the operation succeeds return true; otherwise return false.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean open(com.trolltech.qt.core.QIODevice.OpenMode openMode__0)" doc="/**
<p>Opens the file in the specified <i>mode</i>. Returns true if the file was successfully opened; otherwise returns false.</p>
<p>The <i>mode</i> is an OR combination of QIODevice::OpenMode and QIODevice::HandlingMode values.</p>

*/"/>
    <method name="public java.lang.String owner(com.trolltech.qt.core.QAbstractFileEngine.FileOwner arg__0)" doc="/**
<p>If <i>owner</i> is <tt>OwnerUser</tt> return the name of the user who owns the file. If <i>owner</i> is <tt>OwnerGroup</tt> return the name of the group that own the file. If you can't determine the owner return QString().</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public int ownerId(com.trolltech.qt.core.QAbstractFileEngine.FileOwner arg__0)" doc="/**
<p>If <i>owner</i> is <tt>OwnerUser</tt> return the ID of the user who owns the file. If <i>owner</i> is <tt>OwnerGroup</tt> return the ID of the group that own the file. If you can't determine the owner return -2.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public long pos()" doc="/**
<p>Returns the current file position.</p>
<p>This is the position of the data read/write head of the file.</p>

*/"/>
    <method name="public long read(com.trolltech.qt.QNativePointer data__0, long maxlen__1)" doc="/**
<p>Reads a number of characters from the file into <i>data</i>. At most <i>maxlen</i> characters will be read.</p>
<p>Returns -1 if a fatal error occurs, or 0 if there are no bytes to read.</p>

*/"/>
    <method name="public long readLine(com.trolltech.qt.QNativePointer data__0, long maxlen__1)" doc="/**
<p>This function reads one line, terminated by a '\n' character, from the file info <i>data</i>. At most <i>maxlen</i> characters will be read. The end-of-line character is included.</p>

*/"/>
    <method name="public boolean remove()" doc="/**
<p>Requests that the file is deleted from the file system. If the operation succeeds return true; otherwise return false.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean rename(java.lang.String newName__0)" doc="/**
<p>Requests that the file be renamed to <i>newName</i> in the file system. If the operation succeeds return true; otherwise return false.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean rmdir(java.lang.String dirName__0, boolean recurseParentDirectories__1)" doc="/**
<p>Requests that the directory <i>dirName</i> is deleted from the file system. When <i>recurseParentDirectories</i> is true, then any empty parent-directories in <i>dirName</i> must also be deleted. If <i>recurseParentDirectories</i> is false, only the <i>dirName</i> leaf-node should be deleted. In most file systems a directory cannot be deleted using this function if it is non-empty. If the operation succeeds return true; otherwise return false.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean seek(long pos__0)" doc="/**
<p>Sets the file position to the given <i>offset</i>. Returns true if the position was successfully set; otherwise returns false.</p>
<p>The offset is from the beginning of the file, unless the file is sequential.</p>

*/"/>
    <method name="public void setFileName(java.lang.String file__0)" doc="/**
<p>Sets the file engine's file name to <i>file</i>. This file name is the file that the rest of the virtual functions will operate on.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean setPermissions(int perms__0)" doc="/**
<p>Requests that the file's permissions be set to <i>perms</i>. The argument perms will be set to the OR-ed together combination of QAbstractFileEngine::FileInfo, with only the QAbstractFileEngine::PermsMask being honored. If the operations succceeds return true; otherwise return false;</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean setSize(long size__0)" doc="/**
<p>Requests that the file be set to size <i>size</i>. If <i>size</i> is larger than the current file then it is filled with 0's, if smaller it is simply truncated. If the operations succceeds return true; otherwise return false;</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public long size()" doc="/**
<p>Returns the size of the file.</p>

*/"/>
    <method name="public boolean supportsExtension(com.trolltech.qt.core.QAbstractFileEngine.Extension extension__0)"/>
    <method name="public long write(com.trolltech.qt.QNativePointer data__0, long len__1)" doc="/**
<p>Writes <i>len</i> bytes from <i>data</i> to the file. Returns the number of characters written on success; otherwise returns -1.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QAbstractFileEngine create(java.lang.String fileName__0)" doc="/**
<p>Creates and returns a QAbstractFileEngine suitable for processing <i>fileName</i>.</p>
<p>You should not need to call this function; use QFile, QFileInfo or QDir directly instead.</p>

*/"/>
    <enum name="FileName" doc="/**
<p>These values are used to request a file name in a particular format.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The same filename that was passed to the QAbstractFileEngine.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The name of the file excluding the path.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The path to the file excluding the base name.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The absolute path to the file (including the base name).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The absolute path to the file (excluding the base name).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The full file name of the file that this file is a link to. (This will be empty if this file is not a link.)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Often very similar to LinkName. Will return the true path to the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Same as CanonicalName, excluding the base name.</td></tr>
</table></p>

*/"/>
    <enum name="FileTime" doc="/**
<p>These are used by the fileTime() function.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>When the file was created.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>When the file was most recently modified.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>When the file was most recently accessed (e.g. read or written to).</td></tr>
</table></p>

*/"/>
    <enum name="FileOwner" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The user who owns the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The group who owns the file.</td></tr>
</table></p>

*/"/>
    <enum name="Extension"/>
    <enum name="FileFlag" doc="/**
<p>The permissions and types of a file, suitable for OR'ing together.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The owner of the file has permission to read it.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The owner of the file has permission to write to it.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The owner of the file has permission to execute it.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The current user has permission to read the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The current user has permission to write to the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The current user has permission to execute the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Members of the current user's group have permission to read the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Members of the current user's group have permission to write to the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Members of the current user's group have permission to execute the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>All users have permission to read the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>All users have permission to write to the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>All users have permission to execute the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is a link to another file (or link) in the file system (i.e. not a file or directory).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is a regular file to the file system (i.e. not a link or directory)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is a directory in the file system (i.e. not a link or file).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is hidden.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file actually exists in the file system.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file or the file pointed to is the root of the filesystem.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file resides on the local disk and can be passed to standard file functions.</td></tr>
</table></p>

*/"/>
</class>
