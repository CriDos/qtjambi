<class name="QTemporaryFile" doc="/**
<p>The QTemporaryFile class is an I/O device that operates on temporary files.</p>
<p>QTemporaryFile is used to create unique temporary files safely. The file itself is created by calling open(). The name of the temporary file is guaranteed to be unique (i.e., you are guaranteed to not overwrite an existing file), and the file will subsequently be removed upon destruction of the QTemporaryFile object. This is an important technique that avoids data corruption for applications that store data in temporary files. The file name is either auto-generated, or created based on a template, which is passed to QTemporaryFile's constructor.</p>
<p>Example:</p>
<pre>    {
        QTemporaryFile file;
        if (file.open()) {
            <span class=&quote;comment&quote;>// file.fileName() returns the unique file name</span>
        }

        <span class=&quote;comment&quote;>// the QTemporaryFile destructor removes the temporary file</span>
    }</pre>
<p>Reopening a QTemporaryFile after calling close() is safe. For as long as the QTemporaryFile object itself is not destroyed, the unique temporary file will exist and be kept open internally by QTemporaryFile.</p>
<p>A temporary file will have some static part of the name and some part that is calculated to be unique. The default filename qt_temp will be placed into the temporary path as returned by QDir::tempPath().</p>

*/">
    <method name="public QTemporaryFile()" doc="/**
<p>Constructs a QTemporaryFile in QDir::tempPath(), using the file template &quot;qt_temp.XXXXXX&quot;. The file is stored in the system's temporary directory.</p>

*/"/>
    <method name="public QTemporaryFile(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a QTemporaryFile (with the given <i>parent</i>) in QDir::tempPath(), using the file template &quot;qt_temp.XXXXXX&quot;.</p>

*/"/>
    <method name="public QTemporaryFile(java.lang.String templateName__0, com.trolltech.qt.core.QObject parent__1)" doc="/**
<p>Constructs a QTemporaryFile with a template filename of <i>templateName</i> and the specified <i>parent</i>. Upon opening the temporary file this will be used to create a unique filename. If the <i>templateName</i> does end in XXXXXX it will automatically be appended and used as the dynamic portion of the filename.</p>
<p>If <i>templateName</i> is a relative path, the path will be relative to the current working directory. You can use QDir::tempPath() to construct <i>templateName</i> if you want use the system's temporary directory.</p>

*/"/>
    <method name="public QTemporaryFile(java.lang.String templateName__0)" doc="/**
<p>Constructs a QTemporaryFile with a template filename of <i>templateName</i>. Upon opening the temporary file this will be used to create a unique filename. If the <i>templateName</i> does not contain XXXXXX it will automatically be appended and used as the dynamic portion of the filename.</p>
<p>If <i>templateName</i> is a relative path, the path will be relative to the current working directory. You can use QDir::tempPath() to construct <i>templateName</i> if you want use the system's temporary directory.</p>

*/"/>
    <method name="public final boolean autoRemove()" doc="/**
<p>Returns true if the QTemporaryFile is in auto remove mode. Auto-remove mode will automatically delete the filename from disk upon destruction. This makes it very easy to create your QTemporaryFile object on the stack, fill it with data, read from it, and finally on function return it will automatically clean up after itself.</p>
<p>Auto-remove is on by default.</p>

*/"/>
    <method name="public final java.lang.String fileName()" doc="/**
<p>Returns the complete unique filename backing the QTemporaryFile object. This string is null before the QTemporaryFile is opened, afterwards it will contain the fileTemplate() plus additional characters to make it unique.</p>

*/"/>
    <method name="public final java.lang.String fileTemplate()" doc="/**
<p>Returns the set file template. The default file template will be called qt_temp and be placed in QDir::tempPath().</p>

*/"/>
    <method name="public final boolean open()" doc="/**
<p>A QTemporaryFile will always be opened in QIODevice::ReadWrite mode, this allows easy access to the data in the file. This function will return true upon success and will set the fileName() to the unique filename used.</p>

*/"/>
    <method name="public final void setAutoRemove(boolean b__0)" doc="/**
<p>Sets the QTemporaryFile into auto-remove mode if <i>b</i> is true.</p>
<p>Auto-remove is on by default.</p>

*/"/>
    <method name="public final void setFileTemplate(java.lang.String name__0)" doc="/**
<p>Sets the static portion of the file name to <i>name</i>. If the file template ends in XXXXXX that will automatically be replaced with the unique part of the filename, otherwise a filename will be determined automatically based on the static portion specified.</p>
<p>If <i>name</i> contains a relative file path, the path will be relative to the current working directory. You can use QDir::tempPath() to construct <i>name</i> if you want use the system's temporary directory.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QAbstractFileEngine fileEngine()"/>
    <method name="public boolean open(com.trolltech.qt.core.QIODevice.OpenMode flags__0)" doc="/**
<p>Creates a unique file name for the temporary file, and opens it. You can get the unique name later by calling fileName(). The file is guaranteed to have been created by this function (i.e., it has never existed before).</p>

*/"/>
    <method name="public final static com.trolltech.qt.core.QTemporaryFile createLocalFile(com.trolltech.qt.core.QFile file__0)" doc="/**
<p>Creates and returns a local temporary file whose contents are a copy of the contents of the given <i>file</i>.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QTemporaryFile createLocalFile(java.lang.String fileName__0)" doc="/**
<p>Works on the given <i>fileName</i> rather than an existing QFile object.</p>

*/"/>
</class>
