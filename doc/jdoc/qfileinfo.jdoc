<class name="QFileInfo" doc="/**
<p>The QFileInfo class provides system-independent file information.</p>
<p>QFileInfo provides information about a file's name and position (path) in the file system, its access rights and whether it is a directory or symbolic link, etc. The file's size and last modified/read times are also available. QFileInfo can also be used to obtain information about a Qt resource.</p>
<p>A QFileInfo can point to a file with either a relative or an absolute file path. Absolute file paths begin with the directory separator &quot;/&quot; (or with a drive specification on Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current working directory. An example of an absolute path is the string &quot;/tmp/quartz&quot;. A relative path might look like &quot;src/fatlib&quot;. You can use the function isRelative() to check whether a QFileInfo is using a relative or an absolute file path. You can call the function makeAbsolute() to convert a relative QFileInfo's path to an absolute path.</p>
<p>The file that the QFileInfo works on is set in the constructor or later with setFile(). Use exists() to see if the file exists and size() to get its size.</p>
<p>Some of QFileInfo's functions query the file system, but for performance reasons, some functions only operate on the file name itself. For example: To return the absolute path of a relative file name, absolutePath() has to query the file system. The path() function, however, can work on the file name directly, and so it is faster. By convention, QFileInfo interprets any path that ends with a slash '/' as a directory (e.g., &quot;C:/WINDOWS/&quot;), and those without a trailing slash (e.g., &quot;C:/WINDOWS/hosts.txt&quot;) are treated as files.</p>
<p>To speed up performance, QFileInfo caches information about the file. Because files can be changed by other users or programs, or even by other parts of the same program, there is a function that refreshes the file information: refresh(). If you want to switch off a QFileInfo's caching and force it to access the file system every time you request information from it call setCaching(false).</p>
<p>The file's type is obtained with isFile(), isDir() and isSymLink(). The symLinkTarget() function provides the name of the file the symlink points to.</p>
<p>On Unix (including Mac OS X), the symlink has the same size() has the file it points to, because Unix handles symlinks transparently; similarly, opening a symlink using QFile effectively opens the link's target. For example:</p>
<pre>    #ifdef Q_OS_UNIX

    QFileInfo info1(&quot;/home/bob/bin/untabify&quot;);
    info1.isSymLink();          <span class=&quote;comment&quote;>// returns true</span>
    info1.absoluteFilePath();   <span class=&quote;comment&quote;>// returns &quot;/home/bob/bin/untabify&quot;</span>
    info1.size();               <span class=&quote;comment&quote;>// returns 56201</span>
    info1.symLinkTarget();      <span class=&quote;comment&quote;>// returns &quot;/opt/pretty++/bin/untabify&quot;</span>

    QFileInfo info2(info1.symLinkTarget());
    info1.isSymLink();          <span class=&quote;comment&quote;>// returns false</span>
    info1.absoluteFilePath();   <span class=&quote;comment&quote;>// returns &quot;/opt/pretty++/bin/untabify&quot;</span>
    info1.size();               <span class=&quote;comment&quote;>// returns 56201</span>

    #endif</pre>
<p>On Windows, symlinks (shortcuts) are <tt>.lnk</tt> files. The reported size() is that of the symlink (not the link's target), and opening a symlink using QFile opens the <tt>.lnk</tt> file. For example:</p>
<pre>    #ifdef Q_OS_WIN

    QFileInfo info1(&quot;C:\\Documents and Settings\\Bob\\untabify.lnk&quot;);
    info1.isSymLink();          <span class=&quote;comment&quote;>// returns true</span>
    info1.absoluteFilePath();   <span class=&quote;comment&quote;>// returns &quot;C:/Documents and Settings/Bob/untabify.lnk&quot;</span>
    info1.size();               <span class=&quote;comment&quote;>// returns 743</span>
    info1.symLinkTarget();      <span class=&quote;comment&quote;>// returns &quot;C:/Pretty++/untabify&quot;</span>

    QFileInfo info2(info1.symLinkTarget());
    info1.isSymLink();          <span class=&quote;comment&quote;>// returns false</span>
    info1.absoluteFilePath();   <span class=&quote;comment&quote;>// returns &quot;C:/Pretty++/untabify&quot;</span>
    info1.size();               <span class=&quote;comment&quote;>// returns 63942</span>

    #endif</pre>
<p>Elements of the file's name can be extracted with path() and fileName(). The fileName()'s parts can be extracted with baseName() and extension().</p>
<p>The file's dates are returned by created(), lastModified() and lastRead(). Information about the file's access permissions is obtained with isReadable(), isWritable() and isExecutable(). The file's ownership is available from owner(), ownerId(), group() and groupId(). You can examine a file's permissions and ownership in a single statement using the permission() function.</p>

*/">
    <method name="public QFileInfo(com.trolltech.qt.core.QDir dir__0, java.lang.String file__1)" doc="/**
<p>Constructs a new QFileInfo that gives information about the given <i>file</i> in the directory <i>dir</i>.</p>
<p>If <i>dir</i> has a relative path, the QFileInfo will also have a relative path.</p>

*/"/>
    <method name="public QFileInfo(com.trolltech.qt.core.QFileInfo fileinfo__0)" doc="/**
<p>Constructs a new QFileInfo that is a copy of the given <i>fileinfo</i>.</p>

*/"/>
    <method name="public QFileInfo()" doc="/**
<p>Constructs an empty QFileInfo object.</p>
<p>Note that an empty QFileInfo object contain no file reference.</p>

*/"/>
    <method name="public QFileInfo(java.lang.String file__0)" doc="/**
<p>Constructs a new QFileInfo that gives information about the given file. The <i>file</i> can also include an absolute or relative path.</p>

*/"/>
    <method name="public QFileInfo(com.trolltech.qt.core.QFile file__0)" doc="/**
<p>Constructs a new QFileInfo that gives information about file <i>file</i>.</p>
<p>If the <i>file</i> has a relative path, the QFileInfo will also have a relative path.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDir absoluteDir()" doc="/**
<p>Returns the file's absolute path as a QDir object.</p>

*/"/>
    <method name="public final java.lang.String absoluteFilePath()" doc="/**
<p>Returns the absolute path including the file name.</p>
<p>The absolute path name consists of the full path and the file name. On Unix this will always begin with the root, '/', directory. On Windows this will always begin 'D:/' where D is a drive letter, except for network shares that are not mapped to a drive letter, in which case the path will begin '//sharename/'.</p>
<p>This function returns the same as filePath(), unless isRelative() is true.</p>
<p>If the QFileInfo is empty it returns QDir::currentPath().</p>
<p>This function can be time consuming under Unix (in the order of milliseconds).</p>

*/"/>
    <method name="public final java.lang.String absolutePath()" doc="/**
<p>Returns the file's path absolute path. This doesn't include the file name.</p>

*/"/>
    <method name="public final java.lang.String baseName()" doc="/**
<p>Returns the base name of the file without the path.</p>
<p>The base name consists of all characters in the file up to (but not including) the <i>first</i> '.' character.</p>
<p>Example:</p>
<pre>    QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
    QString base = fi.baseName();  <span class=&quote;comment&quote;>// base = &quot;archive&quot;</span></pre>
<p>The base name of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</p>

*/"/>
    <method name="public final boolean caching()" doc="/**
<p>Returns true if caching is enabled; otherwise returns false.</p>

*/"/>
    <method name="public final java.lang.String canonicalFilePath()" doc="/**
<p>Returns the canonical path, i.e. a path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</p>
<p>On systems that do not have symbolic links this function will always return the same string that absoluteFilePath() returns. If the canonical path does not exist (normally due to dangling symbolic links) canonicalFilePath() returns an empty string.</p>

*/"/>
    <method name="public final java.lang.String canonicalPath()" doc="/**
<p>Returns the canonical path, i.e. a path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</p>
<p>On systems that do not have symbolic links this function will always return the same string that absolutePath() returns. If the canonical path does not exist (normally due to dangling symbolic links) canonicalPath() returns an empty string.</p>

*/"/>
    <method name="public final java.lang.String completeBaseName()" doc="/**
<p>Returns the complete base name of the file without the path.</p>
<p>The complete base name consists of all characters in the file up to (but not including) the <i>last</i> '.' character.</p>
<p>Example:</p>
<pre>    QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
    QString base = fi.completeBaseName();  <span class=&quote;comment&quote;>// base = &quot;archive.tar&quot;</span></pre>

*/"/>
    <method name="public final java.lang.String completeSuffix()" doc="/**
<p>Returns the complete suffix of the file.</p>
<p>The complete suffix consists of all characters in the file after (but not including) the first '.'.</p>
<p>Example:</p>
<pre>    QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
    QString ext = fi.completeSuffix();  <span class=&quote;comment&quote;>// ext = &quot;tar.gz&quot;</span></pre>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime created()" doc="/**
<p>Returns the date and time when the file was created.</p>
<p>On most Unix systems, this function returns the time of the last status change. A status change occurs when the file is created, but it also occurs whenever the user writes or sets inode information (for example, changing the file permissions).</p>
<p>If neither creation time nor &quot;last status change&quot; time are not available, returns the same as lastModified().</p>

*/"/>
    <method name="public final void detach()" doc="/**
<p>Detaches all internal data.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDir dir()" doc="/**
<p>Returns the path of the object's parent directory as a QDir object.</p>
<p><b>Note:</b> The QDir returned always corresponds to the object's parent directory, even if the QFileInfo represents a directory.</p>

*/"/>
    <method name="public final boolean exists()" doc="/**
<p>Returns true if the file exists; otherwise returns false.</p>

*/"/>
    <method name="public final java.lang.String fileName()" doc="/**
<p>Returns the name of the file, excluding the path.</p>
<p>Example:</p>
<pre>    QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
    QString name = fi.fileName();                <span class=&quote;comment&quote;>// name = &quot;archive.tar.gz&quot;</span></pre>

*/"/>
    <method name="public final java.lang.String filePath()" doc="/**
<p>Returns the file name, including the path (which may be absolute or relative).</p>

*/"/>
    <method name="public final java.lang.String group()" doc="/**
<p>Returns the group of the file. On Windows, on systems where files do not have groups, or if an error occurs, an empty string is returned.</p>
<p>This function can be time consuming under Unix (in the order of milliseconds).</p>

*/"/>
    <method name="public final int groupId()" doc="/**
<p>Returns the id of the group the file belongs to.</p>
<p>On Windows and on systems where files do not have groups this function always returns (uint) -2.</p>

*/"/>
    <method name="public final boolean isAbsolute()" doc="/**
<p>Returns true if the file path name is absolute, otherwise returns false if the path is relative.</p>

*/"/>
    <method name="public final boolean isDir()" doc="/**
<p>Returns true if this object points to a directory or to a symbolic link to a directory; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isExecutable()" doc="/**
<p>Returns true if the file is executable; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isFile()" doc="/**
<p>Returns true if this object points to a file or to a symbolic link to a file. Returns false if the object points to something which isn't a file, such as a directory.</p>

*/"/>
    <method name="public final boolean isHidden()" doc="/**
<p>Returns true if this is a `hidden' file; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isReadable()" doc="/**
<p>Returns true if the user can read the file; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isRelative()" doc="/**
<p>Returns true if the file path name is relative, otherwise returns false if the path is absolute (e.g. under Unix a path is absolute if it begins with a &quot;/&quot;).</p>

*/"/>
    <method name="public final boolean isRoot()" doc="/**
<p>Returns true if the object points to a directory or to a symbolic link to a directory, and that directory is the root directory; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isSymLink()" doc="/**
<p>Returns true if this object points to a symbolic link (or to a shortcut on Windows); otherwise returns false.</p>
<p>On Unix (including Mac OS X), opening a symlink effectively opens the link's target. On Windows, it opens the <tt>.lnk</tt> file itself.</p>
<p>Example:</p>
<pre>    QFileInfo info(fileName);
    if (info.isSymLink())
        fileName = info.symLinkTarget();</pre>

*/"/>
    <method name="public final boolean isWritable()" doc="/**
<p>Returns true if the user can write to the file; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime lastModified()" doc="/**
<p>Returns the date and time when the file was last modified.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDateTime lastRead()" doc="/**
<p>Returns the date and time when the file was last read (accessed).</p>
<p>On platforms where this information is not available, returns the same as lastModified().</p>

*/"/>
    <method name="public final boolean makeAbsolute()" doc="/**
<p>Converts the file's path to an absolute path if it is not already in that form. Returns true to indicate that the path was converted; otherwise returns false to indicate that the path was already absolute.</p>

*/"/>
    <method name="public final java.lang.String owner()" doc="/**
<p>Returns the owner of the file. On systems where files do not have owners, or if an error occurs, an empty string is returned.</p>
<p>This function can be time consuming under Unix (in the order of milliseconds).</p>

*/"/>
    <method name="public final int ownerId()" doc="/**
<p>Returns the id of the owner of the file.</p>
<p>On Windows and on systems where files do not have owners this function returns ((uint) -2).</p>

*/"/>
    <method name="public final java.lang.String path()" doc="/**
<p>Returns the file's path. This doesn't include the file name.</p>

*/"/>
    <method name="public final boolean permission(com.trolltech.qt.core.QFile.Permissions permissions__0)" doc="/**
<p>Tests for file permissions. The <i>permissions</i> argument can be several flags of type QFile::Permissions OR-ed together to check for permission combinations.</p>
<p>On systems where files do not have permissions this function always returns true.</p>
<p>Example:</p>
<pre>    QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
    if (fi.permission(QFile::WriteUser | QFile::ReadGroup))
        qWarning(&quot;I can change the file; my group can read the file&quot;);
    if (fi.permission(QFile::WriteGroup | QFile::WriteOther))
        qWarning(&quot;The group or others can change the file&quot;);</pre>

*/"/>
    <method name="public final com.trolltech.qt.core.QFile.Permissions permissions()" doc="/**
<p>Returns the complete OR-ed together combination of QFile::Permissions for the file.</p>

*/"/>
    <method name="public final java.lang.String readLink()" doc="/**
<p>Use symLinkTarget() instead.</p>

*/"/>
    <method name="public final void refresh()" doc="/**
<p>Refreshes the information about the file, i.e. reads in information from the file system the next time a cached property is fetched.</p>

*/"/>
    <method name="public final void setCaching(boolean on__0)" doc="/**
<p>If <i>enable</i> is true, enables caching of file information. If <i>enable</i> is false caching is disabled.</p>
<p>When caching is enabled, QFileInfo reads the file information from the file system the first time it's needed, but generally not later.</p>
<p>Caching is enabled by default.</p>

*/"/>
    <method name="public final void setFile(com.trolltech.qt.core.QFile file__0)" doc="/**
<p>Sets the file that the QFileInfo provides information about to <i>file</i>.</p>
<p>If <i>file</i> includes a relative path, the QFileInfo will also have a relative path.</p>

*/"/>
    <method name="public final void setFile(java.lang.String file__0)" doc="/**
<p>Sets the file that the QFileInfo provides information about to <i>file</i>.</p>
<p>The <i>file</i> can also include an absolute or relative file path. Absolute paths begin with the directory separator (e.g. &quot;/&quot; under Unix) or a drive specification (under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory.</p>
<p>Example:</p>
<pre>    QString absolute = &quot;/local/bin&quot;;
    QString relative = &quot;local/bin&quot;;
    QFileInfo absFile(absolute);
    QFileInfo relFile(relative);

    QDir::setCurrent(QDir::rootPath());
<span class=&quote;comment&quote;>    // absFile and relFile now point to the same file</span>

    QDir::setCurrent(&quot;/tmp&quot;);
<span class=&quote;comment&quote;>    // absFile now points to &quot;/local/bin&quot;,</span>
<span class=&quote;comment&quote;>    // while relFile points to &quot;/tmp/local/bin&quot;</span></pre>

*/"/>
    <method name="public final void setFile(com.trolltech.qt.core.QDir dir__0, java.lang.String file__1)" doc="/**
<p>Sets the file that the QFileInfo provides information about to <i>file</i> in directory <i>dir</i>.</p>
<p>If <i>file</i> includes a relative path, the QFileInfo will also have a relative path.</p>

*/"/>
    <method name="public final long size()" doc="/**
<p>Returns the file size in bytes. If the file does not exist or cannot be fetched, 0 is returned.</p>

*/"/>
    <method name="public final java.lang.String suffix()" doc="/**
<p>Returns the suffix of the file.</p>
<p>The suffix consists of all characters in the file after (but not including) the last '.'.</p>
<p>Example:</p>
<pre>    QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);
    QString ext = fi.suffix();  <span class=&quote;comment&quote;>// ext = &quot;gz&quot;</span></pre>
<p>The suffix of a file is computed equally on all platforms, independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix has an empty base name, and the suffix is &quot;bashrc&quot;).</p>

*/"/>
    <method name="public final java.lang.String symLinkTarget()" doc="/**
<p>Returns the absolute path to the file or directory a symlink (or shortcut on Windows) points to, or a an empty string if the object isn't a symbolic link.</p>
<p>This name may not represent an existing file; it is only a string. QFileInfo::exists() returns true if the symlink points to an existing file.</p>

*/"/>
</class>
