<class name="QToolButton" doc="/**
<p>The QToolButton class provides a quick-access button to commands or options, usually used inside a QToolBar.</p>
<p>A tool button is a special button that provides quick-access to specific commands or options. As opposed to a normal command button, a tool button usually doesn't show a text label, but shows an icon instead.</p>
<p>Tool buttons are normally created when new QAction instances are created with QToolBar::addAction() or existing actions are added to a toolbar with QToolBar::addAction(). It is also possible to construct tool buttons in the same way as any other widget, and arrange them alongside other widgets in layouts.</p>
<p>One classic use of a tool button is to select tools; for example, the &quot;pen&quot; tool in a drawing program. This would be implemented by using a QToolButton as a toggle button (see setToggleButton()).</p>
<p>QToolButton supports auto-raising. In auto-raise mode, the button draws a 3D frame only when the mouse points at it. The feature is automatically turned on when a button is used inside a QToolBar. Change it with setAutoRaise().</p>
<p>A tool button's icon is set as QIcon. This makes it possible to specify different pixmaps for the disabled and active state. The disabled pixmap is used when the button's functionality is not available. The active pixmap is displayed when the button is auto-raised because the mouse pointer is hovering over it.</p>
<p>The button's look and dimension is adjustable with setToolButtonStyle() and setIconSize(). When used inside a QToolBar in a QMainWindow, the button automatically adjusts to QMainWindow's settings (see QMainWindow::setToolButtonStyle() and QMainWindow::setIconSize()). Instead of an icon, a tool button can also display an arrow symbol, specified with arrowType.</p>
<p>A tool button can offer additional choices in a popup menu. The popup menu can be set using setMenu(). Use setPopupMode() to configure the different modes available for tool buttons with a menu set. The default mode is DelayedPopupMode which is sometimes used with the &quot;Back&quot; button in a web browser. After pressing and holding the button down for a while, a menu pops up showing a list of possible pages to jump to. The default delay is 600 ms; you can adjust it with setPopupDelay().</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image assistant-toolbar1.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt Assistant's toolbar contains tool buttons that are associated with actions used in other parts of the main window.</td></tr>
</table></p>

*/">
    <method name="public QToolButton(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs an empty tool button with parent <i>parent</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.ArrowType arrowType()"/>
    <method name="public final boolean autoRaise()"/>
    <method name="public final com.trolltech.qt.gui.QAction defaultAction()" doc="/**
<p>Returns the default action.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMenu menu()" doc="/**
<p>Returns the associated menu, or 0 if no menu has been defined.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QToolButton.ToolButtonPopupMode popupMode()"/>
    <method name="public final void setArrowType(com.trolltech.qt.core.Qt.ArrowType type__0)"/>
    <method name="public final void setAutoRaise(boolean enable__0)"/>
    <method name="public final void setDefaultAction(com.trolltech.qt.gui.QAction arg__0)" doc="/**
<p>Sets the default action to <i>action</i>.</p>
<p>If a tool button has a default action, the action defines the button's properties like text, icon, tool tip, etc.</p>

*/"/>
    <method name="public final void setMenu(com.trolltech.qt.gui.QMenu menu__0)" doc="/**
<p>Associates the given <i>menu</i> with this tool button.</p>
<p>The menu will be shown according to the button's popupMode.</p>
<p>Ownership of the menu is not transferred to the tool button.</p>

*/"/>
    <method name="public final void setPopupMode(com.trolltech.qt.gui.QToolButton.ToolButtonPopupMode mode__0)"/>
    <method name="public final void setToolButtonStyle(com.trolltech.qt.core.Qt.ToolButtonStyle style__0)"/>
    <method name="public final void showMenu()" doc="/**
<p>Shows (pops up) the associated popup menu. If there is no such menu, this function does nothing. This function does not return until the popup menu has been closed by the user.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.ToolButtonStyle toolButtonStyle()"/>
    <method name="protected void actionEvent(com.trolltech.qt.gui.QActionEvent arg__0)"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="protected void enterEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected boolean hitButton(com.trolltech.qt.core.QPoint pos__0)"/>
    <method name="protected void leaveEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSizeHint()"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void nextCheckState()"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)" doc="/**
<p>Paints the button in response to the paint <i>event</i>.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="protected void timerEvent(com.trolltech.qt.core.QTimerEvent arg__0)"/>
    <enum name="ToolButtonPopupMode" doc="/**
<p>Describes how a menu should be popped up for tool buttons that has a menu set or contains a list of actions.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>After pressing and holding the tool button down for a certain amount of time (the timeout is style dependant, see QStyle::SH_ToolButton_PopupDelay), the menu is displayed. A typical application example is the &quot;back&quot; button in some web browsers's tool bars. If the user clicks it, the browser simply browses back to the previous page. If the user presses and holds the button down for a while, the tool button shows a menu containing the current history list</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>In this mode the tool button displays a special arrow to indicate that a menu is present. The menu is displayed when the arrow part of the button is pressed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The menu is displayed, without delay, when the tool button is pressed. In this mode, the button's own action is not triggered.</td></tr>
</table></p>

*/"/>
</class>
