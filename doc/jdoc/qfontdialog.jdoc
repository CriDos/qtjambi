<class name="QFontDialog" doc="/**
<p>The QFontDialog class provides a dialog widget for selecting a font.</p>
<p>The usual way to use this class is to call one of the static convenience functions, e.g. getFont().</p>
<p>Examples:</p>
<pre>    bool ok;
    QFont font = QFontDialog::getFont(
                    &amp;ok, QFont(&quot;Helvetica [Cronyx]&quot;, 10), this);
    if (ok) {
        <span class=&quote;comment&quote;>// the user clicked OK and font is set to the font the user selected</span>
    } else {
        <span class=&quote;comment&quote;>// the user canceled the dialog; font is set to the initial</span>
        <span class=&quote;comment&quote;>// value, in this case Helvetica [Cronyx], 10</span>
    }</pre>
<p>The dialog can also be used to set a widget's font directly:</p>
<pre>    myWidget.setFont(QFontDialog::getFont(0, myWidget.font()));</pre>
<p>If the user clicks OK the font they chose will be used for myWidget, and if they click Cancel the original font is used.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image plastique-fontdialog.png]</font></p>
*/">
    <method name="public final static com.trolltech.qt.gui.QFont getFont(com.trolltech.qt.QNativePointer ok__0, com.trolltech.qt.gui.QWidget parent__1)" doc="/**
<p>Executes a modal font dialog and returns a font.</p>
<p>If the user clicks OK, the selected font is returned. If the user clicks Cancel, the Qt default font is returned.</p>
<p>The dialog is constructed with the given <i>parent</i>. If the <i>ok</i> parameter is not-null, <i>*a</i> ok is set to true if the user clicked OK, and false if the user clicked Cancel.</p>
<p>This static function is less functional than the full QFontDialog object, but is convenient and easy to use.</p>
<p>Example:</p>
<pre>    bool ok;
    QFont font = QFontDialog::getFont(&amp;ok, this);
    if (ok) {
        <span class=&quote;comment&quote;>// font is set to the font the user selected</span>
    } else {
        <span class=&quote;comment&quote;>// the user canceled the dialog; font is set to the default</span>
        <span class=&quote;comment&quote;>// application font, QApplication::font()</span>
    }</pre>

*/"/>
    <method name="public final static com.trolltech.qt.gui.QFont getFont(com.trolltech.qt.QNativePointer ok__0, com.trolltech.qt.gui.QFont def__1, com.trolltech.qt.gui.QWidget parent__2)"/>
    <method name="public final static com.trolltech.qt.gui.QFont getFont(com.trolltech.qt.QNativePointer ok__0, com.trolltech.qt.gui.QFont def__1, com.trolltech.qt.gui.QWidget parent__2, java.lang.String caption__3)" doc="/**
<p>Executes a modal font dialog and returns a font.</p>
<p>If the user clicks OK, the selected font is returned. If the user clicks Cancel, the <i>initial</i> font is returned.</p>
<p>The dialog is constructed with the given <i>parent</i>. <i>caption</i> is shown as the window title of the dialog and <i>initial</i> is the initially selected font. If the <i>ok</i> parameter is not-null, <i>*a</i> ok is set to true if the user clicked OK, and set to false if the user clicked Cancel.</p>
<p>This static function is less flexible than the full QFontDialog object, but is convenient and easy to use.</p>
<p>Examples:</p>
<pre>    bool ok;
    QFont font = QFontDialog::getFont(&amp;ok, QFont(&quot;Times&quot;, 12), this);
    if (ok) {
        <span class=&quote;comment&quote;>// font is set to the font the user selected</span>
    } else {
        <span class=&quote;comment&quote;>// the user canceled the dialog; font is set to the initial</span>
        <span class=&quote;comment&quote;>// value, in this case Times, 12.</span>
    }</pre>
<p>The dialog can also be used to set a widget's font directly:</p>
<pre>    myWidget.setFont(QFontDialog::getFont(0, myWidget.font()));</pre>
<p>In this example, if the user clicks OK the font they chose will be used, and if they click Cancel the original font is used.</p>

*/"/>
</class>
