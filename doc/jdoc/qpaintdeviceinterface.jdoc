<class name="QPaintDeviceInterface" doc="/**
<p>The QPaintDevice class is the base class of objects that can be painted.</p>
<p>A paint device is an abstraction of a two-dimensional space that can be drawn using a QPainter. Its default coordinate system has its origin located at the top-left position. X increases to the right and Y increases downwards. The unit is one pixel.</p>
<p>The drawing capabilities of QPaintDevice are currently implemented by the QWidget, QImage, QPixmap, QGLPixelBuffer, QPicture, and QPrinter subclasses.</p>
<p>To implement support for a new backend, you must derive from QPaintDevice and reimplement the virtual paintEngine() function to tell QPainter which paint engine should be used to draw on this particular device. Note that you also must create a corresponding paint engine to be able to draw on the device, i.e derive from QPaintEngine and reimplement its virtual functions.</p>
<p><b>Warning:</b> Qt requires that a QApplication object exists before any paint devices can be created. Paint devices access window system resources, and these resources are not initialized before an application object is created.</p>
<p>The QPaintDevice class provides several functions returning the various device metrics: The depth() function returns its bit depth (number of bit planes). The height() function returns its height in default coordinate system units (e.g. pixels for QPixmap and QWidget) while heightMM() returns the height of the device in millimeters. Similiarily, the width() and widthMM() functions return the width of the device in default coordinate system units and in millimeters, respectively. Alternatively, the protected metric() function can be used to retrieve the metric information by specifying the desired PaintDeviceMetric as argument.</p>
<p>The logicalDpiX() and logicalDpiY() functions return the horizontal and vertical resolution of the device in dots per inch. The physicalDpiX() and physicalDpiY() functions also return the resolution of the device in dots per inch, but note that if the logical and vertical resolution differ, the corresponding QPaintEngine must handle the mapping. Finally, the numColors() function returns the number of different colors available for the paint device.</p>

*/">
    <method name="public int depth()" doc="/**
<p>Returns the bit depth (number of bit planes) of the paint device.</p>

*/"/>
    <method name="public int devType()" doc="/**
<p>Returns the device type identifier, which is QInternal::Widget if the device is a QWidget, QInternal::Pixmap if it's a QPixmap, QInternal::Printer if it's a QPrinter, QInternal::Picture if it's a QPicture, or QInternal::UnknownDevice in other cases.</p>

*/"/>
    <method name="public int height()" doc="/**
<p>Returns the height of the paint device in default coordinate system units (e.g. pixels for QPixmap and QWidget).</p>

*/"/>
    <method name="public int heightMM()" doc="/**
<p>Returns the height of the paint device in millimeters.</p>

*/"/>
    <method name="public int logicalDpiX()" doc="/**
<p>Returns the horizontal resolution of the device in dots per inch, which is used when computing font sizes. For X11, this is usually the same as could be computed from widthMM(), but it varies on Windows.</p>
<p>Note that if the logicalDpiX() doesn't equal the physicalDpiX(), the corresponding QPaintEngine must handle the resolution mapping.</p>

*/"/>
    <method name="public int logicalDpiY()" doc="/**
<p>Returns the vertical resolution of the device in dots per inch, which is used when computing font sizes. For X11, this is usually the same as could be computed from heightMM(), but it varies on Windows.</p>
<p>Note that if the logicalDpiY() doesn't equal the physicalDpiY(), the corresponding QPaintEngine must handle the resolution mapping.</p>

*/"/>
    <method name="public int metric(com.trolltech.qt.gui.QPaintDevice.PaintDeviceMetric metric__0)" doc="/**
<p>Returns the metric information for the given paint device <i>metric</i>.</p>

*/"/>
    <method name="public int numColors()" doc="/**
<p>Returns the number of different colors available for the paint device. Since this value is an int, it will not be sufficient to represent the number of colors on 32 bit displays, in this case INT_MAX is returned instead.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QPaintEngine paintEngine()" doc="/**
<p>Returns a pointer to the paint engine used for drawing on the device.</p>

*/"/>
    <method name="public boolean paintingActive()" doc="/**
<p>Returns true if the device is currently being painted on, i.e. someone has called QPainter::begin() but not yet called QPainter::end() for this device; otherwise returns false.</p>

*/"/>
    <method name="public int physicalDpiX()" doc="/**
<p>Returns the horizontal resolution of the device in dots per inch.</p>
<p>Note that if the physicalDpiX() doesn't equal the logicalDpiX(), the corresponding QPaintEngine must handle the resolution mapping.</p>

*/"/>
    <method name="public int physicalDpiY()" doc="/**
<p>Returns the horizontal resolution of the device in dots per inch.</p>
<p>Note that if the physicalDpiY() doesn't equal the logicalDpiY(), the corresponding QPaintEngine must handle the resolution mapping.</p>

*/"/>
    <method name="public int width()" doc="/**
<p>Returns the width of the paint device in default coordinate system units (e.g. pixels for QPixmap and QWidget).</p>

*/"/>
    <method name="public int widthMM()" doc="/**
<p>Returns the width of the paint device in millimeters.</p>

*/"/>
</class>
