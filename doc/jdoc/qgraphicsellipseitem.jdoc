<class name="QGraphicsEllipseItem" doc="/**
<p>The QGraphicsEllipseItem class provides an ellipse item that you can add to a QGraphicsScene.</p>
<p>QGraphicsEllipseItem respresents an ellipse with a fill and an outline, and you can also use it for ellipse segments (see startAngle(), spanAngle()).</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image graphicsview-ellipseitem.png]</font></td><td><font color=&quote;red&quote;>[Missing image graphicsview-ellipseitem-pie.png]</font></td></tr>
</table></p>
<p>To set the item's ellipse, pass a QRectF to QGraphicsEllipseItem's constructor, or call setRect(). The rect() function returns the current ellipse geometry.</p>
<p>QGraphicsEllipseItem uses the rect and the pen width to provide a reasonable implementation of boundingRect(), shape(), and contains(). The paint() function draws the ellipse using the item's associated pen and brush, which you can set by calling setPen() and setBrush().</p>

*/">
    <method name="public QGraphicsEllipseItem(double x__0, double y__1, double w__2, double h__3, com.trolltech.qt.gui.QGraphicsItemInterface parent__4, com.trolltech.qt.gui.QGraphicsScene scene__5)" doc="/**
<p>Constructs a QGraphicsEllipseItem using the rectangle defined by (<i>x</i>, <i>y</i>) and the given <i>width</i> and <i>height</i>, as the default rectangle. The <i>parent</i> and <i>scene</i> parameters are passed to QAbstractGraphicsShapeItem's constructor.</p>

*/"/>
    <method name="public QGraphicsEllipseItem(com.trolltech.qt.gui.QGraphicsItemInterface parent__0, com.trolltech.qt.gui.QGraphicsScene scene__1)" doc="/**
<p>Constructs a QGraphicsEllipseItem. The <i>parent</i> and <i>scene</i> parameters are passed to QAbstractGraphicsShapeItem's constructor.</p>

*/"/>
    <method name="public QGraphicsEllipseItem(com.trolltech.qt.core.QRectF rect__0, com.trolltech.qt.gui.QGraphicsItemInterface parent__1, com.trolltech.qt.gui.QGraphicsScene scene__2)" doc="/**
<p>Constructs a QGraphicsEllipseItem using <i>rect</i> as the default rectangle. The <i>parent</i> and <i>scene</i> parameters are passed to QAbstractGraphicsShapeItem's constructor.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF rect()" doc="/**
<p>Returns the item's ellipse geometry as a QRectF.</p>

*/"/>
    <method name="public final void setRect(double x__0, double y__1, double w__2, double h__3)" doc="/**
<p>Sets the item's rectangle to the rectangle defined by (<i>x</i>, <i>y</i>) and the given <i>width</i> and <i>height</i>.</p>
<p>This convenience function is equivalent to calling <tt>setRect(QRectF(x, y, width, height))</tt></p>

*/"/>
    <method name="public final void setRect(com.trolltech.qt.core.QRectF rect__0)" doc="/**
<p>Sets the item's ellipse geometry to <i>rect</i>. The rectangle's left edge defines the left edge of the ellipse, and the rectangle's top edge describes the top of the ellipse. The height and width of the rectangle describe the height and width of the ellipse.</p>

*/"/>
    <method name="public final void setSpanAngle(int angle__0)" doc="/**
<p>Sets the span angle for an ellipse segment to <i>angle</i>, which is in 16ths of a degree. This angle is used together with startAngle() to represent an ellipse segment (a pie). By default, the span angle is 5760 (360 * 16, a full ellipse).</p>

*/"/>
    <method name="public final void setStartAngle(int angle__0)" doc="/**
<p>Sets the start angle for an ellipse segment to <i>angle</i>, which is in 16ths of a degree. This angle is used together with spanAngle() for representing an ellipse segment (a pie). By default, the start angle is 0.</p>

*/"/>
    <method name="public final int spanAngle()" doc="/**
<p>Returns the span angle of an ellipse segment in 16ths of a degree. This angle is used together with startAngle() for representing an ellipse segment (a pie). By default, this function returns 5760 (360 * 16, a full ellipse).</p>

*/"/>
    <method name="public final int startAngle()" doc="/**
<p>Returns the start angle for an ellipse segment in 16ths of a degree. This angle is used together with spanAngle() for representing an ellipse segment (a pie). By default, the start angle is 0.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QRectF boundingRect()"/>
    <method name="public boolean contains(com.trolltech.qt.core.QPointF point__0)"/>
    <method name="public java.lang.Object extension(java.lang.Object variant__0)"/>
    <method name="public boolean isObscuredBy(com.trolltech.qt.gui.QGraphicsItemInterface item__0)"/>
    <method name="public com.trolltech.qt.gui.QPainterPath opaqueArea()"/>
    <method name="public void paint(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionGraphicsItem option__1, com.trolltech.qt.gui.QWidget widget__2)"/>
    <method name="public void setExtension(com.trolltech.qt.gui.QGraphicsItem.Extension extension__0, java.lang.Object variant__1)" doc="/**
<p>Note: This is provided as a hook to avoid future problems related to adding virtual functions.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QPainterPath shape()"/>
    <method name="public boolean supportsExtension(com.trolltech.qt.gui.QGraphicsItem.Extension extension__0)" doc="/**
<p>Note: This is provided as a hook to avoid future problems related to adding virtual functions.</p>

*/"/>
    <method name="public int type()"/>
</class>
