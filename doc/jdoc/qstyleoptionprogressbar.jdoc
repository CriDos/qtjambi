<class name="QStyleOptionProgressBar" doc="/**
<p>The QStyleOptionProgressBar class is used to describe the parameters necessary for drawing a progress bar.</p>
<p>Since Qt 4.1, Qt uses the QStyleOptionProgressBarV2 subclass for drawing QProgressBar.</p>
<p>An instance of the QStyleOptionProgressBar class has type SO_ProgressBar and version 1.</p>
<p>The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles. The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally don't need to check it.</p>
<p>If you create your own QStyle subclass, you should handle both QStyleOptionProgressBar and QStyleOptionProgressBarV2.</p>
<p>For an example demonstrating how style options can be used, see the Styles example.</p>

*/">
    <method name="public QStyleOptionProgressBar(com.trolltech.qt.gui.QStyleOptionProgressBar other__0)" doc="/**
<p>Constructs a copy of the <i>other</i> style option.</p>

*/"/>
    <method name="public QStyleOptionProgressBar()" doc="/**
<p>Constructs a QStyleOptionProgressBar, initializing the members variables to their default values.</p>

*/"/>
    <method name="protected QStyleOptionProgressBar(int version__0)"/>
    <enum name="StyleOptionVersion" doc="/**
<p>This enum is used to hold information about the version of the style option, and is defined for each QStyleOption subclass.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>1</td></tr>
</table></p>
<p>The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally don't need to check it.</p>

*/"/>
    <enum name="StyleOptionType" doc="/**
<p>This enum is used to hold information about the type of the style option, and is defined for each QStyleOption subclass.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The type of style option provided (SO_ProgressBar for this class).</td></tr>
</table></p>
<p>The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.</p>

*/"/>
    <method name="public final int minimum()" doc="/**
<p>The minimum value for the progress bar</p>
<p>This is the minimum value in the progress bar. The default value is 0.</p>

*/"/>
    <method name="public final void setMinimum(int minimum)" doc="/**
<p>The minimum value for the progress bar</p>
<p>This is the minimum value in the progress bar. The default value is 0.</p>

*/"/>
    <method name="public final int maximum()" doc="/**
<p>the maximum value for the progress bar</p>
<p>This is the maximum value in the progress bar. The default value is 0.</p>

*/"/>
    <method name="public final void setMaximum(int maximum)" doc="/**
<p>the maximum value for the progress bar</p>
<p>This is the maximum value in the progress bar. The default value is 0.</p>

*/"/>
    <method name="public final int progress()" doc="/**
<p>the current progress for the progress bar.</p>
<p>The current progress. A value of QStyleOptionProgressBar::minimum - 1 indicates that the progress hasn't started yet. The default value is 0.</p>

*/"/>
    <method name="public final void setProgress(int progress)" doc="/**
<p>the current progress for the progress bar.</p>
<p>The current progress. A value of QStyleOptionProgressBar::minimum - 1 indicates that the progress hasn't started yet. The default value is 0.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Alignment textAlignment()" doc="/**
<p>the text alignment for the text in the QProgressBar</p>
<p>This can be used as a guide on where the text should be in the progressbar. The default value is Qt::AlignLeft.</p>

*/"/>
    <method name="public final void setTextAlignment(com.trolltech.qt.core.Qt.Alignment textAlignment)" doc="/**
<p>the text alignment for the text in the QProgressBar</p>
<p>This can be used as a guide on where the text should be in the progressbar. The default value is Qt::AlignLeft.</p>

*/"/>
    <method name="public final java.lang.String text()" doc="/**
<p>the text for the progress bar</p>
<p>The progress bar text is usually just the progress expressed as a string. An empty string indicates that the progress bar has not started yet. The default value is an empty string.</p>

*/"/>
    <method name="public final void setText(java.lang.String text)" doc="/**
<p>the text for the progress bar</p>
<p>The progress bar text is usually just the progress expressed as a string. An empty string indicates that the progress bar has not started yet. The default value is an empty string.</p>

*/"/>
    <method name="public final boolean textVisible()" doc="/**
<p>a flag indicating whether or not text is visible</p>
<p>If this flag is true then the text is visible. Otherwise, the text is not visible. The default value is false.</p>

*/"/>
    <method name="public final void setTextVisible(boolean textVisible)" doc="/**
<p>a flag indicating whether or not text is visible</p>
<p>If this flag is true then the text is visible. Otherwise, the text is not visible. The default value is false.</p>

*/"/>
</class>
