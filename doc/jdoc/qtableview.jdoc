<class name="QTableView" doc="/**
<p>The QTableView class provides a default model/view implementation of a table view.</p>
<p>A QTableView implements a table view that displays items from a model. This class is used to provide standard tables that were previously provided by the QTable class, but using the more flexible approach provided by Qt's model/view architecture.</p>
<p>The QTableView class is one of the Model/View Classes and is part of Qt's model/view framework.</p>
<p>QTableView implements the interfaces defined by the QAbstractItemView class to allow it to display data provided by models derived from the QAbstractItemModel class.</p>
<p>The table has a vertical header that can be obtained using the verticalHeader() function, and a horizontal header that is available through the horizontalHeader() function. The height of each row in the table can be found by using rowHeight(); similarly, the width of columns can be found using columnWidth(). They are both just QWidgets so you can hide either of them using their hide() functions.</p>
<p>Rows and columns can be hidden and shown with hideRow(), hideColumn(), showRow(), and showColumn(). They can be selected with selectRow() and selectColumn(). The table will show a grid depending on the showGrid property.</p>
<p>The items shown in a table view, like those in the other item views, are rendered and edited using standard delegates. However, for some tasks it is sometimes useful to be able to insert widgets in a table instead. Widgets are set for particular indexes with the setIndexWidget() function, and later retrieved with indexWidget().</p>
<p>For some specialized forms of tables it is useful to be able to convert between row and column indexes and widget coordinates. The rowAt() function provides the y-coordinate within the view of the specified row; the row index can be used to obtain a corresponding y-coordinate with rowViewportPosition(). The columnAt() and columnViewportPosition() functions provide the equivalent conversion operations between x-coordinates and column indexes.</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image windowsxp-tableview.png]</font></td><td><font color=&quote;red&quote;>[Missing image macintosh-tableview.png]</font></td><td><font color=&quote;red&quote;>[Missing image plastique-tableview.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>A Windows XP style table view.</td><td>A Macintosh style table view.</td><td>A Plastique style table view.</td></tr>
</table></p>

*/">
    <method name="public QTableView(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a table view with a <i>parent</i> to represent the data.</p>

*/"/>
    <method name="public final int columnAt(int x__0)" doc="/**
<p>Returns the column in which the given x-coordinate, <i>x</i>, in contents coordinates is located.</p>

*/"/>
    <method name="protected final void columnCountChanged(int oldCount__0, int newCount__1)" doc="/**
<p>This slot is called whenever columns are added or deleted. The previous number of columns is specified by <i>oldCount</i>, and the new number of columns is specified by <i>newCount</i>.</p>

*/"/>
    <method name="protected final void columnMoved(int column__0, int oldIndex__1, int newIndex__2)" doc="/**
<p>This slot is called to change the index of the given <i>column</i> in the table view. The old index is specified by <i>oldIndex</i>, and the new index by <i>newIndex</i>.</p>

*/"/>
    <method name="protected final void columnResized(int column__0, int oldWidth__1, int newWidth__2)" doc="/**
<p>This slot is called to change the width of the given <i>column</i>. The old width is specified by <i>oldWidth</i>, and the new width by <i>newWidth</i>.</p>

*/"/>
    <method name="public final int columnSpan(int row__0, int column__1)" doc="/**
<p>Returns the column span of the table element at (<i>row</i>, <i>column</i>). The default is 1.</p>

*/"/>
    <method name="public final int columnViewportPosition(int column__0)" doc="/**
<p>Returns the x-coordinate in contents coordinates of the given <i>column</i>.</p>

*/"/>
    <method name="public final int columnWidth(int column__0)" doc="/**
<p>Returns the width of the given <i>column</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.PenStyle gridStyle()"/>
    <method name="public final void hideColumn(int column__0)" doc="/**
<p>Hide the given <i>column</i>.</p>

*/"/>
    <method name="public final void hideRow(int row__0)" doc="/**
<p>Hide the given <i>row</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QHeaderView horizontalHeader()" doc="/**
<p>Returns the table view's horizontal header.</p>

*/"/>
    <method name="public final boolean isColumnHidden(int column__0)" doc="/**
<p>Returns true if the given <i>column</i> is hidden; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isRowHidden(int row__0)" doc="/**
<p>Returns true if the given <i>row</i> is hidden; otherwise returns false.</p>

*/"/>
    <method name="public final void resizeColumnToContents(int column__0)" doc="/**
<p>Resizes the given <i>column</i> based on the size hints of the delegate used to render each item in the column.</p>

*/"/>
    <method name="public final void resizeColumnsToContents()" doc="/**
<p>Resizes all columns based on the size hints of the delegate used to render each item in the columns.</p>

*/"/>
    <method name="public final void resizeRowToContents(int row__0)" doc="/**
<p>Resizes the given <i>row</i> based on the size hints of the delegate used to render each item in the row.</p>

*/"/>
    <method name="public final void resizeRowsToContents()" doc="/**
<p>Resizes all rows based on the size hints of the delegate used to render each item in the rows.</p>

*/"/>
    <method name="public final int rowAt(int y__0)" doc="/**
<p>Returns the row in which the given y-coordinate, <i>y</i>, in contents coordinates is located.</p>

*/"/>
    <method name="protected final void rowCountChanged(int oldCount__0, int newCount__1)" doc="/**
<p>This slot is called whenever rows are added or deleted. The previous number of rows is specified by <i>oldCount</i>, and the new number of rows is specified by <i>newCount</i>.</p>

*/"/>
    <method name="public final int rowHeight(int row__0)" doc="/**
<p>Returns the height of the given <i>row</i>.</p>

*/"/>
    <method name="protected final void rowMoved(int row__0, int oldIndex__1, int newIndex__2)" doc="/**
<p>This slot is called to change the index of the given <i>row</i> in the table view. The old index is specified by <i>oldIndex</i>, and the new index by <i>newIndex</i>.</p>

*/"/>
    <method name="protected final void rowResized(int row__0, int oldHeight__1, int newHeight__2)" doc="/**
<p>This slot is called to change the height of the given <i>row</i>. The old height is specified by <i>oldHeight</i>, and the new height by <i>newHeight</i>.</p>

*/"/>
    <method name="public final int rowSpan(int row__0, int column__1)" doc="/**
<p>Returns the row span of the table element at (<i>row</i>, <i>column</i>). The default is 1.</p>

*/"/>
    <method name="public final int rowViewportPosition(int row__0)" doc="/**
<p>Returns the y-coordinate in contents coordinates of the given <i>row</i>.</p>

*/"/>
    <method name="public final void selectColumn(int column__0)" doc="/**
<p>Selects the given <i>column</i> in the table view if the current SelectionMode and SelectionBehavior allows columns to be selected.</p>

*/"/>
    <method name="public final void selectRow(int row__0)" doc="/**
<p>Selects the given <i>row</i> in the table view if the current SelectionMode and SelectionBehavior allows rows to be selected.</p>

*/"/>
    <method name="public final void setColumnHidden(int column__0, boolean hide__1)" doc="/**
<p>If <i>hide</i> is true the given <i>column</i> will be hidden; otherwise it will be shown.</p>

*/"/>
    <method name="public final void setColumnWidth(int column__0, int width__1)" doc="/**
<p>Sets the width of the given <i>column</i> to be <i>width</i>.</p>

*/"/>
    <method name="public final void setGridStyle(com.trolltech.qt.core.Qt.PenStyle style__0)"/>
    <method name="public final void setHorizontalHeader(com.trolltech.qt.gui.QHeaderView header__0)" doc="/**
<p>Sets the widget to use for the vertical header to <i>header</i>.</p>

*/"/>
    <method name="public final void setRowHeight(int row__0, int height__1)" doc="/**
<p>Sets the height of the given <i>row</i> to be <i>height</i>.</p>

*/"/>
    <method name="public final void setRowHidden(int row__0, boolean hide__1)" doc="/**
<p>If <i>hide</i> is true <i>row</i> will be hidden, otherwise it will be shown.</p>

*/"/>
    <method name="public final void setShowGrid(boolean show__0)"/>
    <method name="public final void setSpan(int row__0, int column__1, int rowSpan__2, int columnSpan__3)" doc="/**
<p>Sets the span of the table element at (<i>row</i>, <i>column</i>) to (<i>rowSpan</i>, <i>columnSpan</i>).</p>

*/"/>
    <method name="public final void setVerticalHeader(com.trolltech.qt.gui.QHeaderView header__0)" doc="/**
<p>Sets the widget to use for the horizontal header to <i>header</i>.</p>

*/"/>
    <method name="public final void showColumn(int column__0)" doc="/**
<p>Show the given <i>column</i>.</p>

*/"/>
    <method name="public final boolean showGrid()"/>
    <method name="public final void showRow(int row__0)" doc="/**
<p>Show the given <i>row</i>.</p>

*/"/>
    <method name="public final void sortByColumn(int column__0)" doc="/**
<p>Sorts the model by the values in the given <i>column</i>.</p>

*/"/>
    <method name="public final void sortByColumn(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sorts the model by the values in the given <i>column</i> in the given <i>order</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QHeaderView verticalHeader()" doc="/**
<p>Returns the table view's vertical header.</p>

*/"/>
    <method name="protected int horizontalOffset()" doc="/**
<p>Returns the horizontal offset of the items in the table view.</p>
<p>Note that the table view uses the horizontal header section positions to determine the positions of columns in the view.</p>

*/"/>
    <method name="protected void horizontalScrollbarAction(int action__0)"/>
    <method name="public com.trolltech.qt.core.QModelIndex indexAt(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Returns the index position of the model item corresponding to the table item at position <i>pos</i> in contents coordinates.</p>

*/"/>
    <method name="protected boolean isIndexHidden(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="public boolean isSortingEnabled()"/>
    <method name="protected com.trolltech.qt.core.QModelIndex moveCursor(com.trolltech.qt.gui.QAbstractItemView.CursorAction cursorAction__0, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__1)" doc="/**
<p>Moves the cursor in accordance with the given <i>cursorAction</i>, using the information provided by the <i>modifiers</i>.</p>

*/"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent e__0)" doc="/**
<p>Paints the table on receipt of the given paint event <i>event</i>.</p>

*/"/>
    <method name="protected void scrollContentsBy(int dx__0, int dy__1)" doc="/**
<p>Scroll the contents of the table view by (<i>dx</i>, <i>dy</i>).</p>

*/"/>
    <method name="public void scrollTo(com.trolltech.qt.core.QModelIndex index__0, com.trolltech.qt.gui.QAbstractItemView.ScrollHint hint__1)" doc="/**
<p>Scrolls the view if necessary to ensure that the item at <i>index</i> is visible. The view will try to position the item according to the given <i>hint</i>.</p>
<p>In the base class this is a pure virtual function.</p>

*/"/>
    <method name="protected java.util.List&lt;com.trolltech.qt.core.QModelIndex&gt; selectedIndexes()"/>
    <method name="public void setModel(com.trolltech.qt.core.QAbstractItemModel model__0)"/>
    <method name="public void setRootIndex(com.trolltech.qt.core.QModelIndex index__0)"/>
    <method name="protected void setSelection(com.trolltech.qt.core.QRect rect__0, com.trolltech.qt.gui.QItemSelectionModel.SelectionFlags command__1)" doc="/**
<p>Selects the items within the given <i>rect</i> and in accordance with the specified selection <i>flags</i>.</p>

*/"/>
    <method name="public void setSelectionModel(com.trolltech.qt.gui.QItemSelectionModel selectionModel__0)"/>
    <method name="public void setSortingEnabled(boolean enable__0)"/>
    <method name="public int sizeHintForColumn(int column__0)" doc="/**
<p>Returns the size hint for the given <i>column</i>'s width or -1 if there is no model.</p>
<p>If you need to set the width of a given column to a fixed value, call QHeaderView::resizeSection() on the table's horizontal header.</p>
<p>If you reimplement this function in a subclass, note that the value you return is only used when resizeColumnToContents() is called. In that case, if a larger column width is required by either the horizontal header or the item delegate, that width will be used instead.</p>

*/"/>
    <method name="public int sizeHintForRow(int row__0)" doc="/**
<p>Returns the size hint for the given <i>row</i>'s height or -1 if there is no model.</p>
<p>If you need to set the height of a given row to a fixed value, call QHeaderView::resizeSection() on the table's vertical header.</p>
<p>If you reimplement this function in a subclass, note that the value you return is only used when resizeRowToContents() is called. In that case, if a larger row height is required by either the vertical header or the item delegate, that width will be used instead.</p>

*/"/>
    <method name="protected void timerEvent(com.trolltech.qt.core.QTimerEvent event__0)"/>
    <method name="protected void updateGeometries()"/>
    <method name="protected int verticalOffset()" doc="/**
<p>Returns the vertical offset of the items in the table view.</p>
<p>Note that the table view uses the vertical header section positions to determine the positions of rows in the view.</p>

*/"/>
    <method name="protected void verticalScrollbarAction(int action__0)"/>
    <method name="protected com.trolltech.qt.gui.QStyleOptionViewItem viewOptions()"/>
    <method name="public com.trolltech.qt.core.QRect visualRect(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the rectangle on the viewport occupied by the given <i>index</i>. If the index is hidden in the view it will return a null QRect.</p>

*/"/>
    <method name="protected com.trolltech.qt.gui.QRegion visualRegionForSelection(com.trolltech.qt.gui.QItemSelection selection__0)" doc="/**
<p>Returns the rectangle from the viewport of the items in the given <i>selection</i>.</p>

*/"/>
</class>
