<class name="QEventLoop" doc="/**
<p>The QEventLoop class provides a means of entering and leaving an event loop.</p>
<p>At any time, you can create a QEventLoop object and call exec() on it to start a local event loop. From within the event loop, calling exit() will force exec() to return.</p>

*/">
    <method name="public QEventLoop(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs an event loop object with the given <i>parent</i>.</p>

*/"/>
    <method name="public final int exec(com.trolltech.qt.core.QEventLoop.ProcessEventsFlags flags__0)" doc="/**
<p>Enters the main event loop and waits until exit() is called. Returns the value that was passed to exit().</p>
<p>If <i>flags</i> are specified, only events of the types allowed by the <i>flags</i> will be processed.</p>
<p>It is necessary to call this function to start event handling. The main event loop receives events from the window system and dispatches these to the application widgets.</p>
<p>Generally speaking, no user interaction can take place before calling exec(). As a special case, modal widgets like QMessageBox can be used before calling exec(), because modal widgets use their own local event loop.</p>
<p>To make your application perform idle processing (i.e. executing a special function whenever there are no pending events), use a QTimer with 0 timeout. More sophisticated idle processing schemes can be achieved using processEvents().</p>

*/"/>
    <method name="public final void exit(int returnCode__0)" doc="/**
<p>Tells the event loop to exit with a return code.</p>
<p>After this function has been called, the event loop returns from the call to exec(). The exec() function returns <i>returnCode</i>.</p>
<p>By convention, a <i>returnCode</i> of 0 means success, and any non-zero value indicates an error.</p>
<p>Note that unlike the C library function of the same name, this function <i>does</i> return to the caller -- it is event processing that stops.</p>

*/"/>
    <method name="public final boolean isRunning()" doc="/**
<p>Returns true if the event loop is running; otherwise returns false. The event loop is considered running from the time when exec() is called until exit() is called.</p>

*/"/>
    <method name="public final boolean processEvents(com.trolltech.qt.core.QEventLoop.ProcessEventsFlags flags__0)" doc="/**
<p>Processes pending events that match <i>flags</i> until there are no more events to process.</p>
<p>This function is especially useful if you have a long running operation and want to show its progress without allowing user input; i.e. by using the ExcludeUserInputEvents flag.</p>
<p>This function is simply a wrapper for QAbstractEventDispatcher::processEvents(). See the documentation for that function for details.</p>

*/"/>
    <method name="public final void processEvents(com.trolltech.qt.core.QEventLoop.ProcessEventsFlags flags__0, int maximumTime__1)" doc="/**
<p>Process pending events that match <i>flags</i> for a maximum of <i>maxTime</i> milliseconds, or until there are no more events to process, whichever is shorter. This function is especially useful if you have a long running operation and want to show its progress without allowing user input, i.e. by using the ExcludeUserInputEvents flag.</p>
<p><b>Notes:</b></p>
<ul>
<li>This function does not process events continuously; it returns after all available events are processed.</li>
<li>Specifying the WaitForMoreEvents flag makes no sense and will be ignored.</li>
</ul>

*/"/>
    <method name="public final void quit()" doc="/**
<p>Tells the event loop to exit normally.</p>
<p>Same as exit(0).</p>

*/"/>
    <method name="public final void wakeUp()" doc="/**
<p>Wakes up the event loop.</p>

*/"/>
    <enum name="ProcessEventsFlag" doc="/**
<p>This enum controls the types of events processed by the processEvents() functions.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>All events are processed</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Do not process user input events, such as ButtonPress and KeyPress. Note that the events are not discarded; they will be delivered the next time processEvents() is called without the ExcludeUserInputEvents flag.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Do not process socket notifier events. Note that the events are not discarded; they will be delivered the next time processEvents() is called without the ExcludeSocketNotifiers flag.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Wait for events if no pending events are available.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Allow objects to be queued for deletion at a later time.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
</table></p>

*/"/>
</class>
