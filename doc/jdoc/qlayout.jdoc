<class name="QLayout" doc="/**
<p>The QLayout class is the base class of geometry managers.</p>
<p>This is an abstract base class inherited by the concrete classes QBoxLayout, QGridLayout, and QStackedLayout.</p>
<p>For users of QLayout subclasses or of QMainWindow there is seldom any need to use the basic functions provided by QLayout, such as setSizeConstraint() or setMenuBar(). See Layout Classes for more information.</p>
<p>To make your own layout manager, implement the functions addItem(), sizeHint(), setGeometry(), itemAt() and takeAt(). You should also implement minimumSize() to ensure your layout isn't resized to zero size if there is too little space. To support children whose heights depend on their widths, implement hasHeightForWidth() and heightForWidth(). See the Border Layout and Flow Layout examples for more information about implementing custom layout managers.</p>
<p>Geometry management stops when the layout manager is deleted.</p>

*/">
    <method name="public QLayout(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a new top-level QLayout, with parent <i>parent</i>. <i>parent</i> may not be 0.</p>
<p>There can be only one top-level layout for a widget. It is returned by QWidget::layout().</p>

*/"/>
    <method name="public QLayout()" doc="/**
<p>Constructs a new child QLayout.</p>
<p>This layout has to be inserted into another layout before geometry management will work.</p>

*/"/>
    <method name="public final boolean activate()" doc="/**
<p>Redoes the layout for parentWidget() if necessary.</p>
<p>You should generally not need to call this because it is automatically called at the most appropriate times.</p>

*/"/>
    <method name="protected final void addChildLayout(com.trolltech.qt.gui.QLayout l__0)" doc="/**
<p>This function is called from <tt>addLayout()</tt> functions in subclasses to add layout <i>l</i> as a sub-layout.</p>

*/"/>
    <method name="protected final void addChildWidget(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>This function is called from <tt>addWidget()</tt> functions in subclasses to add <i>w</i> as a child widget.</p>
<p>If <i>w</i> is already in a layout, this function will give a warning and remove <i>w</i> from the layout. This function must therefore be called before adding <i>w</i> to the layout's data structure.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QRect alignmentRect(com.trolltech.qt.core.QRect arg__0)" doc="/**
<p>Returns the rectangle that should be covered when the geometry of this layout is set to <i>r</i>, provided that this layout supports setAlignment().</p>
<p>The result is derived from sizeHint() and expanding(). It is never larger than <i>r</i>.</p>

*/"/>
    <method name="public final boolean isEnabled()" doc="/**
<p>Returns true if the layout is enabled; otherwise returns false.</p>

*/"/>
    <method name="public final int margin()"/>
    <method name="public final com.trolltech.qt.gui.QWidget menuBar()" doc="/**
<p>Returns the menu bar set for this layout, or 0 if no menu bar is set.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget parentWidget()" doc="/**
<p>Returns the parent widget of this layout, or 0 if this layout is not installed on any widget.</p>
<p>If the layout is a sub-layout, this function returns the parent widget of the parent layout.</p>

*/"/>
    <method name="public final void removeItem(com.trolltech.qt.gui.QLayoutItemInterface arg__0)" doc="/**
<p>Removes the layout item <i>item</i> from the layout. It is the caller's responsibility to delete the item.</p>
<p>Notice that <i>item</i> can be a layout (since QLayout inherits QLayoutItem).</p>

*/"/>
    <method name="public final void removeWidget(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Removes the widget <i>widget</i> from the layout. After this call, it is the caller's responsibility to give the widget a reasonable geometry or to put the widget back into a layout.</p>

*/"/>
    <method name="public final void setEnabled(boolean arg__0)" doc="/**
<p>Enables this layout if <i>enable</i> is true, otherwise disables it.</p>
<p>An enabled layout adjusts dynamically to changes; a disabled layout acts as if it did not exist.</p>
<p>By default all layouts are enabled.</p>

*/"/>
    <method name="public final void setMargin(int arg__0)"/>
    <method name="public final void setMenuBar(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Tells the geometry manager to place the menu bar <i>widget</i> at the top of parentWidget(), outside QWidget::contentsMargins(). All child widgets are placed below the bottom edge of the menu bar.</p>

*/"/>
    <method name="public final void setSizeConstraint(com.trolltech.qt.gui.QLayout.SizeConstraint arg__0)"/>
    <method name="public final void setSpacing(int arg__0)"/>
    <method name="public final com.trolltech.qt.gui.QLayout.SizeConstraint sizeConstraint()"/>
    <method name="public final int spacing()"/>
    <method name="public final int totalHeightForWidth(int w__0)" doc="/**
<p>Also takes contentsMargins and menu bar into account.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize totalMaximumSize()" doc="/**
<p>Also takes contentsMargins and menu bar into account.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize totalMinimumSize()" doc="/**
<p>Also takes contentsMargins and menu bar into account.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize totalSizeHint()" doc="/**
<p>Also takes contentsMargins and menu bar into account.</p>

*/"/>
    <method name="public final void update()" doc="/**
<p>Updates the layout for parentWidget().</p>
<p>You should generally not need to call this because it is automatically called at the most appropriate times.</p>

*/"/>
    <method name="protected final void widgetEvent(com.trolltech.qt.core.QEvent arg__0)" doc="/**
<p>Performs child widget layout when the parent widget is resized. Also handles removal of widgets. <i>e</i> is the event</p>

*/"/>
    <method name="public abstract void addItem(com.trolltech.qt.gui.QLayoutItemInterface arg__0)" doc="/**
<p>Implemented in subclasses to add an <i>item</i>. How it is added is specific to each subclass.</p>
<p>The ownership of <i>item</i> is transferred to the layout, and it's the layout's responsibility to delete it.</p>

*/"/>
    <method name="public void addWidget(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Adds widget <i>w</i> to this layout in a manner specific to the layout. This function uses addItem().</p>

*/"/>
    <method name="protected void childEvent(com.trolltech.qt.core.QChildEvent e__0)"/>
    <method name="public abstract int count()" doc="/**
<p>Must be implemented in subclasses to return the number of items in the layout.</p>

*/"/>
    <method name="public com.trolltech.qt.core.Qt.Orientations expandingDirections()" doc="/**
<p>Returns whether this layout can make use of more space than sizeHint(). A value of Qt::Vertical or Qt::Horizontal means that it wants to grow in only one dimension, whereas Qt::Vertical | Qt::Horizontal means that it wants to grow in both dimensions.</p>
<p>The default implementation returns Qt::Horizontal | Qt::Vertical. Subclasses reimplement it to return a meaningful value based on their child widgets's size policies.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QRect geometry()"/>
    <method name="public int indexOf(com.trolltech.qt.gui.QWidget arg__0)" doc="/**
<p>Searches for widget <i>widget</i> in this layout (not including child layouts).</p>
<p>Returns the index of <i>widget</i>, or -1 if <i>widget</i> is not found.</p>
<p>The default implementation iterates over all items using itemAt()</p>

*/"/>
    <method name="public void invalidate()"/>
    <method name="public boolean isEmpty()"/>
    <method name="public abstract com.trolltech.qt.gui.QLayoutItemInterface itemAt(int index__0)" doc="/**
<p>Must be implemented in subclasses to return the layout item at <i>index</i>. If there is no such item, the function must return 0. Items are numbered consecutively from 0. If an item is deleted, other items will be renumbered.</p>
<p>This function can be used to iterate over a layout. The following code will draw a rectangle for each layout item in the layout structure of the widget.</p>
<pre>    static void paintLayout(QPainter *painter, QLayoutItem *item)
    {
        QLayout *layout = item-&gt;layout();
        if (layout) {
            for (int i = 0; i &lt; layout-&gt;count(); ++i)
                paintLayout(painter, layout-&gt;itemAt(i));
        }
        painter-&gt;drawRect(lay-&gt;geometry());
    }

    void MyWidget::paintEvent(QPaintEvent *)
    {
        QPainter painter(this);
        if (layout())
            paintLayout(&amp;painter, layout());
    }</pre>

*/"/>
    <method name="public com.trolltech.qt.gui.QLayout layout()"/>
    <method name="public com.trolltech.qt.core.QSize maximumSize()" doc="/**
<p>Returns the maximum size of this layout. This is the largest size that the layout can have while still respecting the specifications.</p>
<p>The returned value doesn't include the space required by QWidget::setContentsMargins() or menuBar().</p>
<p>The default implementation allows unlimited resizing.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QSize minimumSize()" doc="/**
<p>Returns the minimum size of this layout. This is the smallest size that the layout can have while still respecting the specifications.</p>
<p>The returned value doesn't include the space required by QWidget::setContentsMargins() or menuBar().</p>
<p>The default implementation allows unlimited resizing.</p>

*/"/>
    <method name="public abstract void setGeometry(com.trolltech.qt.core.QRect arg__0)"/>
    <method name="public abstract com.trolltech.qt.gui.QLayoutItemInterface takeAt(int index__0)" doc="/**
<p>Must be implemented in subclasses to remove the layout item at <i>index</i> from the layout, and return the item. If there is no such item, the function must do nothing and return 0. Items are numbered consecutively from 0. If an item is deleted, other items will be renumbered.</p>
<p>The following code fragment shows a safe way to remove all items from a layout:</p>
<pre>    QLayoutItem *child;
    while ((child = layout-&gt;takeAt(0)) != 0) {
        ...
        delete child;
    }</pre>

*/"/>
    <method name="public final static com.trolltech.qt.core.QSize closestAcceptableSize(com.trolltech.qt.gui.QWidget w__0, com.trolltech.qt.core.QSize s__1)" doc="/**
<p>Returns a size that satisfies all size constraints on <i>widget</i>, including heightForWidth() and that is as close as possible to <i>size</i>.</p>

*/"/>
    <enum name="SizeConstraint" doc="/**
<p>The possible values are:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The main widget's minimum size is set to minimumSize(), unless the widget already has a minimum size.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The main widget's size is set to sizeHint(); it cannot be resized at all.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The main widget's minimum size is set to minimumSize(); it cannot be smaller.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The main widget's maximum size is set to maximumSize(); it cannot be larger.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The main widget's minimum size is set to minimumSize() and its maximum size is set to maximumSize().</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The widget is not constrained.</td></tr>
</table></p>

*/"/>
</class>
