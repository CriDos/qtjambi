<class name="QDoubleSpinBox" doc="/**
<p>The QDoubleSpinBox class provides a spin box widget that takes doubles.</p>
<p>QDoubleSpinBox allows the user to choose a value by clicking the up and down buttons or by pressing Up or Down on the keyboard to increase or decrease the value currently displayed. The user can also type the value in manually. If the value is entered directly into the spin box, the value will be changed and valueChanged() will be emitted with the new value when Enter or Return is pressed, when the spin box loses focus or when the spin box is deactivated (see QWidget::windowActivationChanged()). The spin box supports double values but can be extended to use different strings with validate(), textFromValue() and valueFromText().</p>
<p>Every time the value changes QDoubleSpinBox emits the valueChanged() signal. The current value can be fetched with value() and set with setValue().</p>
<p>Note: QDoubleSpinBox will round numbers so they can be displayed with the current precision. In a QDoubleSpinBox with decimals set to 2, calling setValue(2.555) will cause value() to return 2.56.</p>
<p>Clicking the up and down buttons or using the keyboard accelerator's Up and Down arrows will increase or decrease the current value in steps of size singleStep(). If you want to change this behavior you can reimplement the virtual function stepBy(). The minimum and maximum value and the step size can be set using one of the constructors, and can be changed later with setMinimum(), setMaximum() and setSingleStep(). The spinbox has a default precision of 2 decimal places but this can be changed using setDecimals().</p>
<p>Most spin boxes are directional, but QDoubleSpinBox can also operate as a circular spin box, i.e. if the range is 0.0-99.9 and the current value is 99.9, clicking &quot;up&quot; will give 0 if wrapping() is set to true. Use setWrapping() if you want circular behavior.</p>
<p>The displayed value can be prepended and appended with arbitrary strings indicating, for example, currency or the unit of measurement. See setPrefix() and setSuffix(). The text in the spin box is retrieved with text() (which includes any prefix() and suffix()), or with cleanText() (which has no prefix(), no suffix() and no leading or trailing whitespace).</p>
<p>It is often desirable to give the user a special (often default) choice in addition to the range of numeric values. See setSpecialValueText() for how to do this with QDoubleSpinBox.</p>

*/">
    <method name="public QDoubleSpinBox(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a spin box with 0.0 as minimum value and 99.99 as maximum value, a step value of 1.0 and a precision of 2 decimal places. The value is initially set to 0.00. The spin box has the given <i>parent</i>.</p>

*/"/>
    <method name="public final java.lang.String cleanText()"/>
    <method name="public final int decimals()"/>
    <method name="public final double maximum()"/>
    <method name="public final double minimum()"/>
    <method name="public final java.lang.String prefix()"/>
    <method name="public final void setDecimals(int prec__0)"/>
    <method name="public final void setMaximum(double max__0)"/>
    <method name="public final void setMinimum(double min__0)"/>
    <method name="public final void setPrefix(java.lang.String prefix__0)"/>
    <method name="public final void setRange(double min__0, double max__1)" doc="/**
<p>Convenience function to set the <i>minimum</i> and <i>maximum</i> values with a single function call.</p>
<p>Note: The maximum and minimum values will be rounded to match the decimals property.</p>
<pre>    setRange(minimum, maximum);</pre>
<p>is equivalent to:</p>
<pre>    setMinimum(minimum);
    setMaximum(maximum);</pre>

*/"/>
    <method name="public final void setSingleStep(double val__0)"/>
    <method name="public final void setSuffix(java.lang.String suffix__0)"/>
    <method name="public final void setValue(double val__0)"/>
    <method name="public final double singleStep()"/>
    <method name="public final java.lang.String suffix()"/>
    <method name="public final double value()"/>
    <method name="public void fixup(com.trolltech.qt.QNativePointer str__0)"/>
    <method name="public java.lang.String textFromValue(double val__0)" doc="/**
<p>This virtual function is used by the spin box whenever it needs to display the given <i>value</i>. The default implementation returns a string containing <i>value</i> printed using QLocale().toString(<i>value</i>, QLatin1Char('f'), decimals()) and will remove the thousand seperator. Reimplementations may return anything.</p>
<p>Note: QDoubleSpinBox does not call this function for specialValueText() and that neither prefix() nor suffix() should be included in the return value.</p>
<p>If you reimplement this, you may also need to reimplement valueFromText().</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QValidator.State validate(com.trolltech.qt.QNativePointer input__0, com.trolltech.qt.QNativePointer pos__1)"/>
    <method name="public double valueFromText(java.lang.String text__0)" doc="/**
<p>This virtual function is used by the spin box whenever it needs to interpret <i>text</i> entered by the user as a value.</p>
<p>Subclasses that need to display spin box values in a non-numeric way need to reimplement this function.</p>
<p>Note: QDoubleSpinBox handles specialValueText() separately; this function is only concerned with the other values.</p>

*/"/>
</class>
