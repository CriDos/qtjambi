<class name="QLineF" doc="/**
<p>The QLineF class provides a two-dimensional vector using floating point precision.</p>
<p>A QLineF describes a finite length line (or line segment) on a two-dimensional surface. QLineF defines the start and end points of the line using floating point accuracy for coordinates. Use the toLine() function to retrieve an integer based copy of this line.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qline-point.png]</font></td><td><font color=&quote;red&quote;>[Missing image qline-coordinates.png]</font></td></tr>
</table></p>
<p>The positions of the line's start and end points can be retrieved using the p1(), x1(), y1(), p2(), x2(), and y2() functions. The dx() and dy() functions return the horizontal and vertical components of the line, respectively.</p>
<p>The line's length can be retrieved using the length() function, and altered using the setLength() function. Use the isNull() function to determine whether the QLineF represents a valid line or a null line.</p>
<p>The intersect() function determines the IntersectType for this line and a given line, while the angle() function returns the angle between the lines. In addition, the unitVector() function returns a line that has the same starting point as this line, but with a length of only 1, while the normalVector() function returns a line that is perpendicular to this line with the same starting point and length.</p>
<p>Finally, the line can be translated a given offset using the translate() function, and can be traversed using the pointAt() function.</p>

*/">
    <method name="public QLineF(com.trolltech.qt.core.QPointF pt1__0, com.trolltech.qt.core.QPointF pt2__1)" doc="/**
<p>Constructs a line object that represents the line between <i>p1</i> and <i>p2</i>.</p>

*/"/>
    <method name="public QLineF(double x1__0, double y1__1, double x2__2, double y2__3)" doc="/**
<p>Constructs a line object that represents the line between (<i>x1</i>, <i>y1</i>) and (<i>x2</i>, <i>y2</i>).</p>

*/"/>
    <method name="public QLineF()" doc="/**
<p>Constructs a null line.</p>

*/"/>
    <method name="public QLineF(com.trolltech.qt.gui.QLine line__0)" doc="/**
<p>Construct a QLineF object from the given integer-based <i>line</i>.</p>

*/"/>
    <method name="public final double angle(com.trolltech.qt.gui.QLineF l__0)" doc="/**
<p>Returns the angle (in degrees) between this line and the given <i>line</i>, taking the direction of the lines into account. If the lines do not intersect within their range, it is the intersection point of the extended lines that serves as origo (see QLineF::UnboundedIntersection).</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qlinef-angle-identicaldirection.png]</font></td><td><font color=&quote;red&quote;>[Missing image qlinef-angle-oppositedirection.png]</font></td></tr>
</table></p>
<p>When the lines are parallel, this function returns 0 if they have the same direction; otherwise it returns 180.</p>

*/"/>
    <method name="public final double dx()" doc="/**
<p>Returns the horizontal component of the line's vector.</p>

*/"/>
    <method name="public final double dy()" doc="/**
<p>Returns the vertical component of the line's vector.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QLineF.IntersectType intersect(com.trolltech.qt.gui.QLineF l__0, com.trolltech.qt.QNativePointer intersectionPoint__1)" doc="/**
<p>Returns a value indicating whether or not <i>this</i> line intersects with the given <i>line</i>.</p>
<p>The actual intersection point is extracted to <i>intersectionPoint</i> (if the pointer is valid). If the lines are parallel, the intersection point is undefined.</p>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if the line is not set up with valid start and end point; otherwise returns false.</p>

*/"/>
    <method name="public final double length()" doc="/**
<p>Returns the length of the line.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QLineF normalVector()" doc="/**
<p>Returns a line that is perpendicular to this line with the same starting point and length.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qlinef-normalvector.png]</font></p>
*/"/>
    <method name="public final com.trolltech.qt.core.QPointF p1()" doc="/**
<p>Returns the line's start point.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF p2()" doc="/**
<p>Returns the line's end point.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF pointAt(double t__0)" doc="/**
<p>Returns the point at the parameterized position specified by <i>t</i>. The function returns the line's start point if t = 0, and its end point if t = 1.</p>

*/"/>
    <method name="public final void setLength(double len__0)" doc="/**
<p>Sets the length of the line to the given <i>length</i>. If the line is a null line, the length will remain zero regardless of the length specified.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QLine toLine()" doc="/**
<p>Returns an integer based copy of this line.</p>
<p>Note that the returned line's start and end points are rounded to the nearest integer.</p>

*/"/>
    <method name="public final void translate(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Translates this line by the given <i>offset</i>.</p>

*/"/>
    <method name="public final void translate(double dx__0, double dy__1)" doc="/**
<p>Translates this line the distance specified by <i>dx</i> and <i>dy</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QLineF unitVector()" doc="/**
<p>Returns the unit vector for this line, i.e a line starting at the same point as <i>this</i> line with a length of 1.0.</p>

*/"/>
    <method name="public final double x1()" doc="/**
<p>Returns the x-coordinate of the line's start point.</p>

*/"/>
    <method name="public final double x2()" doc="/**
<p>Returns the x-coordinate of the line's end point.</p>

*/"/>
    <method name="public final double y1()" doc="/**
<p>Returns the y-coordinate of the line's start point.</p>

*/"/>
    <method name="public final double y2()" doc="/**
<p>Returns the y-coordinate of the line's end point.</p>

*/"/>
    <enum name="IntersectType" doc="/**
<p>Describes the intersection between two lines.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qlinef-unbounded.png]</font></td><td><font color=&quote;red&quote;>[Missing image qlinef-bounded.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>QLineF::UnboundedIntersection</td><td>QLineF::BoundedIntersection</td></tr>
</table></p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Indicates that the lines do not intersect; i.e. they are parallel.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The two lines intersect, but not within the range defined by their lengths. This will be the case if the lines are not parallel.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The two lines intersect with each other within the start and end points of each line.</td></tr>
</table></p>

*/"/>
</class>
