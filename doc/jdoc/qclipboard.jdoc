<class name="QClipboard" doc="/**
<p>The QClipboard class provides access to the window system clipboard.</p>
<p>The clipboard offers a simple mechanism to copy and paste data between applications.</p>
<p>QClipboard supports the same data types that QDrag does, and uses similar mechanisms. For advanced clipboard usage read Drag and Drop.</p>
<p>There is a single QClipboard object in an application, accessible as QApplication::clipboard().</p>
<p>Example:</p>
<pre>    QClipboard *clipboard = QApplication::clipboard();
    QString originalText = clipboard-&gt;text();
    ...
    clipboard-&gt;setText(newText);</pre>
<p>QClipboard features some convenience functions to access common data types: setText() allows the exchange of Unicode text and setPixmap() and setImage() allows the exchange of QPixmaps and QImages between applications. The setMimeData() function is the ultimate in flexibility: it allows you to add any QMimeData into the clipboard. There are corresponding getters for each of these, e.g. text(), image() and pixmap(). You can clear the clipboard by calling clear().</p>
<a name=&quote;notes-for-x11-users&quote;></a>
<h3>Notes for X11 Users</h3>
<ul>
<li>The X11 Window System has the concept of a separate selection and clipboard. When text is selected, it is immediately available as the global mouse selection. The global mouse selection may later be copied to the clipboard. By convention, the middle mouse button is used to paste the global mouse selection.</li>
<li>X11 also has the concept of ownership; if you change the selection within a window, X11 will only notify the owner and the previous owner of the change, i.e. it will not notify all applications that the selection or clipboard data changed.</li>
<li>Lastly, the X11 clipboard is event driven, i.e. the clipboard will not function properly if the event loop is not running. Similarly, it is recommended that the contents of the clipboard are stored or retrieved in direct response to user-input events, e.g. mouse button or key presses and releases. You should not store or retrieve the clipboard contents in response to timer or non-user-input events.</li>
</ul>
<a name=&quote;notes-for-mac-os-x-users&quote;></a>
<h3>Notes for Mac OS X Users</h3>
<p>Mac OS X supports a separate find buffer that holds the current search string in Find operations. This find clipboard can be accessed by specifying the FindBuffer mode.</p>
<a name=&quote;notes-for-windows-and-mac-os-x-users&quote;></a>
<h3>Notes for Windows and Mac OS X Users</h3>
<ul>
<li>Windows and Mac OS X do not support the global mouse selection; they only supports the global clipboard, i.e. they only add text to the clipboard when an explicit copy or cut is made.</li>
<li>Windows and Mac OS X does not have the concept of ownership; the clipboard is a fully global resource so all applications are notified of changes.</li>
</ul>

*/">
    <method name="public final void clear(com.trolltech.qt.gui.QClipboard.Mode mode__0)" doc="/**
<p>Clear the clipboard contents.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, this function clears the the global clipboard contents. If <i>mode</i> is QClipboard::Selection, this function clears the global mouse selection contents. If <i>mode</i> is QClipboard::FindBuffer, this function clears the search string buffer.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QImage image(com.trolltech.qt.gui.QClipboard.Mode mode__0)" doc="/**
<p>Returns the clipboard image, or returns a null image if the clipboard does not contain an image or if it contains an image in an unsupported image format.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the image is retrieved from the global clipboard. If <i>mode</i> is QClipboard::Selection, the image is retrieved from the global mouse selection.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMimeData mimeData(com.trolltech.qt.gui.QClipboard.Mode mode__0)" doc="/**
<p>Returns a reference to a QMimeData representation of the current clipboard data.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the data is retrieved from the global clipboard. If <i>mode</i> is QClipboard::Selection, the data is retrieved from the global mouse selection. If <i>mode</i> is QClipboard::FindBuffer, the data is retrieved from the search string buffer.</p>
<p>The text(), image(), and pixmap() functions are simpler wrappers for retrieving text, image, and pixmap data.</p>

*/"/>
    <method name="public final boolean ownsClipboard()" doc="/**
<p>Returns true if this clipboard object owns the clipboard data; otherwise returns false.</p>

*/"/>
    <method name="public final boolean ownsFindBuffer()" doc="/**
<p>Returns true if this clipboard object owns the find buffer data; otherwise returns false.</p>

*/"/>
    <method name="public final boolean ownsSelection()" doc="/**
<p>Returns true if this clipboard object owns the mouse selection data; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPixmap pixmap(com.trolltech.qt.gui.QClipboard.Mode mode__0)" doc="/**
<p>Returns the clipboard pixmap, or null if the clipboard does not contain a pixmap. Note that this can lose information. For example, if the image is 24-bit and the display is 8-bit, the result is converted to 8 bits, and if the image has an alpha channel, the result just has a mask.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the pixmap is retrieved from the global clipboard. If <i>mode</i> is QClipboard::Selection, the pixmap is retrieved from the global mouse selection.</p>

*/"/>
    <method name="public final void setImage(com.trolltech.qt.gui.QImage arg__0, com.trolltech.qt.gui.QClipboard.Mode mode__1)" doc="/**
<p>Copies the <i>image</i> into the clipboard.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the image is stored in the global clipboard. If <i>mode</i> is QClipboard::Selection, the data is stored in the global mouse selection.</p>
<p>This is shorthand for:</p>
<pre>    QMimeData *data = new QMimeData;
    data-&gt;setImageData(image);
    clipboard-&gt;setMimeData(data, mode);</pre>

*/"/>
    <method name="public final void setMimeData(com.trolltech.qt.gui.QMimeData data__0, com.trolltech.qt.gui.QClipboard.Mode mode__1)" doc="/**
<p>Sets the clipboard data to <i>src</i>. Ownership of the data is transferred to the clipboard. If you want to remove the data either call clear() or call setData() again with new data.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the data is stored in the global clipboard. If <i>mode</i> is QClipboard::Selection, the data is stored in the global mouse selection. If <i>mode</i> is QClipboard::FindBuffer, the data is stored in the search string buffer.</p>
<p>The setText(), setImage() and setPixmap() functions are simpler wrappers for setting text, image and pixmap data respectively.</p>

*/"/>
    <method name="public final void setPixmap(com.trolltech.qt.gui.QPixmap arg__0, com.trolltech.qt.gui.QClipboard.Mode mode__1)" doc="/**
<p>Copies <i>pixmap</i> into the clipboard. Note that this is slower than setImage() because it needs to convert the QPixmap to a QImage first.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the pixmap is stored in the global clipboard. If <i>mode</i> is QClipboard::Selection, the pixmap is stored in the global mouse selection.</p>

*/"/>
    <method name="public final void setText(java.lang.String arg__0, com.trolltech.qt.gui.QClipboard.Mode mode__1)" doc="/**
<p>Copies <i>text</i> into the clipboard as plain text.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the text is stored in the global clipboard. If <i>mode</i> is QClipboard::Selection, the text is stored in the global mouse selection. If <i>mode</i> is QClipboard::FindBuffer, the text is stored in the search string buffer.</p>

*/"/>
    <method name="public final boolean supportsFindBuffer()" doc="/**
<p>Returns true if the clipboard supports a separate search buffer; otherwise returns false.</p>

*/"/>
    <method name="public final boolean supportsSelection()" doc="/**
<p>Returns true if the clipboard supports mouse selection; otherwise returns false.</p>

*/"/>
    <method name="public final java.lang.String text(com.trolltech.qt.QNativePointer subtype__0, com.trolltech.qt.gui.QClipboard.Mode mode__1)" doc="/**
<p>Returns the clipboard text in subtype <i>subtype</i>, or an empty string if the clipboard does not contain any text. If <i>subtype</i> is null, any subtype is acceptable, and <i>subtype</i> is set to the chosen subtype.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the text is retrieved from the global clipboard. If <i>mode</i> is QClipboard::Selection, the text is retrieved from the global mouse selection.</p>
<p>Common values for <i>subtype</i> are &quot;plain&quot; and &quot;html&quot;.</p>

*/"/>
    <method name="public final java.lang.String text(com.trolltech.qt.gui.QClipboard.Mode mode__0)" doc="/**
<p>Returns the clipboard text as plain text, or an empty string if the clipboard does not contain any text.</p>
<p>The <i>mode</i> argument is used to control which part of the system clipboard is used. If <i>mode</i> is QClipboard::Clipboard, the text is retrieved from the global clipboard. If <i>mode</i> is QClipboard::Selection, the text is retrieved from the global mouse selection. If <i>mode</i> is QClipboard::FindBuffer, the text is retrieved from the search string buffer.</p>

*/"/>
    <enum name="Mode" doc="/**
<a name=&quote;clipboard-mode&quote;></a><p>This enum type is used to control which part of the system clipboard is used by QClipboard::data(), QClipboard::setData() and related functions.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>indicates that data should be stored and retrieved from the global clipboard.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>indicates that data should be stored and retrieved from the global mouse selection. Support for <tt>Selection</tt> is provided only on systems with a global mouse selection (e.g. X11).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>indicates that data should be stored and retrieved from the Find buffer. This mode is used for holding search strings on Mac OS X.</td></tr>
</table></p>

*/"/>
</class>
