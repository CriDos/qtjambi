<class name="QBoxLayout" doc="/**
<p>The QBoxLayout class lines up child widgets horizontally or vertically.</p>
<p>QBoxLayout takes the space it gets (from its parent layout or from the parentWidget()), divides it up into a row of boxes, and makes each managed widget fill one box.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qhboxlayout-with-5-children.png]</font></p><p>If the QBoxLayout's orientation is Qt::Horizontal the boxes are placed in a row, with suitable sizes. Each widget (or other box) will get at least its minimum size and at most its maximum size. Any excess space is shared according to the stretch factors (more about that below).</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qvboxlayout-with-5-children.png]</font></p><p>If the QBoxLayout's orientation is Qt::Vertical, the boxes are placed in a column, again with suitable sizes.</p>
<p>The easiest way to create a QBoxLayout is to use one of the convenience classes, e.g. QHBoxLayout (for Qt::Horizontal boxes) or QVBoxLayout (for Qt::Vertical boxes). You can also use the QBoxLayout constructor directly, specifying its direction as LeftToRight, RightToLeft, TopToBottom, or BottomToTop.</p>
<p>If the QBoxLayout is not the top-level layout (i.e. it is not managing all of the widget's area and children), you must add it to its parent layout before you can do anything with it. The normal way to add a layout is by calling parentLayout-&gt;addLayout().</p>
<p>Once you have done this, you can add boxes to the QBoxLayout using one of four functions:</p>
<ul>
<li>addWidget() to add a widget to the QBoxLayout and set the widget's stretch factor. (The stretch factor is along the row of boxes.)</li>
<li>addSpacing() to create an empty box; this is one of the functions you use to create nice and spacious dialogs. See below for ways to set margins.</li>
<li>addStretch() to create an empty, stretchable box.</li>
<li>addLayout() to add a box containing another QLayout to the row and set that layout's stretch factor.</li>
</ul>
<p>Use insertWidget(), insertSpacing(), insertStretch() or insertLayout() to insert a box at a specified position in the layout.</p>
<p>QBoxLayout also includes two margin widths:</p>
<ul>
<li>setMargin() sets the width of the outer border. This is the width of the reserved space along each of the QBoxLayout's four sides.</li>
<li>setSpacing() sets the width between neighboring boxes. (You can use addSpacing() to get more space at a particular spot.)</li>
</ul>
<p>The margin default is provided by the style. The default margin most Qt styles specify is 9 for child widgets and 11 for windows. The spacing defaults to the same as the margin width for a top-level layout, or to the same as the parent layout.</p>
<p>To remove a widget from a layout, call removeWidget(). Calling QWidget::hide() on a widget also effectively removes the widget from the layout until QWidget::show() is called.</p>
<p>You will almost always want to use QVBoxLayout and QHBoxLayout rather than QBoxLayout because of their convenient constructors.</p>

*/">
    <method name="public QBoxLayout(com.trolltech.qt.gui.QBoxLayout.Direction arg__0, com.trolltech.qt.gui.QWidget parent__1)" doc="/**
<p>Constructs a new QBoxLayout with direction <i>dir</i> and parent widget <i>parent</i>.</p>

*/"/>
    <method name="public final void addLayout(com.trolltech.qt.gui.QLayout layout__0, int stretch__1)" doc="/**
<p>Adds <i>layout</i> to the end of the box, with serial stretch factor <i>stretch</i>.</p>

*/"/>
    <method name="public final void addSpacing(int size__0)" doc="/**
<p>Adds a non-stretchable space with size <i>size</i> to the end of this box layout. QBoxLayout provides default margin and spacing. This function adds additional space.</p>

*/"/>
    <method name="public final void addStretch(int stretch__0)" doc="/**
<p>Adds a stretchable space with zero minimum size and stretch factor <i>stretch</i> to the end of this box layout.</p>

*/"/>
    <method name="public final void addStrut(int arg__0)" doc="/**
<p>Limits the perpendicular dimension of the box (e.g. height if the box is LeftToRight) to a minimum of <i>size</i>. Other constraints may increase the limit.</p>

*/"/>
    <method name="public final void addWidget(com.trolltech.qt.gui.QWidget arg__0, int stretch__1, com.trolltech.qt.core.Qt.Alignment alignment__2)" doc="/**
<p>Adds <i>widget</i> to the end of this box layout, with a stretch factor of <i>stretch</i> and alignment <i>alignment</i>.</p>
<p>The stretch factor applies only in the direction of the QBoxLayout, and is relative to the other boxes and widgets in this QBoxLayout. Widgets and boxes with higher stretch factors grow more.</p>
<p>If the stretch factor is 0 and nothing else in the QBoxLayout has a stretch factor greater than zero, the space is distributed according to the QWidget:sizePolicy() of each widget that's involved.</p>
<p>The alignment is specified by <i>alignment</i>. The default alignment is 0, which means that the widget fills the entire cell.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QBoxLayout.Direction direction()" doc="/**
<p>Returns the direction of the box. addWidget() and addSpacing() work in this direction; the stretch stretches in this direction.</p>

*/"/>
    <method name="protected final void insertItem(int index__0, com.trolltech.qt.gui.QLayoutItemInterface arg__1)" doc="/**
<p>Inserts <i>item</i> into this box layout at position <i>index</i>. If <i>index</i> is negative, the item is added at the end.</p>
<p><b>Warning:</b> Do not call QLayout::insertChildLayout() if <i>item</i> is a QLayout.</p>

*/"/>
    <method name="public final void insertLayout(int index__0, com.trolltech.qt.gui.QLayout layout__1, int stretch__2)" doc="/**
<p>Inserts <i>layout</i> at position <i>index</i>, with stretch factor <i>stretch</i>. If <i>index</i> is negative, the layout is added at the end.</p>
<p><i>layout</i> becomes a child of the box layout.</p>

*/"/>
    <method name="public final void insertSpacing(int index__0, int size__1)" doc="/**
<p>Inserts a non-stretchable space at position <i>index</i>, with size <i>size</i>. If <i>index</i> is negative the space is added at the end.</p>
<p>The box layout has default margin and spacing. This function adds additional space.</p>

*/"/>
    <method name="public final void insertStretch(int index__0, int stretch__1)" doc="/**
<p>Inserts a stretchable space at position <i>index</i>, with zero minimum size and stretch factor <i>stretch</i>. If <i>index</i> is negative the space is added at the end.</p>

*/"/>
    <method name="public final void insertWidget(int index__0, com.trolltech.qt.gui.QWidget widget__1, int stretch__2, com.trolltech.qt.core.Qt.Alignment alignment__3)" doc="/**
<p>Inserts <i>widget</i> at position <i>index</i>, with stretch factor <i>stretch</i> and alignment <i>alignment</i>. If <i>index</i> is negative, the widget is added at the end.</p>
<p>The stretch factor applies only in the direction of the QBoxLayout, and is relative to the other boxes and widgets in this QBoxLayout. Widgets and boxes with higher stretch factors grow more.</p>
<p>If the stretch factor is 0 and nothing else in the QBoxLayout has a stretch factor greater than zero, the space is distributed according to the QWidget:sizePolicy() of each widget that's involved.</p>
<p>The alignment is specified by <i>alignment</i>. The default alignment is 0, which means that the widget fills the entire cell.</p>

*/"/>
    <method name="public final void setDirection(com.trolltech.qt.gui.QBoxLayout.Direction arg__0)" doc="/**
<p>Sets the direction of this layout to <i>direction</i>.</p>

*/"/>
    <method name="public final boolean setStretchFactor(com.trolltech.qt.gui.QLayout l__0, int stretch__1)" doc="/**
<p>Sets the stretch factor for the layout <i>layout</i> to <i>stretch</i> and returns true if <i>layout</i> is found in this layout (not including child layouts); otherwise returns false.</p>

*/"/>
    <method name="public final boolean setStretchFactor(com.trolltech.qt.gui.QWidget w__0, int stretch__1)" doc="/**
<p>Sets the stretch factor for <i>widget</i> to <i>stretch</i> and returns true if <i>widget</i> is found in this layout (not including child layouts); otherwise returns false.</p>

*/"/>
    <method name="public void addItem(com.trolltech.qt.gui.QLayoutItemInterface arg__0)"/>
    <method name="public int count()"/>
    <method name="public com.trolltech.qt.core.Qt.Orientations expandingDirections()"/>
    <method name="public boolean hasHeightForWidth()"/>
    <method name="public int heightForWidth(int arg__0)"/>
    <method name="public void invalidate()" doc="/**
<p>Resets cached information.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QLayoutItemInterface itemAt(int arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize maximumSize()"/>
    <method name="public int minimumHeightForWidth(int arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSize()"/>
    <method name="public void setGeometry(com.trolltech.qt.core.QRect arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="public com.trolltech.qt.gui.QLayoutItemInterface takeAt(int arg__0)"/>
    <enum name="Direction" doc="/**
<p>This type is used to determine the direction of a box layout.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Horizontal from left to right.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Horizontal from right to left.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Vertical from top to bottom.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Vertical from bottom to top.</td></tr>
</table></p>

*/"/>
</class>
