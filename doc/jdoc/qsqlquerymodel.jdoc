<class name="QSqlQueryModel" doc="/**
<p>The QSqlQueryModel class provides a read-only data model for SQL result sets.</p>
<p>QSqlQueryModel is a high-level interface for executing SQL statements and traversing the result set. It is built on top of the lower-level QSqlQuery and can be used to provide data to view classes such as QTableView. For example:</p>
<pre>        QSqlQueryModel *model = new QSqlQueryModel;
        model-&gt;setQuery(&quot;SELECT name, salary FROM employee&quot;);
        model-&gt;setHeaderData(0, Qt::Horizontal, tr(&quot;Name&quot;));
        model-&gt;setHeaderData(1, Qt::Horizontal, tr(&quot;Salary&quot;));

        QTableView *view = new QTableView;
        view-&gt;setModel(model);
        view-&gt;show();</pre>
<p>We set the model's query, then we set up the labels displayed in the view header.</p>
<p>QSqlQueryModel can also be used to access a database programmatically, without binding it to a view:</p>
<pre>        QSqlQueryModel model;
        model.setQuery(&quot;SELECT * FROM employee&quot;);
        int salary = model.record(4).value(&quot;salary&quot;).toInt();</pre>
<p>The code snippet above extracts the <tt>salary</tt> field from record 4 in the result set of the query <tt>SELECT * from employee</tt>. Assuming that <tt>salary</tt> is column 2, we can rewrite the last line as follows:</p>
<pre>        int salary = model.data(model.index(4, 2)).toInt();</pre>
<p>The model is read-only by default. To make it read-write, you must subclass it and reimplement setData() and flags(). Another option is to use QSqlTableModel, which provides a read-write model based on a single database table.</p>
<p>The sql/querymodel example illustrates how to use QSqlQueryModel to display the result of a query. It also shows how to subclass QSqlQueryModel to customize the contents of the data before showing it to the user, and how to create a read-write model based on QSqlQueryModel.</p>
<p>If the database doesn't return the amount of selected rows in a query, the model will fetch rows incrementally. See fetchMore() for more information.</p>

*/">
    <method name="public QSqlQueryModel(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Creates an empty QSqlQueryModel with the given <i>parent</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlError lastError()" doc="/**
<p>Returns information about the last error that occurred on the database.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlQuery query()" doc="/**
<p>Returns the QSqlQuery associated with this model.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlRecord record()" doc="/**
<p>Returns an empty record containing information about the fields of the current query.</p>
<p>If the model is not initialized, an empty record will be returned.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlRecord record(int row__0)" doc="/**
<p>Returns the record containing information about the fields of the current query. If <i>row</i> is the index of a valid row, the record will be populated with values from that row.</p>
<p>If the model is not initialized, an empty record will be returned.</p>

*/"/>
    <method name="protected final void setLastError(com.trolltech.qt.sql.QSqlError error__0)" doc="/**
<p>Protected function which allows derived classes to set the value of the last error that occurred on the database to <i>error</i>.</p>

*/"/>
    <method name="public boolean canFetchMore(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Returns true if it is possible to read more rows from the database. This only affects databases that don't report back the size of a query (see QSqlDriver::hasFeature()).</p>
<p><i>parent</i> should always be an invalid QModelIndex.</p>

*/"/>
    <method name="public void clear()" doc="/**
<p>Clears the model and releases any aquired resource.</p>

*/"/>
    <method name="public int columnCount(com.trolltech.qt.core.QModelIndex parent__0)"/>
    <method name="public java.lang.Object data(com.trolltech.qt.core.QModelIndex item__0, int role__1)" doc="/**
<p>Returns the value for the specified <i>item</i> and <i>role</i>.</p>
<p>If <i>item</i> is out of bounds or if an error occurred, an invalid QVariant is returned.</p>

*/"/>
    <method name="public void fetchMore(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Fetches more rows from a database. This only affects databases that don't report back the size of a query (see QSqlDriver::hasFeature()).</p>
<p>To force fetching of the entire database, you can use the following:</p>
<pre>    while (myModel-&gt;canFetchMore())
        myModel-&gt;fetchMore();</pre>
<p><i>parent</i> should always be an invalid QModelIndex.</p>

*/"/>
    <method name="public java.lang.Object headerData(int section__0, com.trolltech.qt.core.Qt.Orientation orientation__1, int role__2)" doc="/**
<p>Returns the header data for the given <i>role</i> in the <i>section</i> of the header with the specified <i>orientation</i>.</p>

*/"/>
    <method name="protected com.trolltech.qt.core.QModelIndex indexInQuery(com.trolltech.qt.core.QModelIndex item__0)" doc="/**
<p>Returns the index of the value in the database result set for the given <i>item</i> in the model.</p>
<p>The return value is identical to <i>item</i> if no columns or rows have been inserted, removed, or moved around.</p>
<p>Returns an invalid model index if <i>item</i> is out of bounds or if <i>item</i> does not point to a value in the result set.</p>

*/"/>
    <method name="public boolean insertColumns(int column__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Inserts <i>count</i> columns into the model at position <i>column</i>. The <i>parent</i> parameter must always be an invalid QModelIndex, since the model does not support parent-child relationships.</p>
<p>Returns true if <i>column</i> is within bounds; otherwise returns false.</p>
<p>By default, inserted columns are empty. To fill them with data, reimplement data() and handle any inserted column separately:</p>
<pre>    QVariant MyModel::data(const QModelIndex &amp;item, int role) const
    {
        if (item.column() == m_specialColumnNo) {
            <span class=&quote;comment&quote;>// handle column separately</span>
        }
        return QSqlQueryModel::data(item, role);
    }</pre>

*/"/>
    <method name="protected void queryChange()" doc="/**
<p>This virtual function is called whenever the query changes. The default implementation does nothing.</p>
<p>query() returns the new query.</p>

*/"/>
    <method name="public boolean removeColumns(int column__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Removes <i>count</i> columns from the model starting from position <i>column</i>. The <i>parent</i> parameter must always be an invalid QModelIndex, since the model does not support parent-child relationships.</p>
<p>Removing columns effectively hides them. It does not affect the underlying QSqlQuery.</p>
<p>Returns true if the columns were removed; otherwise returns false.</p>

*/"/>
    <method name="public int rowCount(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>If the database supports returning the size of a query (see QSqlDriver::hasFeature()), the amount of rows of the current query is returned. Otherwise, returns the amount of rows currently cached on the client.</p>
<p><i>parent</i> should always be an invalid QModelIndex.</p>

*/"/>
    <method name="public boolean setHeaderData(int section__0, com.trolltech.qt.core.Qt.Orientation orientation__1, java.lang.Object value__2, int role__3)" doc="/**
<p>Sets the caption for a horizontal header for the specified <i>role</i> to <i>value</i>. This is useful if the model is used to display data in a view (e.g., QTableView).</p>
<p>Returns true if <i>orientation</i> is Qt::Horizontal and the <i>section</i> refers to a valid section; otherwise returns false.</p>
<p>Note that this function cannot be used to modify values in the database since the model is read-only.</p>

*/"/>
    <method name="public void setQuery(java.lang.String query__0, com.trolltech.qt.sql.QSqlDatabase db__1)" doc="/**
<p>Executes the query <i>query</i> for the given database connection <i>db</i>. If no database is specified, the default connection is used.</p>
<p>lastError() can be used to retrieve verbose information if there was an error setting the query.</p>
<p>Example:</p>
<pre>    QSqlQueryModel model;
    model.setQuery(&quot;select * from MyTable&quot;);
    if (model.lastError().isValid())
        qDebug() &lt;&lt; model.lastError();</pre>

*/"/>
    <method name="public void setQuery(com.trolltech.qt.sql.QSqlQuery query__0)" doc="/**
<p>Resets the model and sets the data provider to be the given <i>query</i>. Note that the query must be active and must not be isForwardOnly().</p>
<p>lastError() can be used to retrieve verbose information if there was an error setting the query.</p>

*/"/>
</class>
