<class name="QDial" doc="/**
<p>The QDial class provides a rounded range control (like a speedometer or potentiometer).</p>
<p>QDial is used when the user needs to control a value within a program-definable range, and the range either wraps around (for example, with angles measured from 0 to 359 degrees) or the dialog layout needs a square widget.</p>
<p>Since QDial inherits from QAbstractSlider, the dial behaves in a similar way to a slider. When wrapping() is false (the default setting) there is no real difference between a slider and a dial. They both share the same signals, slots and member functions. Which one you use depends on the expectations of your users and on the type of application.</p>
<p>The dial initially emits valueChanged() signals continuously while the slider is being moved; you can make it emit the signal less often by disabling the tracking property. The sliderMoved() signal is emitted continuously even when tracking is disabled.</p>
<p>The dial also emits sliderPressed() and sliderReleased() signals when the mouse button is pressed and released. Note that the dial's value can change without these signals being emitted since the keyboard and wheel can also be used to change the value.</p>
<p>Unlike the slider, QDial attempts to draw a &quot;nice&quot; number of notches rather than one per line step. If possible, the number of notches drawn is one per line step, but if there aren't enough pixels to draw every one, QDial will skip notches to try and draw a uniform set (e.g. by drawing every second or third notch).</p>
<p>Like the slider, the dial makes the QAbstractSlider functions setValue(), addLine(), subtractLine(), addPage() and subtractPage() available as slots.</p>
<p>The dial's keyboard interface is fairly simple: The <b>left</b>/<b>up</b> and <b>right</b>/<b>down</b> arrow keys adjust the dial's value by the defined singleStep, <b>Page Up</b> and <b>Page Down</b> by the defined pageStep, and the <b>Home</b> and <b>End</b> keys set the value to the defined minimum and maximum values.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image plastique-dial.png]</font></td><td><font color=&quote;red&quote;>[Missing image windowsxp-dial.png]</font></td><td><font color=&quote;red&quote;>[Missing image macintosh-dial.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td colspan=&quote;3&quote;>Dials shown in various widget styles (from left to right): Plastique, Windows XP, Macintosh.</td></tr>
</table></p>

*/">
    <method name="public QDial(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a dial.</p>
<p>The <i>parent</i> argument is sent to the QAbstractSlider constructor.</p>

*/"/>
    <method name="public final int notchSize()"/>
    <method name="public final double notchTarget()"/>
    <method name="public final boolean notchesVisible()"/>
    <method name="public final void setNotchTarget(double target__0)"/>
    <method name="public final void setNotchesVisible(boolean visible__0)"/>
    <method name="public final void setWrapping(boolean on__0)"/>
    <method name="public final boolean wrapping()"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="public com.trolltech.qt.core.QSize minimumSizeHint()"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent me__0)"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent me__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent me__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent pe__0)"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent re__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="protected void sliderChange(com.trolltech.qt.gui.QAbstractSlider.SliderChange change__0)" doc="/**
<p>Reimplement this virtual function to track slider changes such as SliderRangeChange, SliderOrientationChange, SliderStepsChange, or SliderValueChange. The default implementation only updates the display and ignores the <i>change</i> parameter.</p>

*/"/>
</class>
