<class name="QStyleOptionSlider" doc="/**
<p>The QStyleOptionSlider class is used to describe the parameters needed for drawing a slider.</p>
<p>QStyleOptionSlider contains all the information that QStyle functions need to draw QSlider and QScrollBar.</p>
<p>For performance reasons, the access to the member variables is direct (i.e., using the <tt>.</tt> or <tt>-&gt;</tt> operator). This low-level feel makes the structures straightforward to use and emphasizes that these are simply parameters used by the style functions.</p>
<p>For an example demonstrating how style options can be used, see the Styles example.</p>

*/">
    <method name="public QStyleOptionSlider(com.trolltech.qt.gui.QStyleOptionSlider other__0)" doc="/**
<p>Constructs a copy of the <i>other</i> style option.</p>

*/"/>
    <method name="public QStyleOptionSlider()" doc="/**
<p>Constructs a QStyleOptionSlider, initializing the members variables to their default values.</p>

*/"/>
    <method name="protected QStyleOptionSlider(int version__0)"/>
    <enum name="StyleOptionVersion" doc="/**
<p>This enum is used to hold information about the version of the style option, and is defined for each QStyleOption subclass.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>1</td></tr>
</table></p>
<p>The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally don't need to check it.</p>

*/"/>
    <enum name="StyleOptionType" doc="/**
<p>This enum is used to hold information about the type of the style option, and is defined for each QStyleOption subclass.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The type of style option provided (SO_Slider for this class).</td></tr>
</table></p>
<p>The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.</p>

*/"/>
    <method name="public final int tickInterval()" doc="/**
<p>the interval that should be drawn between tick marks</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final void setTickInterval(int tickInterval)" doc="/**
<p>the interval that should be drawn between tick marks</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final int minimum()" doc="/**
<p>the minimum value for the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final void setMinimum(int minimum)" doc="/**
<p>the minimum value for the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final double notchTarget()" doc="/**
<p>the number of pixel between notches</p>
<p>The default value is 0.0.</p>

*/"/>
    <method name="public final void setNotchTarget(double notchTarget)" doc="/**
<p>the number of pixel between notches</p>
<p>The default value is 0.0.</p>

*/"/>
    <method name="public final int maximum()" doc="/**
<p>the maximum value for the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final void setMaximum(int maximum)" doc="/**
<p>the maximum value for the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final int sliderPosition()" doc="/**
<p>the position of the slider handle</p>
<p>If the slider has active feedback (i.e., QAbstractSlider::tracking is true), this value will be the same as sliderValue. Otherwise, it will have the current position of the handle. The default value is 0.</p>

*/"/>
    <method name="public final void setSliderPosition(int sliderPosition)" doc="/**
<p>the position of the slider handle</p>
<p>If the slider has active feedback (i.e., QAbstractSlider::tracking is true), this value will be the same as sliderValue. Otherwise, it will have the current position of the handle. The default value is 0.</p>

*/"/>
    <method name="public final boolean dialWrapping()" doc="/**
<p>whether or not the dial should wrap or not</p>
<p>The default value is false, i.e. the dial is not wrapped.</p>

*/"/>
    <method name="public final void setDialWrapping(boolean dialWrapping)" doc="/**
<p>whether or not the dial should wrap or not</p>
<p>The default value is false, i.e. the dial is not wrapped.</p>

*/"/>
    <method name="public final int sliderValue()" doc="/**
<p>the value of the slider</p>
<p>If the slider has active feedback (i.e., QAbstractSlider::tracking is true), this value will be the same as sliderPosition. Otherwise, it will have the value the slider had before the mouse was pressed.</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final void setSliderValue(int sliderValue)" doc="/**
<p>the value of the slider</p>
<p>If the slider has active feedback (i.e., QAbstractSlider::tracking is true), this value will be the same as sliderPosition. Otherwise, it will have the value the slider had before the mouse was pressed.</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final int singleStep()" doc="/**
<p>the size of the single step of the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final void setSingleStep(int singleStep)" doc="/**
<p>the size of the single step of the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QSlider.TickPosition tickPosition()" doc="/**
<p>the position of the slider's tick marks, if any</p>
<p>The default value is QSlider::NoTicks.</p>

*/"/>
    <method name="public final void setTickPosition(com.trolltech.qt.gui.QSlider.TickPosition tickPosition)" doc="/**
<p>the position of the slider's tick marks, if any</p>
<p>The default value is QSlider::NoTicks.</p>

*/"/>
    <method name="public final int pageStep()" doc="/**
<p>the size of the page step of the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final void setPageStep(int pageStep)" doc="/**
<p>the size of the page step of the slider</p>
<p>The default value is 0.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Orientation orientation()" doc="/**
<p>the slider's orientation (horizontal or vertical)</p>
<p>The default orientation is Qt::Horizontal.</p>

*/"/>
    <method name="public final void setOrientation(com.trolltech.qt.core.Qt.Orientation orientation)" doc="/**
<p>the slider's orientation (horizontal or vertical)</p>
<p>The default orientation is Qt::Horizontal.</p>

*/"/>
    <method name="public final boolean upsideDown()" doc="/**
<p>the slider control orientation</p>
<p>Normally a slider increases as it moves up or to the right; upsideDown indicates that it should do the opposite (increase as it moves down or to the left). The default value is false, i.e. the slider increases as it moves up or to the right.</p>

*/"/>
    <method name="public final void setUpsideDown(boolean upsideDown)" doc="/**
<p>the slider control orientation</p>
<p>Normally a slider increases as it moves up or to the right; upsideDown indicates that it should do the opposite (increase as it moves down or to the left). The default value is false, i.e. the slider increases as it moves up or to the right.</p>

*/"/>
</class>
