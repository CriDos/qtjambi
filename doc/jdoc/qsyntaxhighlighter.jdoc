<class name="QSyntaxHighlighter" doc="/**
<p>The QSyntaxHighlighter class allows you to define syntax highlighting rules, and in addition you can use the class to query a document's current formatting or user data.</p>
<p>The QSyntaxHighlighter class is a base class for implementing QTextEdit syntax highlighters. A syntax highligher automatically highlights parts of the text in a QTextEdit, or more generally in a QTextDocument. Syntax highlighters are often used when the user is entering text in a specific format (for example source code) and help the user to read the text and identify syntax errors.</p>
<p>To provide your own syntax highlighting, you must subclass QSyntaxHighlighter and reimplement highlightBlock().</p>
<p>When you create an instance of your QSyntaxHighlighter subclass, pass it the QTextEdit or QTextDocument that you want the syntax highlighting to be applied to. For example:</p>
<pre>    QTextEdit *editor = new QTextEdit;
    MyHighlighter *highlighter = new MyHighlighter(editor-&gt;document());</pre>
<p>After this your highlightBlock() function will be called automatically whenever necessary. Use your highlightBlock() function to apply formatting (e.g. setting the font and color) to the text that is passed to it. QSyntaxHighlighter provides the setFormat() function which applies a given QTextCharFormat on the current text block. For example:</p>
<pre>    void MyHighlighter::highlightBlock(const QString &amp;text)
    {
        QTextCharFormat myClassFormat;
        myClassFormat.setFontWeight(QFont::Bold);
        myClassFormat.setForeground(Qt::darkMagenta);
        QString pattern = &quot;\\bMy[A-Za-z]+\\b&quot;;

        QRegExp expression(pattern);
        int index = text.indexOf(expression);
        while (index &gt;= 0) {
            int length = expression.matchedLength();
            setFormat(index, length, myClassFormat);
            index = text.indexOf(expression, index + length);
         }
     }</pre>
<p>Some syntaxes can have constructs that span several text blocks. For example, a C++ syntax highlighter should be able to cope with <tt>/</tt><tt>*...*</tt><tt>/</tt> multiline comments. To deal with these cases it is necessary to know the end state of the previous text block (e.g. &quot;in comment&quot;).</p>
<p>Inside your highlightBlock() implementation you can query the end state of the previous text block using the previousBlockState() function. After parsing the block you can save the last state using setCurrentBlockState().</p>
<p>The currentBlockState() and previousBlockState() functions return an int value. If no state is set, the returned value is -1. You can designate any other value to identify any given state using the setCurrentBlockState() function. Once the state is set the QTextBlock keeps that value until it is set set again or until the corresponding paragraph of text is deleted.</p>
<p>For example, if you're writing a simple C++ syntax highlighter, you might designate 1 to signify &quot;in comment&quot;:</p>
<pre>    QTextCharFormat multiLineCommentFormat;
    multiLineCommentFormat.setForeground(Qt::red);

    QRegExp startExpression(&quot;/\\*&quot;);
    QRegExp endExpression(&quot;\\* /&quot;);

    setCurrentBlockState(0);

    int startIndex = 0;
    if (previousBlockState() != 1)
        startIndex = text.indexOf(startExpression);

    while (startIndex &gt;= 0) {
       int endIndex = text.indexOf(endExpression, startIndex);
       int commentLength;
       if (endIndex == -1) {
           setCurrentBlockState(1);
           commentLength = text.length() - startIndex;
       } else {
           commentLength = endIndex - startIndex
                           + endExpression.matchedLength();
       }
       setFormat(startIndex, commentLength, multiLineCommentFormat);
       startIndex = text.indexOf(startExpression,
                                 startIndex + commentLength);
    }</pre>
<p>In the example above, we first set the current block state to 0. Then, if the previous block ended within a comment, we higlight from the beginning of the current block (<tt>startIndex = 0</tt>). Otherwise, we search for the given start expression. If the specified end expression cannot be found in the text block, we change the current block state by calling setCurrentBlockState(), and make sure that the rest of the block is higlighted.</p>
<p>In addition you can query the current formatting and user data using the format() and currentBlockUserData() functions respectively. You can also attach user data to the current text block using the setCurrentBlockUserData() function. QTextBlockUserData can be used to store custom settings. In the case of syntax highlighting, it is in particular interesting as cache storage for information that you may figure out while parsing the paragraph's text. For an example, see the setCurrentBlockUserData() documentation.</p>

*/">
    <method name="public QSyntaxHighlighter(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a QSyntaxHighlighter with the given <i>parent</i>.</p>

*/"/>
    <method name="public QSyntaxHighlighter(com.trolltech.qt.gui.QTextDocument parent__0)" doc="/**
<p>Constructs a QSyntaxHighlighter and installs it on <i>parent</i>. The specified QTextDocument also becomes the owner of the QSyntaxHighlighter.</p>

*/"/>
    <method name="public QSyntaxHighlighter(com.trolltech.qt.gui.QTextEdit parent__0)" doc="/**
<p>Constructs a QSyntaxHighlighter and installs it on <i>parent</i> 's QTextDocument. The specified QTextEdit also becomes the owner of the QSyntaxHighlighter.</p>

*/"/>
    <method name="protected final int currentBlockState()" doc="/**
<p>Returns the state of the current text block. If no value is set, the returned value is -1.</p>

*/"/>
    <method name="protected final com.trolltech.qt.gui.QTextBlockUserData currentBlockUserData()" doc="/**
<p>Returns the QTextBlockUserData object previously attached to the current text block.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextDocument document()" doc="/**
<p>Returns the QTextDocument on which this syntax highlighter is installed.</p>

*/"/>
    <method name="protected final com.trolltech.qt.gui.QTextCharFormat format(int pos__0)" doc="/**
<p>Returns the format at <i>position</i> inside the syntax highlighter's current text block.</p>

*/"/>
    <method name="protected final int previousBlockState()" doc="/**
<p>Returns the end state of the text block previous to the syntax highlighter's current block. If no value was previously set, the returned value is -1.</p>

*/"/>
    <method name="public final void rehighlight()" doc="/**
<p>Redoes the highlighting of the whole document.</p>

*/"/>
    <method name="protected final void setCurrentBlockState(int newState__0)" doc="/**
<p>Sets the state of the current text block to <i>newState</i>.</p>

*/"/>
    <method name="protected final void setCurrentBlockUserData(com.trolltech.qt.gui.QTextBlockUserData data__0)" doc="/**
<p>Attaches the given <i>data</i> to the current text block. The ownership is passed to the underlying text document, i.e. the provided QTextBlockUserData object will be deleted if the corresponding text block gets deleted.</p>
<p>QTextBlockUserData can be used to store custom settings. In the case of syntax highlighting, it is in particular interesting as cache storage for information that you may figure out while parsing the paragraph's text.</p>
<p>For example while parsing the text, you can keep track of parenthesis characters that you encounter ('{[(' and the like), and store their relative position and the actual QChar in a simple class derived from QTextBlockUserData:</p>
<pre>    struct ParenthesisInfo
    {
        QChar char;
        int position;
    };

    struct BlockData : public QTextBlockUserData
    {
        QVector&lt;ParenthesisInfo&gt; parentheses;
    };</pre>
<p>During cursor navigation in the associated editor, you can ask the current QTextBlock (retrieved using the QTextCursor::block() function) if it has a user data object set and cast it to your <tt>BlockData</tt> object. Then you can check if the current cursor position matches with a previously recorded parenthesis position, and, depending on the type of parenthesis (opening or closing), find the next opening or closing parenthesis on the same level.</p>
<p>In this way you can do a visual parenthesis matching and highlight from the current cursor position to the matching parenthesis. That makes it easier to spot a missing parenthesis in your code and to find where a corresponding opening/closing parenthesis is when editing parenthesis intensive code.</p>

*/"/>
    <method name="public final void setDocument(com.trolltech.qt.gui.QTextDocument doc__0)" doc="/**
<p>Installs the syntax highlighter on the given QTextDocument <i>doc</i>. A QSyntaxHighlighter can only be used with one document at a time.</p>

*/"/>
    <method name="protected final void setFormat(int start__0, int count__1, com.trolltech.qt.gui.QColor color__2)" doc="/**
<p>The specified <i>color</i> is applied to the current text block from the <i>start</i> position for a length of <i>count</i> characters.</p>
<p>The other attributes of the current text block, e.g. the font and background color, are reset to default values.</p>

*/"/>
    <method name="protected final void setFormat(int start__0, int count__1, com.trolltech.qt.gui.QTextCharFormat format__2)" doc="/**
<p>This function is applied to the syntax highlighter's current text block (i.e. the text that is passed to the highlightBlock() function).</p>
<p>The specified <i>format</i> is applied to the text from the <i>start</i> position for a length of <i>count</i> characters (if <i>count</i> is 0, nothing is done). The formatting properties set in <i>format</i> are merged at display time with the formatting information stored directly in the document, for example as previously set with QTextCursor's functions. Note that the document itself remains unmodified by the format set through this function.</p>

*/"/>
    <method name="protected final void setFormat(int start__0, int count__1, com.trolltech.qt.gui.QFont font__2)" doc="/**
<p>The specified <i>font</i> is applied to the current text block from the <i>start</i> position for a length of <i>count</i> characters.</p>
<p>The other attributes of the current text block, e.g. the font and background color, are reset to default values.</p>

*/"/>
    <method name="protected abstract void highlightBlock(java.lang.String text__0)" doc="/**
<p>Highlights the given text block. This function is called when necessary by the rich text engine, i.e. on text blocks which have changed.</p>
<p>To provide your own syntax highlighting, you must subclass QSyntaxHighlighter and reimplement highlightBlock(). In your reimplementation you should parse the block's <i>text</i> and call setFormat() as often as necessary to apply any font and color changes that you require. For example:</p>
<pre>    void MyHighlighter::highlightBlock(const QString &amp;text)
    {
        QTextCharFormat myClassFormat;
        myClassFormat.setFontWeight(QFont::Bold);
        myClassFormat.setForeground(Qt::darkMagenta);
        QString pattern = &quot;\\bMy[A-Za-z]+\\b&quot;;

        QRegExp expression(pattern);
        int index = text.indexOf(expression);
        while (index &gt;= 0) {
            int length = expression.matchedLength();
            setFormat(index, length, myClassFormat);
            index = text.indexOf(expression, index + length);
         }
     }</pre>
<p>Some syntaxes can have constructs that span several text blocks. For example, a C++ syntax highlighter should be able to cope with <tt>/</tt><tt>*...*</tt><tt>/</tt> multiline comments. To deal with these cases it is necessary to know the end state of the previous text block (e.g. &quot;in comment&quot;).</p>
<p>Inside your highlightBlock() implementation you can query the end state of the previous text block using the previousBlockState() function. After parsing the block you can save the last state using setCurrentBlockState().</p>
<p>The currentBlockState() and previousBlockState() functions return an int value. If no state is set, the returned value is -1. You can designate any other value to identify any given state using the setCurrentBlockState() function. Once the state is set the QTextBlock keeps that value until it is set set again or until the corresponding paragraph of text gets deleted.</p>
<p>For example, if you're writing a simple C++ syntax highlighter, you might designate 1 to signify &quot;in comment&quot;. For a text block that ended in the middle of a comment you'd set 1 using setCurrentBlockState, and for other paragraphs you'd set 0. In your parsing code if the return value of previousBlockState() is 1, you would highlight the text as a C++ comment until you reached the closing <tt>*</tt><tt>/</tt>.</p>

*/"/>
</class>
