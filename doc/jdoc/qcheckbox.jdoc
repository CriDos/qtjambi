<class name="QCheckBox" doc="/**
<p>The QCheckBox widget provides a checkbox with a text label.</p>
<p>A QCheckBox is an option button that can be switched on (checked) or off (unchecked). Checkboxes are typically used to represent features in an application that can be enabled or disabled without affecting others, but different types of behavior can be implemented.</p>
<p>A QButtonGroup can be used to group check buttons visually.</p>
<p>Whenever a checkbox is checked or cleared it emits the signal stateChanged(). Connect to this signal if you want to trigger an action each time the checkbox changes state. You can use isChecked() to query whether or not a checkbox is checked.</p>
<p>In addition to the usual checked and unchecked states, QCheckBox optionally provides a third state to indicate &quot;no change&quot;. This is useful whenever you need to give the user the option of neither checking nor unchecking a checkbox. If you need this third state, enable it with setTristate(), and use checkState() to query the current toggle state.</p>
<p>Just like QPushButton, a checkbox button displays text, and optionally a small icon. The text can be set in the constructor or with setText(); the icon is set with setIcon().</p>
<p>Important inherited functions: text(), setText(), text(), pixmap(), setPixmap(), accel(), setAccel(), isToggleButton(), setDown(), isDown(), isOn(), checkState(), autoRepeat(), isExclusiveToggle(), group(), setAutoRepeat(), toggle(), pressed(), released(), clicked(), toggled(), checkState(), and stateChanged().</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image macintosh-checkbox.png]</font></td><td>A checkbox shown in the Macintosh widget style.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image windows-checkbox.png]</font></td><td>A checkbox shown in the Windows XP widget style.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image plastique-checkbox.png]</font></td><td>A checkbox shown in the Plastique widget style.</td></tr>
</table></p>

*/">
    <method name="public QCheckBox(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a checkbox with the given <i>parent</i>, but with no text.</p>
<p>The <i>parent</i> argument is passed on to the QAbstractButton constructor.</p>

*/"/>
    <method name="public QCheckBox(java.lang.String text__0, com.trolltech.qt.gui.QWidget parent__1)" doc="/**
<p>Constructs a checkbox with the given <i>parent</i> and <i>text</i>.</p>
<p>The <i>parent</i> argument is passed on to the QAbstractButton constructor.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.CheckState checkState()" doc="/**
<p>Returns the check box's check state.</p>

*/"/>
    <method name="public final boolean isTristate()"/>
    <method name="public final void setCheckState(com.trolltech.qt.core.Qt.CheckState state__0)" doc="/**
<p>Sets the check box's check state to <i>state</i>.</p>

*/"/>
    <method name="public final void setTristate(boolean y__0)"/>
    <method name="protected void checkStateSet()"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected boolean hitButton(com.trolltech.qt.core.QPoint pos__0)"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void nextCheckState()"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
</class>
