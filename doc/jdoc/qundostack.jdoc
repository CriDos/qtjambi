<class name="QUndoStack" doc="/**
<p>The QUndoStack class is a stack of QUndoCommand objects.</p>
<p>For an overview of Qt's Undo Framework, see the overview document.</p>
<p>An undo stack maintains a stack of commands that have been applied to a document.</p>
<p>New commands are pushed on the stack using push(). Commands can be undone and redone using undo() and redo(), or by triggering the actions returned by createUndoAction() and createRedoAction().</p>
<p>QUndoStack keeps track of the <i>current</i> command. This is the command which will be executed by the next call to redo(). The index of this command is returned by index(). The state of the edited object can be rolled forward or back using setIndex(). If the top-most command on the stack has already been redone, index() is equal to count().</p>
<p>QUndoStack provides support for undo and redo actions, command compression, command macros, and supports the concept of a <i>clean state</i>.</p>
<a name=&quote;undo-and-redo-actions&quote;></a>
<h3>Undo and Redo Actions</h3>
<p>QUndoStack provides convenient undo and redo QAction objects, which can be inserted into a menu or a toolbar. When commands are undone or redone, QUndoStack updates the text properties of these actions to reflect what change they will trigger. The actions are also disabled when no command is available for undo or redo. These actions are returned by QUndoStack::createUndoAction() and QUndoStack::createRedoAction().</p>
<a name=&quote;command-compression-and-macros&quote;></a>
<h3>Command Compression and Macros</h3>
<p>Command compression is useful when several commands can be compressed into a single command that can be undone and redone in a single operation. For example, when a user types a character in a text editor, a new command is created. This command inserts the character into the document at the cursor position. However, it is more convenient for the user to be able to undo or redo typing of whole words, sentences, or paragraphs. Command compression allows these single-character commands to be merged into a single command which inserts or deletes sections of text. For more information, see QUndoCommand::mergeWith() and push().</p>
<p>A command macro is a sequence of commands, all of which are undone and redone in one go. Command macros are created by giving a command a list of child commands. Undoing or redoing the parent command will cause the child commands to be undone or redone. Command macros may be created explicitly by specifying a parent in the QUndoCommand constructor, or by using the convenience functions beginMacro() and endMacro().</p>
<p>Although command compression and macros appear to have the effect to the user, they often have different uses in an application. Commands that perform small changes to a document may be usefully compressed if there is no need to individually record them, and if only larger changes are relevant to the user. However, for commands that need to be recorded individually, or those that cannot be compressed, it is useful to use macros to provide a more convenient user experience while maintaining a record of each command.</p>
<a name=&quote;clean-state&quote;></a>
<h3>Clean State</h3>
<p>QUndoStack supports the concept of a clean state. When the document is saved to disk, the stack can be marked as clean using setClean(). Whenever the stack returns to this state through the use of undo/redo commands, it emits the signal cleanChanged(), which is also emitted when the stack leaves the clean state. This signal is usually used to enable and disable the save actions in the application, and to update the document's title to reflect that it contains unsaved changes.</p>

*/">
    <method name="public QUndoStack(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs an empty undo stack with the parent <i>parent</i>. The stack will initally be in the clean state. If <i>parent</i> is a QUndoGroup object, the stack is automatically added to the group.</p>

*/"/>
    <method name="public final void beginMacro(java.lang.String text__0)" doc="/**
<p>Begins composition of a macro command with the given <i>text</i> description.</p>
<p>An empty command described by the specified <i>text</i> is pushed on the stack. Any subsequent commands pushed on the stack will be appended to the empty command's children until endMacro() is called.</p>
<p>Calls to beginMacro() and endMacro() may be nested, but every call to beginMacro() must have a matching call to endMacro().</p>
<p>While a macro is composed, the stack is disabled. This means that:</p>
<ul>
<li>indexChanged() and cleanChanged() are not emitted,</li>
<li>canUndo() and canRedo() return false,</li>
<li>calling undo() or redo() has no effect,</li>
<li>the undo/redo actions are disabled.</li>
</ul>
<p>The stack becomes enabled and appropriate signals are emitted when endMacro() is called for the outermost macro.</p>
<pre>    stack.beginMacro(&quot;insert red text&quot;);
    stack.push(new InsertText(document, idx, text));
    stack.push(new SetColor(document, idx, text.length(), Qt::red));
    stack.endMacro(); <span class=&quote;comment&quote;>// indexChanged() is emitted</span></pre>
<p>This code is equivalent to:</p>
<pre>    QUndoCommand *insertRed = new QUndoCommand(); <span class=&quote;comment&quote;>// an empty command</span>
    insertRed-&gt;setText(&quot;insert red text&quot;);

    new InsertText(document, idx, text, insertRed); <span class=&quote;comment&quote;>// becomes child of insertRed</span>
    new SetColor(document, idx, text.length(), Qt::red, insertRed);

    stack.push(insertRed);</pre>

*/"/>
    <method name="public final boolean canRedo()" doc="/**
<p>Returns true if there is a command available for redo; otherwise returns false.</p>
<p>This function returns false if the stack is empty or if the top command on the stack has already been redone.</p>
<p>Synonymous with index() == count().</p>

*/"/>
    <method name="public final boolean canUndo()" doc="/**
<p>Returns true if there is a command available for undo; otherwise returns false.</p>
<p>This function returns false if the stack is empty, or if the bottom command on the stack has already been undone.</p>
<p>Synonymous with index() == 0.</p>

*/"/>
    <method name="public final int cleanIndex()" doc="/**
<p>Returns the clean index. This is the index at which setClean() was called.</p>
<p>A stack may not have a clean index. This happens if a document is saved, some commands are undone, then a new command is pushed. Since push() deletes all the undone commands before pushing the new command, the stack can't return to the clean state again. In this case, this function returns -1.</p>

*/"/>
    <method name="public final void clear()" doc="/**
<p>Clears the command stack by deleting all commands on it, and returns the stack to the clean state.</p>
<p>Commands are not undone or redone; the state of the edited object remains unchanged.</p>
<p>This function is usually used when the contents of the document are abandoned.</p>

*/"/>
    <method name="public final int count()" doc="/**
<p>Returns the number of commands on the stack. Macro commands are counted as one command.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAction createRedoAction(com.trolltech.qt.core.QObject parent__0, java.lang.String prefix__1)" doc="/**
<p>Creates an redo QAction object with the given <i>parent</i>.</p>
<p>Triggering this action will cause a call to redo(). The text of this action is the text of the command which will be redone in the next call to redo(), prefixed by the specified <i>prefix</i>. If there is no command available for redo, this action will be disabled.</p>
<p>If <i>prefix</i> is empty, the default prefix &quot;Redo&quot; is used.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QAction createUndoAction(com.trolltech.qt.core.QObject parent__0, java.lang.String prefix__1)" doc="/**
<p>Creates an undo QAction object with the given <i>parent</i>.</p>
<p>Triggering this action will cause a call to undo(). The text of this action is the text of the command which will be undone in the next call to undo(), prefixed by the specified <i>prefix</i>. If there is no command available for undo, this action will be disabled.</p>
<p>If <i>prefix</i> is empty, the default prefix &quot;Undo&quot; is used.</p>

*/"/>
    <method name="public final void endMacro()" doc="/**
<p>Ends composition of a macro command.</p>
<p>If this is the outermost macro in a set nested macros, this function emits indexChanged() once for the entire macro command.</p>

*/"/>
    <method name="public final int index()" doc="/**
<p>Returns the index of the current command. This is the command that will be executed on the next call to redo(). It is not always the top-most command on the stack, since a number of commands may have been undone.</p>

*/"/>
    <method name="public final boolean isActive()"/>
    <method name="public final boolean isClean()" doc="/**
<p>If the stack is in the clean state, returns true; otherwise returns false.</p>

*/"/>
    <method name="public final void push(com.trolltech.qt.gui.QUndoCommand cmd__0)" doc="/**
<p>Pushes <i>cmd</i> on the stack or merges it with the most recently executed command. In either case, executes <i>cmd</i> by calling its redo() function.</p>
<p>If <i>cmd</i>'s id is not -1, and if the id is the same as that of the most recently executed command, QUndoStack will attempt to merge the two commands by calling QUndoCommand::mergeWith() on the most recently executed command. If QUndoCommand::mergeWith() returns true, the <i>cmd</i> is deleted.</p>
<p>In all other cases <i>cmd</i> is simply pushed on the stack.</p>
<p>If the current command index does not point to the top of the stack - ie. if commands were undone before <i>cmd</i> was pushed - the current command and all commands above it are deleted. Hence <i>cmd</i> always ends up being the top-most command on the stack.</p>
<p>Once a command is pushed, the stack takes ownership of it. There are no getters to return the command, since modifying it after it has been executed will almost always lead to corruption of the document's state.</p>

*/"/>
    <method name="public final void redo()" doc="/**
<p>Redoes the current command by calling QUndoCommand::redo(). Increments the current command index.</p>
<p>If the stack is empty, or if the top command on the stack has already been redone, this function does nothing.</p>

*/"/>
    <method name="public final java.lang.String redoText()" doc="/**
<p>Returns the text of the command which will be redone in the next call to redo().</p>

*/"/>
    <method name="public final void setActive(boolean active__0)"/>
    <method name="public final void setClean()" doc="/**
<p>Marks the stack as clean and emits cleanChanged() if the stack was not already clean.</p>
<p>Whenever the stack returns to this state through the use of undo/redo commands, it emits the signal cleanChanged(). This signal is also emitted when the stack leaves the clean state.</p>

*/"/>
    <method name="public final void setIndex(int idx__0)" doc="/**
<p>Repeatedly calls undo() or redo() until the the current command index reaches <i>idx</i>. This function can be used to roll the state of the document forwards of backwards. indexChanged() is emitted only once.</p>

*/"/>
    <method name="public final java.lang.String text(int idx__0)" doc="/**
<p>Returns the text of the command at index <i>idx</i>.</p>

*/"/>
    <method name="public final void undo()" doc="/**
<p>Undoes the command below the current command by calling QUndoCommand::undo(). Decrements the current command index.</p>
<p>If the stack is empty, or if the bottom command on the stack has already been undone, this function does nothing.</p>

*/"/>
    <method name="public final java.lang.String undoText()" doc="/**
<p>Returns the text of the command which will be undone in the next call to undo().</p>

*/"/>
</class>
