<class name="QTextStream" doc="/**
<p>The QTextStream class provides a convenient interface for reading and writing text.</p>
<p>QTextStream can operate on a QIODevice, a QByteArray or a QString. Using QTextStream's streaming operators, you can conveniently read and write words, lines and numbers. For generating text, QTextStream supports formatting options for field padding and alignment, and formatting of numbers. Example:</p>
<pre>    QFile data(&quot;output.txt&quot;);
    if (data.open(QFile::WriteOnly | QFile::Truncate)) {
        QTextStream out(&amp;data);
        out &lt;&lt; &quot;Result: &quot; &lt;&lt; qSetFieldWidth(10) &lt;&lt; left &lt;&lt; 3.14 &lt;&lt; 2.7 &lt;&lt; endl;
        <span class=&quote;comment&quote;>// writes &quot;Result: 3.14      2.7       \n&quot;</span>
    }</pre>
<p>Besides using QTextStream's constructors, you can also set the device or string QTextStream operates on by calling setDevice() or setString(). You can seek to a position by calling seek(), and atEnd() will return true when there is no data left to be read. If you call flush(), QTextStream will empty all data from its write buffer into the device and call flush() on the device.</p>
<p>Internally, QTextStream uses a Unicode based buffer, and QTextCodec is used by QTextStream to automatically support different character sets. By default, QTextCodec::codecForLocale() is used for reading and writing, but you can also set the codec by calling setCodec(). Automatic Unicode detection is also supported. When this feature is enabled (the default behavior), QTextStream will detect the UTF-16 BOM (Byte Order Mark) and switch to the appropriate UTF-16 codec when reading. QTextStream does not write a BOM by default, but you can enable this by calling setGenerateByteOrderMark(true). When QTextStream operates on a QString directly, the codec is disabled.</p>
<p>There are three general ways to use QTextStream when reading text files:</p>
<ul>
<li>Chunk by chunk, by calling readLine() or readAll().</li>
<li>Word by word. QTextStream supports streaming into QStrings, QByteArrays and char* buffers. Words are delimited by space, and leading white space is automatically skipped.</li>
<li>Character by character, by streaming into QChar or char types. This method is often used for convenient input handling when parsing files, independent of character encoding and end-of-line semantics. To skip white space, call skipWhiteSpace().</li>
</ul>
<p>By default, when reading numbers from a stream of text, QTextStream will automatically detect the number's base representation. For example, if the number starts with &quot;0x&quot;, it is assumed to be in hexadecimal form. If it starts with the digits 1-9, it is assumed to be in decimal form, and so on. You can set the integer base, thereby disabling the automatic detection, by calling setIntegerBase(). Example:</p>
<pre>    QTextStream in(&quot;0x50 0x20&quot;);
    int firstNumber, secondNumber;

    in &gt;&gt; firstNumber;             <span class=&quote;comment&quote;>// firstNumber == 80</span>
    in &gt;&gt; dec &gt;&gt; secondNumber;     <span class=&quote;comment&quote;>// secondNumber == 0</span>

    char ch;
    in &gt;&gt; ch;                      <span class=&quote;comment&quote;>// ch == 'x'</span></pre>
<p>QTextStream supports many formatting options for generating text. You can set the field width and pad character by calling setFieldWidth() and setPadChar(). Use setFieldAlignment() to set the alignment within each field. For real numbers, call setRealNumberNotation() and setRealNumberPrecision() to set the notation (SmartNotation, ScientificNotation, FixedNotation) and precision in digits of the generated number. Some extra number formatting options are also available through setNumberFlags().</p>
<a name=&quote;qtextstream-manipulators&quote;></a><p>Like <tt>&lt;iostream&gt;</tt> in the standard C++ library, QTextStream also defines several global manipulator functions:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Manipulator</th><th>Description</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>bin</tt></td><td>Same as setIntegerBase(2).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>oct</tt></td><td>Same as setIntegerBase(8).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>dec</tt></td><td>Same as setIntegerBase(10).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>hex</tt></td><td>Same as setIntegerBase(16).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>showbase</tt></td><td>Same as setNumberFlags(numberFlags() | ShowBase).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>forcesign</tt></td><td>Same as setNumberFlags(numberFlags() | ForceSign).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>forcepoint</tt></td><td>Same as setNumberFlags(numberFlags() | ForcePoint).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>noshowbase</tt></td><td>Same as setNumberFlags(numberFlags() &amp; ~ShowBase).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>noforcesign</tt></td><td>Same as setNumberFlags(numberFlags() &amp; ~ForceSign).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>noforcepoint</tt></td><td>Same as setNumberFlags(numberFlags() &amp; ~ForcePoint).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>uppercasebase</tt></td><td>Same as setNumberFlags(numberFlags() | UppercaseBase).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>uppercasedigits</tt></td><td>Same as setNumberFlags(numberFlags() | UppercaseDigits).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>lowercasebase</tt></td><td>Same as setNumberFlags(numberFlags() &amp; ~UppercaseBase).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>lowercasedigits</tt></td><td>Same as setNumberFlags(numberFlags() &amp; ~UppercaseDigits).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>fixed</tt></td><td>Same as setRealNumberNotation(FixedNotation).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>scientific</tt></td><td>Same as setRealNumberNotation(ScientificNotation).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>left</tt></td><td>Same as setFieldAlignment(AlignLeft).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>right</tt></td><td>Same as setFieldAlignment(AlignRight).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>center</tt></td><td>Same as setFieldAlignment(AlignCenter).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>endl</tt></td><td>Same as operator&lt;&lt;('\n') and flush().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>flush</tt></td><td>Same as flush().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>reset</tt></td><td>Same as reset().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><tt>ws</tt></td><td>Same as skipWhiteSpace().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><tt>bom</tt></td><td>Same as setGenerateByteOrderMark(true).</td></tr>
</table></p>
<p>In addition, Qt provides three global manipulators that take a parameter: qSetFieldWidth(), qSetPadChar(), and qSetRealNumberPrecision().</p>

*/">
    <method name="public QTextStream(com.trolltech.qt.core.QIODevice device__0)" doc="/**
<p>Constructs a QTextStream that operates on <i>device</i>.</p>

*/"/>
    <method name="public QTextStream()" doc="/**
<p>Constructs a QTextStream. Before you can use it for reading or writing, you must assign a device or a string.</p>

*/"/>
    <method name="public final boolean atEnd()" doc="/**
<p>Returns true if there is no more data to be read from the QTextStream; otherwise returns false. This is similar to, but not the same as calling QIODevice::atEnd(), as QTextStream also takes into account its internal Unicode buffer.</p>

*/"/>
    <method name="public final boolean autoDetectUnicode()" doc="/**
<p>Returns true if automatic Unicode detection is enabled; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTextCodec codec()" doc="/**
<p>Returns the codec that is current assigned to the stream.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QIODevice device()" doc="/**
<p>Returns the current device associated with the QTextStream, or 0 if no device has been assigned.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTextStream.FieldAlignment fieldAlignment()" doc="/**
<p>Returns the current field alignment.</p>

*/"/>
    <method name="public final int fieldWidth()" doc="/**
<p>Returns the current field width.</p>

*/"/>
    <method name="public final void flush()" doc="/**
<p>Flushes any buffered data waiting to be written to the device.</p>
<p>If QTextStream operates on a string, this function does nothing.</p>

*/"/>
    <method name="public final boolean generateByteOrderMark()" doc="/**
<p>Returns true if QTextStream is set to generate the UTF-16 BOM (Byte Order Mark) when using a UTF-16 codec; otherwise returns false.</p>

*/"/>
    <method name="public final int integerBase()" doc="/**
<p>Returns the current base of integers. 0 means that the base is detected when reading, or 10 (decimal) when generating numbers.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTextStream.NumberFlags numberFlags()" doc="/**
<p>Returns the current number flags.</p>

*/"/>
    <method name="public final char padChar()" doc="/**
<p>Returns the current pad character.</p>

*/"/>
    <method name="public final long pos()" doc="/**
<p>Returns the device position corresponding to the current position of the stream, or -1 if an error occurs (e.g., if there is no device or string, or if there's a device error).</p>
<p>Because QTextStream is buffered, this function may have to rewind the device to reconstruct a valid device position. This operation can be expensive, so you may want to avoid calling this function in a tight loop.</p>

*/"/>
    <method name="public final java.lang.String read(long maxlen__0)" doc="/**
<p>Reads at most <i>maxlen</i> characters from the stream, and returns the data read as a QString.</p>

*/"/>
    <method name="public final java.lang.String readAll()" doc="/**
<p>Reads the entire content of the stream, and returns it as a QString. Avoid this function when working on large files, as it will consume a significant amount of memory.</p>
<p>Calling readLine() is better if you do not know how much data is available.</p>

*/"/>
    <method name="public final java.lang.String readLine(long maxlen__0)" doc="/**
<p>Reads one line of text from the stream, and returns it as a QString. The maximum allowed line length is set to <i>maxlen</i>. If the stream contains lines longer than this, then the lines will be split after <i>maxlen</i> characters and returned in parts.</p>
<p>If <i>maxlen</i> is 0, the lines can be of any length. A common value for <i>maxlen</i> is 75.</p>
<p>The returned line has no trailing end-of-line characters (&quot;\n&quot; or &quot;\r\n&quot;), so calling QString::trimmed() is unnecessary.</p>
<p>If the stream has read to the end of the file, the returned string will be an empty string. You can explicitly test for the end of the file using atEnd().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTextStream.RealNumberNotation realNumberNotation()" doc="/**
<p>Returns the current real number notation.</p>

*/"/>
    <method name="public final int realNumberPrecision()" doc="/**
<p>Returns the current real number precision, or the number of fraction digits QTextStream will write when generating real numbers.</p>

*/"/>
    <method name="public final void reset()" doc="/**
<p>Resets QTextStream's formatting options, bringing it back to its original constructed state. The device, string and any buffered data is left untouched.</p>

*/"/>
    <method name="public final void resetStatus()" doc="/**
<p>Resets the status of the text stream.</p>

*/"/>
    <method name="public final boolean seek(long pos__0)" doc="/**
<p>Seeks to the position <i>pos</i> in the device. Returns true on success; otherwise returns false.</p>

*/"/>
    <method name="public final void setAutoDetectUnicode(boolean enabled__0)" doc="/**
<p>If <i>enabled</i> is true, QTextStream will attempt to detect Unicode encoding by peeking into the stream data to see if it can find the UTF-16 BOM (Byte Order Mark). If this mark is found, QTextStream will replace the current codec with the UTF-16 codec.</p>
<p>This function can be used together with setCodec(). It is common to set the codec to UTF-8, and then enable UTF-16 detection.</p>

*/"/>
    <method name="public final void setCodec(com.trolltech.qt.core.QTextCodec codec__0)" doc="/**
<p>Sets the codec for this stream to <i>codec</i>. The codec is used for decoding any data that is read from the assigned device, and for encoding any data that is written. By default, QTextCodec::codecForLocale() is used, and automatic unicode detection is enabled.</p>
<p>If QTextStream operates on a string, this function does nothing.</p>

*/"/>
    <method name="public final void setCodec(com.trolltech.qt.QNativePointer codecName__0)" doc="/**
<p>Sets the codec for this stream to the QTextCodec for the encoding specified by <i>codecName</i>. Common values for <tt>codecName</tt> include &quot;ISO 8859-1&quot;, &quot;UTF-8&quot;, and &quot;UTF-16&quot;. If the encoding isn't recognized, nothing happens.</p>
<p>Example:</p>
<pre>    QTextStream out(&amp;file);
    out.setCodec(&quot;UTF-8&quot;);</pre>

*/"/>
    <method name="public final void setDevice(com.trolltech.qt.core.QIODevice device__0)" doc="/**
<p>Sets the current device to <i>device</i>. If a device has already been assigned, QTextStream will call flush() before the old device is replaced.</p>

*/"/>
    <method name="public final void setFieldAlignment(com.trolltech.qt.core.QTextStream.FieldAlignment alignment__0)" doc="/**
<p>Sets the field alignment to <i>mode</i>. When used together with setFieldWidth(), this function allows you to generate formatted output with text aligned to the left, to the right or center aligned.</p>

*/"/>
    <method name="public final void setFieldWidth(int width__0)" doc="/**
<p>Sets the current field width to <i>width</i>. If <i>width</i> is 0 (the default), the field width is equal to the length of the generated text.</p>

*/"/>
    <method name="public final void setGenerateByteOrderMark(boolean generate__0)" doc="/**
<p>If <i>generate</i> is true and a UTF-16 codec is used, QTextStream will insert the BOM (Byte Order Mark) before any data has been written to the device. If <i>generate</i> is false, no BOM will be inserted. This function must be called before any data is written. Otherwise, it does nothing.</p>

*/"/>
    <method name="public final void setIntegerBase(int base__0)" doc="/**
<p>Sets the base of integers to <i>base</i>, both for reading and for generating numbers. <i>base</i> can be either 2 (binary), 8 (octal), 10 (decimal) or 16 (hexadecimal). If <i>base</i> is 0, QTextStream will attempt to detect the base by inspecting the data on the stream. When generating numbers, QTextStream assumes base is 10 unless the base has been set explicitly.</p>

*/"/>
    <method name="public final void setNumberFlags(com.trolltech.qt.core.QTextStream.NumberFlags flags__0)" doc="/**
<p>Sets the current number flags to <i>flags</i>. <i>flags</i> is a set of flags from the NumberFlags enum, and describes options for formatting generated code (e.g., whether or not to always write the base or sign of a number).</p>

*/"/>
    <method name="public final void setPadChar(char ch__0)" doc="/**
<p>Sets the pad character to <i>ch</i>. The default value is the ASCII space character (' '), or QChar(0x20). This character is used to fill in the space in fields when generating text.</p>
<p>Example:</p>
<pre>    QString s;
    QTextStream out(&amp;s);
    out.setFieldWidth(10);
    out.setPadChar('-');
    out &lt;&lt; &quot;Qt&quot; &lt;&lt; endl &lt;&lt; &quot;rocks!&quot; &lt;&lt; endl;</pre>
<p>Output:</p>
<pre>    ----Qt----
    --rocks!--</pre>

*/"/>
    <method name="public final void setRealNumberNotation(com.trolltech.qt.core.QTextStream.RealNumberNotation notation__0)" doc="/**
<p>Sets the real number notation to <i>notation</i> (SmartNotation, FixedNotation, ScientificNotation). When reading and generating numbers, QTextStream uses this value to detect the formatting of real numbers.</p>

*/"/>
    <method name="public final void setRealNumberPrecision(int precision__0)" doc="/**
<p>Sets the precision of real numbers to <i>precision</i>. This value describes the number of fraction digits QTextStream should write when generating real numbers.</p>

*/"/>
    <method name="public final void setStatus(com.trolltech.qt.core.QTextStream.Status status__0)" doc="/**
<p>Sets the status of the text stream to the <i>status</i> given.</p>

*/"/>
    <method name="public final void setString(com.trolltech.qt.QNativePointer string__0, com.trolltech.qt.core.QIODevice.OpenMode openMode__1)" doc="/**
<p>Sets the current string to <i>string</i>, using the given <i>openMode</i>. If a device has already been assigned, QTextStream will call flush() before replacing it.</p>

*/"/>
    <method name="public final void skipWhiteSpace()" doc="/**
<p>Reads and discards whitespace from the stream until either a non-space character is detected, or until atEnd() returns true. This function is useful when reading a stream character by character.</p>
<p>Whitespace characters are all characters for which QChar::isSpace() returns true.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QTextStream.Status status()" doc="/**
<p>Returns the status of the text stream.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer string()" doc="/**
<p>Returns the current string assigned to the QTextStream, or 0 if no string has been assigned.</p>

*/"/>
    <enum name="RealNumberNotation" doc="/**
<p>This enum specifies which notations to use for expressing <tt>float</tt> and <tt>double</tt> as strings.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Scientific notation (<tt>printf()</tt>'s <tt>%e</tt> flag).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Fixed-point notation (<tt>printf()</tt>'s <tt>%f</tt> flag).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Scientific or fixed-point notation, depending on which makes most sense (<tt>printf()</tt>'s <tt>%g</tt> flag).</td></tr>
</table></p>

*/"/>
    <enum name="NumberFlag" doc="/**
<p>This enum specifies various flags that can be set to affect the output of integers, <tt>float</tt>s, and <tt>double</tt>s.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Show the base as a prefix if the base is 16 (&quot;0x&quot;), 8 (&quot;0&quot;), or 2 (&quot;0b&quot;).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Always put the decimal separator in numbers, even if there are no decimals.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Always put the sign in numbers, even for positive numbers.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Use uppercase versions of base prefixes (&quot;0X&quot;, &quot;0B&quot;).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Use uppercare letters for expressing digits 10 to 35 instead of lowercase.</td></tr>
</table></p>

*/"/>
    <enum name="FieldAlignment" doc="/**
<p>This enum specifies how to align text in fields when the field is wider than the text that occupies it.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Pad on the right side of fields.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Pad on the left side of fields.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Pad on both sides of field.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Same as AlignRight, except that the sign of a number is flush left.</td></tr>
</table></p>

*/"/>
    <enum name="Status" doc="/**
<p>This enum describes the current status of the text stream.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The text stream is operating normally.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The text stream has read past the end of the data in the underlying device.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The text stream has read corrupt data.</td></tr>
</table></p>

*/"/>
</class>
