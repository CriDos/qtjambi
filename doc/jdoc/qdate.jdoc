<class name="QDate" doc="/**
<p>The QDate class provides date functions.</p>
<p>A QDate object contains a calendar date, i.e. year, month, and day numbers, in the Gregorian calendar (Julian calendar for dates before 15 October 1582). It can read the current date from the system clock. It provides functions for comparing dates, and for manipulating dates. For example, it is possible to add and subtract days, months, and years to dates.</p>
<p>A QDate object is typically created either by giving the year, month, and day numbers explicitly, or by using the static function currentDate() that creates a QDate object containing the system clock's date. An explicit date can also be set using setDate(). The fromString() function returns a QDate given a string and a date format which is used to interpret the date within the string.</p>
<p>The year(), month(), and day() functions provide access to the year, month, and day numbers. Also, dayOfWeek() and dayOfYear() functions are provided. The same information is provided in textual format by the toString(), shortDayName(), longDayName(), shortMonthName(), and longMonthName() functions.</p>
<p>QDate provides a full set of operators to compare two QDate objects where smaller means earlier, and larger means later.</p>
<p>You can increment (or decrement) a date by a given number of days using addDays(). Similarly you can use addMonths() and addYears(). The daysTo() function returns the number of days between two dates.</p>
<p>The daysInMonth() and daysInYear() functions return how many days there are in this date's month and year, respectively. The isLeapYear() function indicates whether this date is in a leap year.</p>
<p>Note that the Gregorian calendar was introduced at different dates in different countries and regions. QDate uses the Gregorian calendar starting from 15 October 1582, and uses the Julian calendar for dates up to 4 October 1582.</p>

*/">
    <method name="public QDate()" doc="/**
<p>Constructs a null date. Null dates are invalid.</p>

*/"/>
    <method name="public QDate(int y__0, int m__1, int d__2)" doc="/**
<p>Constructs a date with year <i>y</i>, month <i>m</i> and day <i>d</i>.</p>
<p>If the specfied date is invalid, the date is not set and isValid() returns false. Any date before 2 January 4713 B.C. is considered invalid.</p>
<p><b>Warning:</b> For historical reasons, if <i>y</i> is in the range 0 to 99, it is interpreted as a year in the range 1900 to 1999. New code should not rely on this behavior as it might be changed in a future release.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDate addDays(int days__0)" doc="/**
<p>Returns a QDate object containing a date <i>ndays</i> later than the date of this object (or earlier if <i>ndays</i> is negative).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDate addMonths(int months__0)" doc="/**
<p>Returns a QDate object containing a date <i>nmonths</i> later than the date of this object (or earlier if <i>nmonths</i> is negative).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDate addYears(int years__0)" doc="/**
<p>Returns a QDate object containing a date <i>nyears</i> later than the date of this object (or earlier if <i>nyears</i> is negative).</p>

*/"/>
    <method name="public final int day()" doc="/**
<p>Returns the day of the month (1 to 31) of this date.</p>

*/"/>
    <method name="public final int dayOfWeek()" doc="/**
<p>Returns the weekday (1 to 7) for this date.</p>

*/"/>
    <method name="public final int dayOfYear()" doc="/**
<p>Returns the day of the year (1 to 365) for this date.</p>

*/"/>
    <method name="public final int daysInMonth()" doc="/**
<p>Returns the number of days in the month (28 to 31) for this date.</p>

*/"/>
    <method name="public final int daysInYear()" doc="/**
<p>Returns the number of days in the year (365 or 366) for this date.</p>

*/"/>
    <method name="public final int daysTo(com.trolltech.qt.core.QDate arg__0)" doc="/**
<p>Returns the number of days from this date to <i>d</i> (which is negative if <i>d</i> is earlier than this date).</p>
<p>Example:</p>
<pre>    QDate d1(1995, 5, 17);  <span class=&quote;comment&quote;>// May 17, 1995</span>
    QDate d2(1995, 5, 20);  <span class=&quote;comment&quote;>// May 20, 1995</span>
    d1.daysTo(d2);          <span class=&quote;comment&quote;>// returns 3</span>
    d2.daysTo(d1);          <span class=&quote;comment&quote;>// returns -3</span></pre>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if the date is null; otherwise returns false. A null date is invalid.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if this date is valid; otherwise returns false.</p>

*/"/>
    <method name="public final int month()" doc="/**
<p>Returns the number corresponding to the month of this date, using the following convention:</p>
<ul>
<li>1 = &quot;January&quot;</li>
<li>2 = &quot;February&quot;</li>
<li>3 = &quot;March&quot;</li>
<li>4 = &quot;April&quot;</li>
<li>5 = &quot;May&quot;</li>
<li>6 = &quot;June&quot;</li>
<li>7 = &quot;July&quot;</li>
<li>8 = &quot;August&quot;</li>
<li>9 = &quot;September&quot;</li>
<li>10 = &quot;October&quot;</li>
<li>11 = &quot;November&quot;</li>
<li>12 = &quot;December&quot;</li>
</ul>

*/"/>
    <method name="public final boolean setDate(int year__0, int month__1, int date__2)" doc="/**
<p>Sets the date's <i>year</i>, <i>month</i>, and <i>day</i>. Returns true if the date is valid; otherwise returns false.</p>
<p>If the specfied date is invalid, the QDate object is set to be invalid. Any date before 2 January 4713 B.C. is considered invalid.</p>

*/"/>
    <method name="public final boolean setYMD(int y__0, int m__1, int d__2)" doc="/**
<p>Sets the date's year <i>y</i>, month <i>m</i>, and day <i>d</i>.</p>
<p>If <i>y</i> is in the range 0 to 99, it is interpreted as 1900 to 1999.</p>
<p>Use setDate() instead.</p>

*/"/>
    <method name="public final int toJulianDay()" doc="/**
<p>Converts the date to a Julian day.</p>

*/"/>
    <method name="public final java.lang.String toString(com.trolltech.qt.core.Qt.DateFormat f__0)" doc="/**
<p>Returns the date as a string. The <i>format</i> parameter determines the format of the string.</p>
<p>If the <i>format</i> is Qt::TextDate, the string is formatted in the default way. QDate::shortDayName() and QDate::shortMonthName() are used to generate the string, so the day and month names will be localized names. An example of this formatting is &quot;Sat May 20 1995&quot;.</p>
<p>If the <i>format</i> is Qt::ISODate, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form YYYY-MM-DD, where YYYY is the year, MM is the month of the year (between 01 and 12), and DD is the day of the month between 01 and 31.</p>
<p>If the <i>format</i> is Qt::LocalDate or Qt::SystemLocaleDate, the string format depends on the locale settings of the system. Identical to calling QLocale::system().toString(date, QLocale::ShortFormat). <i>Qt::LocalDate has been deprecated, please use Qt::SystemLocaleDate instead.</i></p>
<p>If the <i>format</i> is Qt::LocaleDate, the string format depends on the default application locale. This is the locale set with QLocale::setDefault(), or the system locale if no default locale has been set. Identical to calling QLocale().toString(date, QLocale::ShortFormat);</p>
<p>If the datetime is invalid, an empty string will be returned.</p>
<p><b>Warning:</b> The Qt::ISODate format is only valid for years in the range 0 to 9999. This restriction may apply to Qt::LocalDate as well, depending on the locale settings.</p>

*/"/>
    <method name="public final java.lang.String toString(java.lang.String format__0)" doc="/**
<p>Returns the date as a string. The <i>format</i> parameter determines the format of the result string.</p>
<p>These expressions may be used:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>d</td><td>the day as number without a leading zero (1 to31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dd</td><td>the day as number with a leading zero (01 to 31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>ddd</td><td>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses QDate::shortDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dddd</td><td>the long localized day name (e.g. 'Qt::Monday' to 'Qt::Sunday'). Uses QDate::longDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>M</td><td>the month as number without a leading zero (1-12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MM</td><td>the month as number with a leading zero (01-12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>MMM</td><td>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses QDate::shortMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MMMM</td><td>the long localized month name (e.g. 'January' to 'December'). Uses QDate::longMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>yy</td><td>the year as two digit number (00 to 99)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>yyyy</td><td>the year as four digit number</td></tr>
</table></p>
<p>All other input characters will be ignored. Any sequence of characters that are enclosed in singlequotes will be treated as text and not be used as an expression.</p>
<p>Example format strings (assuming that the QDate is the 20 July 1969):</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Format</th><th>Result</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>dd.MM.yyyy</td><td>20.07.1969</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>ddd MMMM d yy</td><td>Sun July 20 69</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>'The day is' dddd</td><td>The day is Sunday</td></tr>
</table></p>
<p>If the datetime is invalid, an empty string will be returned.</p>
<p><b>Warning:</b> This function is only valid for years in the range 0 to 9999.</p>

*/"/>
    <method name="public final int weekNumber(com.trolltech.qt.QNativePointer yearNum__0)" doc="/**
<p>Returns the week number (1 to 53), and stores the year in *<i>yearNumber</i> unless <i>yearNumber</i> is null (the default).</p>
<p>Returns 0 if the date is invalid.</p>
<p>In accordance with ISO 8601, weeks start on Qt::Monday and the first Qt::Thursday of a year is always in week 1 of that year. Most years have 52 weeks, but some have 53.</p>
<p>*<i>yearNumber</i> is not always the same as year(). For example, 1 January 2000 has week number 52 in the year 1999, and 31 December 2002 has week number 1 in the year 2003.</p>
<div style=&quote;padding: 0.5em; background: #e0e0e0; color: black&quote;><p>Copyright (c) 1989 The Regents of the University of California. All rights reserved.</p>
<p>Redistribution and use in source and binary forms are permitted provided that the above copyright notice and this paragraph are duplicated in all such forms and that any documentation, advertising materials, and other materials related to such distribution and use acknowledge that the software was developed by the University of California, Berkeley. The name of the University may not be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED &quot;AS IS&quot; AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.</p>
</div>
*/"/>
    <method name="public final int year()" doc="/**
<p>Returns the year of this date. Zero and negative numbers indicate years before 1 A.D. = 1 C.E., such that year 0 is 1 B.C.E., -1 is 2 B.C.E. and so forth.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDate currentDate()" doc="/**
<p>Returns the current date, as reported by the system clock.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDate fromJulianDay(int jd__0)" doc="/**
<p>Converts the Julian day <i>jd</i> to a QDate.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDate fromString(java.lang.String s__0, java.lang.String format__1)" doc="/**
<p>Returns the QDate represented by the <i>string</i>, using the <i>format</i> given, or an invalid date if the string cannot be parsed.</p>
<p>These expressions may be used for the format:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Expression</th><th>Output</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>d</td><td>The day as a number without a leading zero (1 to 31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dd</td><td>The day as a number with a leading zero (01 to 31)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>ddd</td><td>The abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses QDate::shortDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>dddd</td><td>The long localized day name (e.g. 'Monday' to 'Sunday'). Uses QDate::longDayName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>M</td><td>The month as a number without a leading zero (1 to 12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MM</td><td>The month as a number with a leading zero (01 to 12)</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>MMM</td><td>The abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses QDate::shortMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>MMMM</td><td>The long localized month name (e.g. 'January' to 'December'). Uses QDate::longMonthName().</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>yy</td><td>The year as two digit number (00 to 99)</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>yyyy</td><td>The year as four digit number</td></tr>
</table></p>
<p>All other input characters will be treated as text. Any sequence of characters that are enclosed in single quotes will also be treated as text and will not be used as an expression. For example:</p>
<pre>    QDate date = QDate::fromString(&quot;1MM12car2003&quot;, &quot;d'MM'MMcaryyyy&quot;);
<span class=&quote;comment&quote;>    // date is 1 December 2003</span></pre>
<p>If the format is not satisfied, an invalid QDate is returned. The expressions that don't expect leading zeroes (d, M) will be greedy. This means that they will use two digits even if this will put them outside the accepted range of values and leaves too few digits for other sections. For example, the following format string could have meant January 30 but the M will grab two digits, resulting in an invalid date:</p>
<pre>    QDate date = QDate::fromString(&quot;130&quot;, &quot;Md&quot;); <span class=&quote;comment&quote;>// invalid</span></pre>
<p>For any field that is not represented in the format the following defaults are used:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Field</th><th>Default value</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Year</td><td>1900</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Month</td><td>1</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Day</td><td>1</td></tr>
</table></p>
<p>The following examples demonstrate the default values:</p>
<pre>    QDate::fromString(&quot;1.30&quot;, &quot;M.d&quot;);           <span class=&quote;comment&quote;>// January 30 1900</span>
    QDate::fromString(&quot;20000110&quot;, &quot;yyyyMMdd&quot;);  <span class=&quote;comment&quote;>// January 10, 2000</span>
    QDate::fromString(&quot;20000110&quot;, &quot;yyyyMd&quot;);    <span class=&quote;comment&quote;>// January 10, 2000</span></pre>

*/"/>
    <method name="public final static com.trolltech.qt.core.QDate fromString(java.lang.String s__0, com.trolltech.qt.core.Qt.DateFormat f__1)" doc="/**
<p>Returns the QDate represented by the <i>string</i>, using the <i>format</i> given, or an invalid date if the string cannot be parsed.</p>
<p>Note for Qt::TextDate: It is recommended that you use the English short month names (e.g. &quot;Jan&quot;). Although localized month names can also be used, they depend on the user's locale settings.</p>
<p><b>Warning:</b> Qt::LocalDate cannot be used here.</p>

*/"/>
    <method name="public native static int gregorianToJulian(int y__0, int m__1, int d__2)" doc="/**
<p>This function has a confusing name and shouldn't be part of the API anyway, since we have toJulian() and fromJulian(). Remove it in Qt 5.</p>

*/"/>
    <method name="public native static boolean isLeapYear(int year__0)" doc="/**
<p>Returns true if the specified <i>year</i> is a leap year; otherwise returns false.</p>

*/"/>
    <method name="public native static boolean isValid(int y__0, int m__1, int d__2)" doc="/**
<p>Returns true if the specified date (<i>year</i>, <i>month</i>, and <i>day</i>) is valid; otherwise returns false.</p>
<p>Example:</p>
<pre>    QDate::isValid(2002, 5, 17);  <span class=&quote;comment&quote;>// true</span>
    QDate::isValid(2002, 2, 30);  <span class=&quote;comment&quote;>// false (Feb 30 does not exist)</span>
    QDate::isValid(2004, 2, 29);  <span class=&quote;comment&quote;>// true (2004 is a leap year)</span>
    QDate::isValid(2000, 2, 29);  <span class=&quote;comment&quote;>// true (2000 is a leap year)</span>
    QDate::isValid(2006, 2, 29);  <span class=&quote;comment&quote;>// false (2006 is not a leap year)</span>
    QDate::isValid(2100, 2, 29);  <span class=&quote;comment&quote;>// false (2100 is not a leap year)</span>
    QDate::isValid(1202, 6, 6);   <span class=&quote;comment&quote;>// true (even though 1202 is pre-Gregorian)</span></pre>

*/"/>
    <method name="public native static void julianToGregorian(int jd__0, com.trolltech.qt.QNativePointer y__1, com.trolltech.qt.QNativePointer m__2, com.trolltech.qt.QNativePointer d__3)" doc="/**
<p>This function has a confusing name and shouldn't be part of the API anyway, since we have toJulian() and fromJulian(). Remove it in Qt 5.</p>

*/"/>
    <method name="public native static java.lang.String longDayName(int weekday__0)" doc="/**
<p>Returns the long name of the <i>weekday</i> using the following convention:</p>
<ul>
<li>1 = &quot;Monday&quot;</li>
<li>2 = &quot;Tuesday&quot;</li>
<li>3 = &quot;Wednesday&quot;</li>
<li>4 = &quot;Thursday&quot;</li>
<li>5 = &quot;Friday&quot;</li>
<li>6 = &quot;Saturday&quot;</li>
<li>7 = &quot;Sunday&quot;</li>
</ul>
<p>The day names will be localized according to the system's locale settings.</p>

*/"/>
    <method name="public native static java.lang.String longMonthName(int month__0)" doc="/**
<p>Returns the long name of the <i>month</i> using the following convention:</p>
<ul>
<li>1 = &quot;January&quot;</li>
<li>2 = &quot;February&quot;</li>
<li>3 = &quot;March&quot;</li>
<li>4 = &quot;April&quot;</li>
<li>5 = &quot;May&quot;</li>
<li>6 = &quot;June&quot;</li>
<li>7 = &quot;July&quot;</li>
<li>8 = &quot;August&quot;</li>
<li>9 = &quot;September&quot;</li>
<li>10 = &quot;October&quot;</li>
<li>11 = &quot;November&quot;</li>
<li>12 = &quot;December&quot;</li>
</ul>
<p>The month names will be localized according to the system's locale settings.</p>

*/"/>
    <method name="public native static java.lang.String shortDayName(int weekday__0)" doc="/**
<p>Returns the name of the <i>weekday</i> using the following convention:</p>
<ul>
<li>1 = &quot;Mon&quot;</li>
<li>2 = &quot;Tue&quot;</li>
<li>3 = &quot;Wed&quot;</li>
<li>4 = &quot;Thu&quot;</li>
<li>5 = &quot;Fri&quot;</li>
<li>6 = &quot;Sat&quot;</li>
<li>7 = &quot;Sun&quot;</li>
</ul>
<p>The day names will be localized according to the system's locale settings.</p>

*/"/>
    <method name="public native static java.lang.String shortMonthName(int month__0)" doc="/**
<p>Returns the name of the <i>month</i> using the following convention:</p>
<ul>
<li>1 = &quot;Jan&quot;</li>
<li>2 = &quot;Feb&quot;</li>
<li>3 = &quot;Mar&quot;</li>
<li>4 = &quot;Apr&quot;</li>
<li>5 = &quot;May&quot;</li>
<li>6 = &quot;Jun&quot;</li>
<li>7 = &quot;Jul&quot;</li>
<li>8 = &quot;Aug&quot;</li>
<li>9 = &quot;Sep&quot;</li>
<li>10 = &quot;Oct&quot;</li>
<li>11 = &quot;Nov&quot;</li>
<li>12 = &quot;Dec&quot;</li>
</ul>
<p>The month names will be localized according to the system's locale settings.</p>

*/"/>
</class>
