<class name="QSvgRenderer" doc="/**
<p>The QSvgRenderer class is used to draw the contents of SVG files onto paint devices.</p>
<p>Using QSvgRenderer, Scalable Vector Graphics (SVG) can be rendered onto any QPaintDevice subclass, including QWidget, QImage, and QGLWidget.</p>
<p>QSvgRenderer provides an API that supports basic features of SVG rendering, such as loading and rendering of static drawings, and more interactive features like animation. Since the rendering is performed using QPainter, SVG drawings can be rendered on any subclass of QPaintDevice.</p>
<p>SVG drawings are either loaded when an QSvgRenderer is constructed, or loaded later using the load() functions. Data is either supplied directly as serialized XML, or indirectly using a file name. If a valid file has been loaded, either when the renderer is constructed or at some later time, isValid() returns true; otherwise it returns false. QSvgRenderer provides the render() slot to render the current document, or the current frame of an animated document, using a given painter.</p>
<p>The defaultSize() function provides information about the amount of space that is required to render the currently loaded SVG file. This is useful for paint devices, such as QWidget, that often need to supply a size hint to their parent layout. The default size of a drawing may differ from its visible area, found using the viewBox property.</p>
<p>Animated SVG drawings are supported, and can be controlled with a simple collection of functions and properties:</p>
<ul>
<li>The animated() function indicates whether a drawing contains animation information.</li>
<li>The framesPerSecond property contains the rate at which the animation plays.</li>
</ul>
<p>Finally, the QSvgRenderer class provides the repaintNeeded() signal which is emitted whenever the rendering of the document needs to be updated.</p>

*/">
    <method name="public QSvgRenderer(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a new renderer with the given <i>parent</i>.</p>

*/"/>
    <method name="public QSvgRenderer(java.lang.String filename__0, com.trolltech.qt.core.QObject parent__1)" doc="/**
<p>Constructs a new renderer with the given <i>parent</i> and loads the contents of the SVG file with the specified <i>filename</i>.</p>

*/"/>
    <method name="public QSvgRenderer(com.trolltech.qt.core.QByteArray contents__0, com.trolltech.qt.core.QObject parent__1)" doc="/**
<p>Constructs a new renderer with the given <i>parent</i> and loads the specified SVG format <i>contents</i>.</p>

*/"/>
    <method name="public final boolean animated()" doc="/**
<p>Returns true if the current document contains animated elements; otherwise returns false.</p>

*/"/>
    <method name="public final int animationDuration()" doc="/**
<p>Returns the number of frames in the animation, or 0 if the current document is not animated.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF boundsOnElement(java.lang.String id__0)" doc="/**
<p>Returns bounding rectangle of the item with the given <i>id</i>. The transformation matrix of parent elements is not affecting the bounds of the element.</p>

*/"/>
    <method name="public final int currentFrame()"/>
    <method name="public final com.trolltech.qt.core.QSize defaultSize()" doc="/**
<p>Returns the default size of the document contents.</p>

*/"/>
    <method name="public final boolean elementExists(java.lang.String id__0)" doc="/**
<p>Returns true if the element with the given <i>id</i> exists in the currently parsed SVG file.</p>

*/"/>
    <method name="public final int framesPerSecond()"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if there is a valid current document; otherwise returns false.</p>

*/"/>
    <method name="public final boolean load(com.trolltech.qt.core.QByteArray contents__0)" doc="/**
<p>Loads the specified SVG format <i>contents</i>, returning true if the content was successfully parsed; otherwise returns false.</p>

*/"/>
    <method name="public final boolean load(java.lang.String filename__0)" doc="/**
<p>Loads the SVG file specified by <i>filename</i>, returning true if the content was successfully parsed; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMatrix matrixForElement(java.lang.String id__0)" doc="/**
<p>Returns the transformation matrix setup for the element with the given <i>id</i>. That includes the transformation on the element itself.</p>

*/"/>
    <method name="public final void render(com.trolltech.qt.gui.QPainter p__0)" doc="/**
<p>Renders the current document, or the current frame of an animated document, using the given <i>painter</i>.</p>

*/"/>
    <method name="public final void render(com.trolltech.qt.gui.QPainter p__0, java.lang.String elementId__1, com.trolltech.qt.core.QRectF bounds__2)" doc="/**
<p>Renders the given element with <i>elementId</i> using the given <i>painter</i> on the specified <i>bounds</i>. If the bounding rectangle is not specified the SVG element is mapped to the whole paint device.</p>

*/"/>
    <method name="public final void render(com.trolltech.qt.gui.QPainter p__0, com.trolltech.qt.core.QRectF bounds__1)" doc="/**
<p>Renders the current document, or the current frame of an animated document, using the given <i>painter</i> on the specified <i>bounds</i> within the painter. If the bounding rectangle is not specified the SVG file is mapped to the whole paint device.</p>

*/"/>
    <method name="public final void setCurrentFrame(int arg__0)"/>
    <method name="public final void setFramesPerSecond(int num__0)"/>
    <method name="public final void setViewBox(com.trolltech.qt.core.QRectF viewbox__0)"/>
    <method name="public final void setViewBox(com.trolltech.qt.core.QRect viewbox__0)"/>
    <method name="public final com.trolltech.qt.core.QRect viewBox()" doc="/**
<p>Returns viewBoxF().toRect().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF viewBoxF()"/>
</class>
