<class name="QFSFileEngine" doc="/**
<p>The QFSFileEngine class implements Qt's default file engine.</p>
<p>This class is part of the file engine framework in Qt. If you only want to access files or directories, use QFile, QFileInfo or QDir instead.</p>
<p>QFSFileEngine is the default file engine for accessing regular files. It is provided for convenience; by subclassing this class, you can alter its behavior slightly, without having to write a complete QAbstractFileEngine subclass. To install your custom file engine, you must also subclass QAbstractFileEngineHandler and create an instance of your handler.</p>
<p>It can also be useful to create a QFSFileEngine object directly if you need to use the local file system inside QAbstractFileEngine::create(), in order to avoid recursion (as higher-level classes tend to call QAbstractFileEngine::create()).</p>

*/">
    <method name="public QFSFileEngine()" doc="/**
<p>Constructs a QFSFileEngine.</p>

*/"/>
    <method name="public QFSFileEngine(java.lang.String file__0)" doc="/**
<p>Constructs a QFSFileEngine for the file name <i>file</i>.</p>

*/"/>
    <method name="public boolean caseSensitive()"/>
    <method name="public boolean close()"/>
    <method name="public boolean copy(java.lang.String newName__0)"/>
    <method name="public java.util.List&lt;java.lang.String&gt; entryList(com.trolltech.qt.core.QDir.Filters filters__0, java.util.List&lt;java.lang.String&gt; filterNames__1)" doc="/**
<p>Requests that a list of all the files matching the <i>filters</i> list based on the <i>filterNames</i> in the file engine's directory are returned.</p>
<p>Should return an empty list if the file engine refers to a file rather than a directory, or if the directory is unreadable or does not exist or if nothing matches the specifications.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QAbstractFileEngine.FileFlags fileFlags(com.trolltech.qt.core.QAbstractFileEngine.FileFlags type__0)" doc="/**
<p>This function should return the set of OR'd flags that are true for the file engine's file, and that are in the <i>type</i>'s OR'd members.</p>
<p>In your reimplementation you can use the <i>type</i> argument as an optimization hint and only return the OR'd set of members that are true and that match those in <i>type</i>; in other words you can ignore any members not mentioned in <i>type</i>, thus avoiding some potentially expensive lookups or system calls.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public java.lang.String fileName(com.trolltech.qt.core.QAbstractFileEngine.FileName file__0)" doc="/**
<p>Return the file engine's current file name in the format specified by <i>file</i>.</p>
<p>If you don't handle some <tt>FileName</tt> possibilities, return the file name set in setFileName() when an unhandled format is requested.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QDateTime fileTime(com.trolltech.qt.core.QAbstractFileEngine.FileTime time__0)" doc="/**
<p>If <i>time</i> is <tt>CreationTime</tt>, return when the file was created. If <i>time</i> is <tt>ModificationTime</tt>, return when the file was most recently modified. If <i>time</i> is <tt>AccessTime</tt>, return when the file was most recently accessed (e.g. read or written). If the time cannot be determined return QDateTime() (an invalid date time).</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean flush()"/>
    <method name="public int handle()"/>
    <method name="public boolean isRelativePath()"/>
    <method name="public boolean isSequential()"/>
    <method name="public boolean link(java.lang.String newName__0)"/>
    <method name="public boolean mkdir(java.lang.String dirName__0, boolean createParentDirectories__1)"/>
    <method name="public boolean open(com.trolltech.qt.core.QIODevice.OpenMode openMode__0)" doc="/**
<p>Opens the file in the specified <i>mode</i>. Returns true if the file was successfully opened; otherwise returns false.</p>
<p>The <i>mode</i> is an OR combination of QIODevice::OpenMode and QIODevice::HandlingMode values.</p>

*/"/>
    <method name="public java.lang.String owner(com.trolltech.qt.core.QAbstractFileEngine.FileOwner arg__0)" doc="/**
<p>If <i>owner</i> is <tt>OwnerUser</tt> return the name of the user who owns the file. If <i>owner</i> is <tt>OwnerGroup</tt> return the name of the group that own the file. If you can't determine the owner return QString().</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public int ownerId(com.trolltech.qt.core.QAbstractFileEngine.FileOwner arg__0)" doc="/**
<p>If <i>owner</i> is <tt>OwnerUser</tt> return the ID of the user who owns the file. If <i>owner</i> is <tt>OwnerGroup</tt> return the ID of the group that own the file. If you can't determine the owner return -2.</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public long pos()"/>
    <method name="public long read(com.trolltech.qt.QNativePointer data__0, long maxlen__1)" doc="/**
<p>Reads a number of characters from the file into <i>data</i>. At most <i>maxlen</i> characters will be read.</p>
<p>Returns -1 if a fatal error occurs, or 0 if there are no bytes to read.</p>

*/"/>
    <method name="public long readLine(com.trolltech.qt.QNativePointer data__0, long maxlen__1)" doc="/**
<p>This function reads one line, terminated by a '\n' character, from the file info <i>data</i>. At most <i>maxlen</i> characters will be read. The end-of-line character is included.</p>

*/"/>
    <method name="public boolean remove()"/>
    <method name="public boolean rename(java.lang.String newName__0)"/>
    <method name="public boolean rmdir(java.lang.String dirName__0, boolean recurseParentDirectories__1)"/>
    <method name="public boolean seek(long arg__0)" doc="/**
<p>Sets the file position to the given <i>offset</i>. Returns true if the position was successfully set; otherwise returns false.</p>
<p>The offset is from the beginning of the file, unless the file is sequential.</p>

*/"/>
    <method name="public void setFileName(java.lang.String file__0)"/>
    <method name="public boolean setPermissions(int perms__0)" doc="/**
<p>Requests that the file's permissions be set to <i>perms</i>. The argument perms will be set to the OR-ed together combination of QAbstractFileEngine::FileInfo, with only the QAbstractFileEngine::PermsMask being honored. If the operations succceeds return true; otherwise return false;</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public boolean setSize(long size__0)" doc="/**
<p>Requests that the file be set to size <i>size</i>. If <i>size</i> is larger than the current file then it is filled with 0's, if smaller it is simply truncated. If the operations succceeds return true; otherwise return false;</p>
<p>This virtual function must be reimplemented by all subclasses.</p>

*/"/>
    <method name="public long size()"/>
    <method name="public boolean supportsExtension(com.trolltech.qt.core.QAbstractFileEngine.Extension extension__0)"/>
    <method name="public long write(com.trolltech.qt.QNativePointer data__0, long len__1)" doc="/**
<p>Writes <i>len</i> bytes from <i>data</i> to the file. Returns the number of characters written on success; otherwise returns -1.</p>

*/"/>
    <method name="public native static java.lang.String currentPath(java.lang.String path__0)" doc="/**
<p>Returns the canonicalized form of the current path used by the file engine for the drive specified by <i>fileName</i>.</p>
<p>On Windows, each drive has its own current directory, so a different path is returned for file names that include different drive names (e.g. A: or C:).</p>

*/"/>
    <method name="public native static java.util.List&lt;com.trolltech.qt.core.QFileInfo&gt; drives()" doc="/**
<p>Returns the list of drives in the file system as a list of QFileInfo objects. On unix and Mac OS X, only the root path is returned. On Windows, this function returns all drives (A:, C:, D:, etc.).</p>

*/"/>
    <method name="public native static java.lang.String homePath()" doc="/**
<p>Returns the home path of the current user.</p>

*/"/>
    <method name="public native static java.lang.String rootPath()" doc="/**
<p>Returns the root path.</p>

*/"/>
    <method name="public native static boolean setCurrentPath(java.lang.String path__0)" doc="/**
<p>Sets the current path (e.g., for QDir), to <i>path</i>.</p>

*/"/>
    <method name="public native static java.lang.String tempPath()" doc="/**
<p>Returns the temporary path (i.e., a path in which it is safe to store temporary files).</p>

*/"/>
</class>
