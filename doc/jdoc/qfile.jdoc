<class name="QFile" doc="/**
<p>The QFile class provides an interface for reading from and writing to files.</p>
<p>QFile is an I/O device for reading and writing text and binary files and resources. A QFile may be used by itself or, more conveniently, with a QTextStream or QDataStream.</p>
<p>The file name is usually passed in the constructor, but it can be set at any time using setFileName(). You can check for a file's existence using exists(), and remove a file using remove(). (More advanced file system related operations are provided by QFileInfo and QDir.)</p>
<p>The file is opened with open(), closed with close(), and flushed with flush(). Data is usually read and written using QDataStream or QTextStream, but you can also call the QIODevice-inherited functions read(), readLine(), readAll(), write(). QFile also inherits getChar(), putChar(), and ungetChar(), which work one character at a time.</p>
<p>The size of the file is returned by size(). You can get the current file position using pos(), or move to a new file position using seek(). If you've reached the end of the file, atEnd() returns true.</p>
<p>The following example reads a text file line by line:</p>
<pre>        QFile file(&quot;in.txt&quot;);
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            return;

        while (!file.atEnd()) {
            QByteArray line = file.readLine();
            process_line(line);
        }</pre>
<p>The QIODevice::Text flag passed to open() tells Qt to convert Windows-style line terminators (&quot;\r\n&quot;) into C++-style terminators (&quot;\n&quot;). By default, QFile assumes binary, i.e. it doesn't perform any conversion on the bytes stored in the file.</p>
<p>The next example uses QTextStream to read a text file line by line:</p>
<pre>        QFile file(&quot;in.txt&quot;);
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            return;

        QTextStream in(&amp;file);
        while (!in.atEnd()) {
            QString line = in.readLine();
            process_line(line);
        }</pre>
<p>QTextStream takes care of converting the 8-bit data stored on disk into a 16-bit Unicode QString. By default, it assumes that the user system's local 8-bit encoding is used (e.g., ISO 8859-1 for most of Europe; see QTextCodec::codecForLocale() for details). This can be changed using setCodec().</p>
<p>To write text, we can use operator&lt;&lt;(), which is overloaded to take a QTextStream on the left and various data types (including QString) on the right:</p>
<pre>        QFile file(&quot;out.txt&quot;);
        if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
            return;

        QTextStream out(&amp;file);
        out &lt;&lt; &quot;The magic number is: &quot; &lt;&lt; 49 &lt;&lt; &quot;\n&quot;;</pre>
<p>QDataStream is similar, in that you can use operator&lt;&lt;() to write data and operator&gt;&gt;() to read it back. See the class documentation for details.</p>
<p>When you use QFile, QFileInfo, and QDir to access the file system with Qt, you can use Unicode file names. On Unix, these file names are converted to an 8-bit encoding. If you want to use standard C++ APIs (<tt>&lt;cstdio&gt;</tt> or <tt>&lt;iostream&gt;</tt>) or platform-specific APIs to access files instead of QFile, you can use the encodeName() and decodeName() functions to convert between Unicode file names and 8-bit file names.</p>
<p>On Unix, there are some special system files (e.g. in <tt>/proc</tt>) for which size() will always return 0, yet you may still be able to read more data from such a file; the data is generated in direct response to you calling read(). In this case, however, you cannot use atEnd() to determine if there is more data to read (since atEnd() will return true for a file that claims to have size 0). Instead, you should either call readAll(), or call read() or readLine() repeatedly until no more data can be read. The next example uses QTextStream to read <tt>/proc/modules</tt> line by line:</p>
<pre>        QFile file(&quot;/proc/modules&quot;);
        if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            return;

        QTextStream in(&amp;file);
        QString line = in.readLine();
        while (!line.isNull()) {
            process_line(line);
            line = in.readLine();
        }</pre>

*/">
    <method name="public QFile(java.lang.String name__0)" doc="/**
<p>Constructs a new file object to represent the file with the given <i>name</i>.</p>

*/"/>
    <method name="public QFile(java.lang.String name__0, com.trolltech.qt.core.QObject parent__1)" doc="/**
<p>Constructs a new file object with the given <i>parent</i> to represent the file with the specified <i>name</i>.</p>

*/"/>
    <method name="public QFile()"/>
    <method name="public QFile(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a new file object with the given <i>parent</i>.</p>

*/"/>
    <method name="public final boolean copy(java.lang.String newName__0)" doc="/**
<p>Copies the file currently specified by fileName() to a file called <i>newName</i>. Returns true if successful; otherwise returns false.</p>
<p>Note that if a file with the name <i>newName</i> already exists, copy() returns false (i.e. QFile will not overwrite it).</p>
<p>The source file is closed before it is copied.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QFile.FileError error()" doc="/**
<p>Returns the file error status.</p>
<p>The I/O device status returns an error code. For example, if open() returns false, or a read/write operation returns -1, this function can be called to find out the reason why the operation failed.</p>

*/"/>
    <method name="public final boolean exists()" doc="/**
<p>Returns true if the file specified by fileName() exists; otherwise returns false.</p>

*/"/>
    <method name="public final boolean flush()" doc="/**
<p>Flushes any buffered data to the file.</p>

*/"/>
    <method name="public final int handle()" doc="/**
<p>Returns the file handle of the file.</p>
<p>This is a small positive integer, suitable for use with C library functions such as fdopen() and fcntl(). On systems that use file descriptors for sockets (i.e. Unix systems, but not Windows) the handle can be used with QSocketNotifier as well.</p>
<p>If the file is not open, or there is an error, handle() returns -1.</p>

*/"/>
    <method name="public final boolean link(java.lang.String newName__0)" doc="/**
<p>Creates a link named <i>linkName</i> that points to the file currently specified by fileName(). What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Unix). Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QFile.Permissions permissions()" doc="/**
<p>Returns the complete OR-ed together combination of QFile::Permission for the file.</p>

*/"/>
    <method name="public final java.lang.String readLink()" doc="/**
<p>Use symLinkTarget() instead.</p>

*/"/>
    <method name="public final boolean remove()" doc="/**
<p>Removes the file specified by fileName(). Returns true if successful; otherwise returns false.</p>
<p>The file is closed before it is removed.</p>

*/"/>
    <method name="public final boolean rename(java.lang.String newName__0)" doc="/**
<p>Renames the file currently specified by fileName() to <i>newName</i>. Returns true if successful; otherwise returns false.</p>
<p>If a file with the name <i>newName</i> already exists, rename() returns false (i.e., QFile will not overwrite it).</p>
<p>The file is closed before it is renamed.</p>

*/"/>
    <method name="public final boolean resize(long sz__0)" doc="/**
<p>Sets the file size (in bytes) <i>sz</i>. Returns true if the file if the resize succeeds; false otherwise. If <i>sz</i> is larger than the file currently is the new bytes will be set to 0, if <i>sz</i> is smaller the file is simply truncated.</p>

*/"/>
    <method name="public final void setFileName(java.lang.String name__0)" doc="/**
<p>Sets the <i>name</i> of the file. The name can have no path, a relative path, or an absolute path.</p>
<p>Do not call this function if the file has already been opened.</p>
<p>If the file name has no path or a relative path, the path used will be the application's current directory path <i>at the time of the open()</i> call.</p>
<p>Example:</p>
<pre>    QFile file;
    QDir::setCurrent(&quot;/tmp&quot;);
    file.setFileName(&quot;readme.txt&quot;);
    QDir::setCurrent(&quot;/home&quot;);
    file.open(QIODevice::ReadOnly);      <span class=&quote;comment&quote;>// opens &quot;/home/readme.txt&quot; under Unix</span></pre>
<p>Note that the directory separator &quot;/&quot; works for all operating systems supported by Qt.</p>

*/"/>
    <method name="public final boolean setPermissions(com.trolltech.qt.core.QFile.Permissions permissionSpec__0)" doc="/**
<p>Sets the permissions for the file to <i>permissions</i>.</p>

*/"/>
    <method name="public final java.lang.String symLinkTarget()" doc="/**
<p>Returns the absolute path of the file or directory a symlink (or shortcut on Windows) points to, or a an empty string if the object isn't a symbolic link.</p>
<p>This name may not represent an existing file; it is only a string. QFile::exists() returns true if the symlink points to an existing file.</p>

*/"/>
    <method name="public final void unsetError()" doc="/**
<p>Sets the file's error to QFile::NoError.</p>

*/"/>
    <method name="public boolean atEnd()" doc="/**
<p>Returns true if the end of the file has been reached; otherwise returns false.</p>
<p>For regular empty files on Unix (e.g. those in <tt>/proc</tt>), this function returns true, since the file system reports that the size of such a file is 0. Therefore, you should not depend on atEnd() when reading data from such a file, but rather call read() until no more data can be read.</p>

*/"/>
    <method name="public void close()"/>
    <method name="public com.trolltech.qt.core.QAbstractFileEngine fileEngine()" doc="/**
<p>Returns the QIOEngine for this QFile object.</p>

*/"/>
    <method name="public java.lang.String fileName()" doc="/**
<p>Returns the name set by setFileName().</p>

*/"/>
    <method name="public boolean isSequential()" doc="/**
<p>Returns true if the file can only be manipulated sequentially; otherwise returns false.</p>
<p>Most files support random-access, but some special files may not.</p>

*/"/>
    <method name="public boolean open(com.trolltech.qt.core.QIODevice.OpenMode flags__0)" doc="/**
<p>Opens the file using OpenMode <i>mode</i>.</p>
<p>The <i>mode</i> must be QIODevice::ReadOnly, QIODevice::WriteOnly, or QIODevice::ReadWrite. It may also have additional flags, such as QIODevice::Text and QIODevice::Unbuffered.</p>

*/"/>
    <method name="public long pos()"/>
    <method name="protected long readData(com.trolltech.qt.QNativePointer data__0, long maxlen__1)" doc="/**
<p>Reads up to <i>maxSize</i> bytes from the device into <i>data</i>, and returns the number of bytes read or -1 if an error occurred.</p>
<p>This function is called by QIODevice. Reimplement this function when creating a subclass of QIODevice.</p>

*/"/>
    <method name="protected long readLineData(com.trolltech.qt.QNativePointer data__0, long maxlen__1)" doc="/**
<p>Reads up to <i>maxSize</i> characters into <i>data</i> and returns the number of characters read.</p>
<p>This function is called by readLine(), and provides its base implementation, using getChar(). Buffered devices can improve the performance of readLine() by reimplementing this function.</p>
<p>readLine() appends a '\0' byte to <i>data</i>; readLineData() does not need to do this.</p>

*/"/>
    <method name="public boolean seek(long offset__0)" doc="/**
<p>For random-access devices, this function sets the current position to <i>pos</i>, returning true on success, or false if an error occurred. For sequential devices, the default behavior is to do nothing and return false.</p>
<p>When subclassing QIODevice, you must call QIODevice::seek() at the start of your function to ensure integrity with QIODevice's built-in buffer. The base implementation always returns true.</p>

*/"/>
    <method name="public long size()" doc="/**
<p>Returns the size of the file.</p>
<p>For regular empty files on Unix (e.g. those in <tt>/proc</tt>), this function returns 0; the contents of such a file are generated on demand in response to you calling read().</p>

*/"/>
    <method name="protected long writeData(com.trolltech.qt.QNativePointer data__0, long len__1)" doc="/**
<p>Writes up to <i>maxSize</i> bytes from <i>data</i> to the device. Returns the number of bytes written, or -1 if an error occurred.</p>
<p>This function is called by QIODevice. Reimplement this function when creating a subclass of QIODevice.</p>

*/"/>
    <method name="public native static boolean copy(java.lang.String fileName__0, java.lang.String newName__1)" doc="/**
<p>Copies the file <i>fileName</i> to <i>newName</i>. Returns true if successful; otherwise returns false.</p>
<p>If a file with the name <i>newName</i> already exists, copy() returns false (i.e., QFile will not overwrite it).</p>

*/"/>
    <method name="public native static java.lang.String decodeName(com.trolltech.qt.QNativePointer localFileName__0)" doc="/**
<p>Returns the Unicode version of the given <i>localFileName</i>. See encodeName() for details.</p>

*/"/>
    <method name="public final static java.lang.String decodeName(com.trolltech.qt.core.QByteArray localFileName__0)" doc="/**
<p>This does the reverse of QFile::encodeName() using <i>localFileName</i>.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QByteArray encodeName(java.lang.String fileName__0)" doc="/**
<p>By default, this function converts <i>fileName</i> to the local 8-bit encoding determined by the user's locale. This is sufficient for file names that the user chooses. File names hard-coded into the application should only use 7-bit ASCII filename characters.</p>

*/"/>
    <method name="public native static boolean exists(java.lang.String fileName__0)" doc="/**
<p>Returns true if the file specified by <i>fileName</i> exists; otherwise returns false.</p>

*/"/>
    <method name="public native static boolean link(java.lang.String oldname__0, java.lang.String newName__1)" doc="/**
<p>Creates a link named <i>linkName</i> that points to the file <i>fileName</i>. What a link is depends on the underlying filesystem (be it a shortcut on Windows or a symbolic link on Unix). Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public final static com.trolltech.qt.core.QFile.Permissions permissions(java.lang.String filename__0)" doc="/**
<p>Returns the complete OR-ed together combination of QFile::Permission for <i>fileName</i>.</p>

*/"/>
    <method name="public native static java.lang.String readLink(java.lang.String fileName__0)" doc="/**
<p>Use symLinkTarget() instead.</p>

*/"/>
    <method name="public native static boolean remove(java.lang.String fileName__0)" doc="/**
<p>Removes the file specified by the <i>fileName</i> given.</p>
<p>Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public native static boolean rename(java.lang.String oldName__0, java.lang.String newName__1)" doc="/**
<p>Renames the file <i>oldName</i> to <i>newName</i>. Returns true if successful; otherwise returns false.</p>
<p>If a file with the name <i>newName</i> already exists, rename() returns false (i.e., QFile will not overwrite it).</p>

*/"/>
    <method name="public native static boolean resize(java.lang.String filename__0, long sz__1)" doc="/**
<p>Sets <i>fileName</i> to size (in bytes) <i>sz</i>. Returns true if the file if the resize succeeds; false otherwise. If <i>sz</i> is larger than <i>fileName</i> currently is the new bytes will be set to 0, if <i>sz</i> is smaller the file is simply truncated.</p>

*/"/>
    <method name="public final static boolean setPermissions(java.lang.String filename__0, com.trolltech.qt.core.QFile.Permissions permissionSpec__1)" doc="/**
<p>Sets the permissions for <i>fileName</i> file to <i>permissions</i>.</p>

*/"/>
    <method name="public native static java.lang.String symLinkTarget(java.lang.String fileName__0)" doc="/**
<p>Returns the absolute path of the file or directory referred to by the symlink (or shortcut on Windows) specified by <i>fileName</i>, or returns an empty string if the <i>fileName</i> does not correspond to a symbolic link.</p>
<p>This name may not represent an existing file; it is only a string. QFile::exists() returns true if the symlink points to an existing file.</p>

*/"/>
    <enum name="FileError" doc="/**
<p>This enum describes the errors that may be returned by the error() function.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>No error occurred.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An error occurred when reading from the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An error occurred when writing to the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A fatal error occurred.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file could not be opened.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The operation was aborted.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>A timeout occurred.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An unspecified error occurred.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file could not be removed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file could not be renamed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The position in the file could not be changed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file could not be resized.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file could not be accessed.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file could not be copied.</td></tr>
</table></p>

*/"/>
    <enum name="Permission" doc="/**
<p>This enum is used by the permission() function to report the permissions and ownership of a file. The values may be OR-ed together to test multiple permissions and ownership values.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is readable by the owner of the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is writable by the owner of the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is executable by the owner of the file.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is readable by the user.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is writable by the user.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is executable by the user.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is readable by the group.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is writable by the group.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is executable by the group.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is readable by anyone.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is writable by anyone.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The file is executable by anyone.</td></tr>
</table></p>
<p><b>Warning:</b> Because of differences in the platforms supported by Qt, the semantics of ReadUser, WriteUser and ExeUser are platform-dependent: On Unix, the rights of the owner of the file are returned and on Windows the rights of the current user are returned. This behavior might change in a future Qt version.</p>

*/"/>
</class>
