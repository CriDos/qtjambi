<class name="QDataWidgetMapper" doc="/**
<p>The QDataWidgetMapper class provides mapping between a section of a data model to widgets.</p>
<p>QDataWidgetMapper can be used to create data-aware widgets by mapping them to sections of an item model. A section is a column of a model if the orientation is horizontal (the default), otherwise a row.</p>
<p>Every time the current index changes, all widgets are updated with the contents from the model. If user edits the contents of the widget, the changes are written back to the model.</p>
<p>It is possible to set an item delegate to support custom widgets. By default, a QItemDelegate is used to synchronize the model with the widgets.</p>
<p>Let us assume that we have an item model named <tt>model</tt> with the following contents:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>1</td><td>$TROLLTECH$</td><td>Oslo</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>2</td><td>Trolltech Pty</td><td>Brisbane</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>3</td><td>Trolltech Inc</td><td>Palo Alto</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>4</td><td>Trolltech China</td><td>Beijing</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>5</td><td>Trolltech GmbH</td><td>Berlin</td></tr>
</table></p>
<p>The following code will map the columns of the model to widgets called <tt>mySpinBox</tt>, <tt>myLineEdit</tt> and <tt>myCountryChooser</tt>:</p>
<pre>    QDataWidgetMapper *mapper = new QDataWidgetMapper;
    mapper-&gt;setModel(model);
    mapper-&gt;addMapping(mySpinBox, 0);
    mapper-&gt;addMapping(myLineEdit, 1);
    mapper-&gt;addMapping(myCountryChooser, 2);
    mapper-&gt;toFirst();</pre>
<p>After the call to toFirst(), <tt>mySpinBox</tt> displays the value <tt>1</tt>, <tt>myLineEdit</tt> displays <tt>$TROLLTECH$</tt> and <tt>myCountryChooser</tt> displays <tt>Oslo</tt>. The navigational functions toFirst(), toNext(), toPrevious(), toLast() and setCurrentIndex() can be used to navigate in the model and update the widgets with contents from the model.</p>
<p>QDataWidgetMapper supports two submit policies, <tt>AutoSubmit</tt> and <tt>ManualSubmit</tt>. <tt>AutoSubmit</tt> will update the model as soon as the current widget loses focus, <tt>ManualSubmit</tt> will not update the model unless submit() is called. <tt>ManualSubmit</tt> is useful when displaying a dialog that lets the user cancel all modifications. Also, other views that display the model won't update until the user finishes all his modifications and submits.</p>
<p>Note that QDataWidgetMapper keeps track of external modifications. If the contents of the model are updated in another module of the application, the widgets are updated as well.</p>

*/">
    <method name="public QDataWidgetMapper(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a new QDataWidgetMapper with parent object <i>parent</i>. By default, the orientation is horizontal and the submit policy is <tt>AutoSubmit</tt>.</p>

*/"/>
    <method name="public final void addMapping(com.trolltech.qt.gui.QWidget widget__0, int section__1)" doc="/**
<p>Adds a mapping between a <i>widget</i> and a <i>section</i> from the model. The <i>section</i> is a column in the model if the orientation is horizontal (the default), otherwise a row.</p>
<p>For the following example, we assume a model <tt>myModel</tt> that has two columns, the first one containing the name of a person, the second column his age. The first column is mapped to the QLineEdit <tt>nameLineEdit</tt> and the second to the QSpinBox <tt>ageSpinBox</tt>:</p>
<pre>    QDataWidgetMapper *mapper = new QDataWidgetMapper();
    mapper-&gt;setModel(myModel);
    mapper-&gt;addMapping(nameLineEdit, 0);
    mapper-&gt;addMapping(ageSpinBox, 1);</pre>
<p>Note: If the <i>widget</i> is already mapped to a section, the old mapping will be replaced by the new one. A widget can never be mapped to more than one section at a time.</p>

*/"/>
    <method name="public final void clearMapping()" doc="/**
<p>Clears all mappings.</p>

*/"/>
    <method name="public final int currentIndex()"/>
    <method name="public final com.trolltech.qt.gui.QAbstractItemDelegate itemDelegate()" doc="/**
<p>Returns the current item delegate.</p>

*/"/>
    <method name="public final int mappedSection(com.trolltech.qt.gui.QWidget widget__0)" doc="/**
<p>Returns the section the <i>widget</i> is mapped to or -1 if the widget is not mapped.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget mappedWidgetAt(int section__0)" doc="/**
<p>Returns the widget that is mapped at <i>section</i>, or 0 if no widget is mapped at that section.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QAbstractItemModel model()" doc="/**
<p>Returns the current model.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Orientation orientation()"/>
    <method name="public final void removeMapping(com.trolltech.qt.gui.QWidget widget__0)" doc="/**
<p>Removes the mapping for the given <i>widget</i>.</p>

*/"/>
    <method name="public final void revert()" doc="/**
<p>Repopulates all widgets with the current data of the model. All unsubmitted changes will be lost.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QModelIndex rootIndex()" doc="/**
<p>Returns the current root index.</p>

*/"/>
    <method name="public final void setCurrentModelIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Sets the current index to the row of the <i>index</i> if the orientation is horizontal (the default), otherwise to the column of the <i>index</i>.</p>
<p>Calls setCurrentIndex() internally. This convenience slot can be connected to the signal currentRowChanged() or currentColumnChanged() of another view's selection model.</p>
<p>The following example illustrates how to update all widgets with new data whenever the selection of a QTableView named <tt>myTableView</tt> changes:</p>
<pre>    QDataWidgetMapper *mapper = new QDataWidgetMapper();
    connect(myTableView-&gt;selectionModel(), SIGNAL(currentRowChanged(QModelIndex)),
            mapper, SLOT(setCurrentModelIndex(QModelIndex)));</pre>

*/"/>
    <method name="public final void setItemDelegate(com.trolltech.qt.gui.QAbstractItemDelegate delegate__0)" doc="/**
<p>Sets the item delegate to <i>delegate</i>. The delegate will be used to write data from the model into the widget and from the widget to the model, using QAbstractItemDelegate::setEditorData() and QAbstractItemDelegate::setModelData().</p>
<p>The delegate also decides when to apply data and when to change the editor, using QAbstractItemDelegate::commitData() and QAbstractItemDelegate::closeEditor().</p>

*/"/>
    <method name="public final void setModel(com.trolltech.qt.core.QAbstractItemModel model__0)" doc="/**
<p>Sets the current model to <i>model</i>. If another model was set, all mappings to that old model are cleared.</p>

*/"/>
    <method name="public final void setOrientation(com.trolltech.qt.core.Qt.Orientation aOrientation__0)"/>
    <method name="public final void setRootIndex(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Sets the root item to <i>index</i>. This can be used to display a branch of a tree. Pass an invalid model index to display the top-most branch.</p>

*/"/>
    <method name="public final void setSubmitPolicy(com.trolltech.qt.gui.QDataWidgetMapper.SubmitPolicy policy__0)"/>
    <method name="public final boolean submit()" doc="/**
<p>Submits all changes from the mapped widgets to the model.</p>
<p>For every mapped section, the item delegate reads the current value from the widget and sets it in the model. Finally, the model's submit() method is invoked.</p>
<p>Returns true if all the values were submitted, otherwise false.</p>
<p>Note: For database models, QSqlQueryModel::lastError() can be used to retrieve the last error.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QDataWidgetMapper.SubmitPolicy submitPolicy()"/>
    <method name="public final void toFirst()" doc="/**
<p>Populates the widgets with data from the first row of the model if the orientation is horizontal (the default), otherwise with data from the first column.</p>
<p>This is equivalent to calling <tt>setCurrentIndex(0)</tt>.</p>

*/"/>
    <method name="public final void toLast()" doc="/**
<p>Populates the widgets with data from the last row of the model if the orientation is horizontal (the default), otherwise with data from the last column.</p>
<p>Calls setCurrentIndex() internally.</p>

*/"/>
    <method name="public final void toNext()" doc="/**
<p>Populates the widgets with data from the next row of the model if the orientation is horizontal (the default), otherwise with data from the next column.</p>
<p>Calls setCurrentIndex() internally. Does nothing if there is no next row in the model.</p>

*/"/>
    <method name="public final void toPrevious()" doc="/**
<p>Populates the widgets with data from the previous row of the model if the orientation is horizontal (the default), otherwise with data from the previous column.</p>
<p>Calls setCurrentIndex() internally. Does nothing if there is no previous row in the model.</p>

*/"/>
    <method name="public void setCurrentIndex(int index__0)"/>
    <enum name="SubmitPolicy" doc="/**
<p>This enum describes the possible submit policies a QDataWidgetMapper supports.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Whenever a widget loses focus, the widget's current value is set to the item model.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The model is not updated until submit() is called.</td></tr>
</table></p>

*/"/>
</class>
