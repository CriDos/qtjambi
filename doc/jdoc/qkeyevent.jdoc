<class name="QKeyEvent" doc="/**
<p>The QKeyEvent class contains describes a key event.</p>
<p>Key events are sent to the widget with keyboard input focus when keys are pressed or released.</p>
<p>A key event contains a special accept flag that indicates whether the receiver will handle the key event. You should call ignore() if the key press or release event is not handled by your widget. A key event is propagated up the parent widget chain until a widget accepts it with accept() or an event filter consumes it. Key events for multimedia keys are ignored by default. You should call accept() if your widget handles those events.</p>
<p>The QWidget::setEnable() function can be used to enable or disable mouse and keyboard events for a widget.</p>
<p>The event handlers QWidget::keyPressEvent() and QWidget::keyReleaseEvent() receive key events.</p>

*/">
    <method name="public QKeyEvent(com.trolltech.qt.core.QEvent.Type type__0, int key__1, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__2, java.lang.String text__3, boolean autorep__4, char count__5)" doc="/**
<p>Constructs a key event object.</p>
<p>The <i>type</i> parameter must be QEvent::KeyPress, QEvent::KeyRelease, or QEvent::ShortcutOverride.</p>
<p>If <i>key</i> is 0, the event is not a result of a known key; for example, it may be the result of a compose sequence or keyboard macro. The <i>modifiers</i> holds the keyboard modifiers, and the given <i>text</i> is the Unicode text that the key generated. If <i>autorep</i> is true, isAutoRepeat() will be true. <i>count</i> is the number of keys involved in the event.</p>

*/"/>
    <method name="public final int count()" doc="/**
<p>Returns the number of keys involved in this event. If text() is not empty, this is simply the length of the string.</p>

*/"/>
    <method name="public final boolean hasExtendedInfo()"/>
    <method name="public final boolean isAutoRepeat()" doc="/**
<p>Returns true if this event comes from an auto-repeating key; returns false if it comes from an initial key press.</p>
<p>Note that if the event is a multiple-key compressed event that is partly due to auto-repeat, this function could return either true or false indeterminately.</p>

*/"/>
    <method name="public final int key()" doc="/**
<p>Returns the code of the key that was pressed or released.</p>
<p>See Qt::Key for the list of keyboard codes. These codes are independent of the underlying window system. Note that this function does not distinguish between capital and non-capital letters, use the text() function (returning the Unicode text the key generated) for this purpose.</p>
<p>A value of either 0 or Qt::Key_unknown means that the event is not the result of a known key; for example, it may be the result of a compose sequence, a keyboard macro, or due to key event compression.</p>

*/"/>
    <method name="public final boolean matches(com.trolltech.qt.gui.QKeySequence.StandardKey key__0)" doc="/**
<p>Returns true if the key event matches the given standard <i>key</i>; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.KeyboardModifiers modifiers()" doc="/**
<p>Returns the keyboard modifier flags that existed immediately after the event occurred.</p>
<p><b>Warning:</b> This function cannot always be trusted. The user can confuse it by pressing both <b>Shift</b> keys simultaneously and releasing one of them, for example.</p>

*/"/>
    <method name="public final int nativeModifiers()" doc="/**
<p>Returns the native modifiers of a key event. If the key event does not contain this data 0 is returned.</p>
<p>Note: The native modifiers may be 0, even if the key event contains extended information.</p>

*/"/>
    <method name="public final int nativeScanCode()" doc="/**
<p>Returns the native scan code of the key event. If the key event does not contain this data 0 is returned.</p>
<p>Note: The native scan code may be 0, even if the key event contains extended information.</p>

*/"/>
    <method name="public final int nativeVirtualKey()" doc="/**
<p>Returns the native virtual key, or key sym of the key event. If the key event does not contain this data 0 is returned.</p>
<p>Note: The native virtual key may be 0, even if the key event contains extended information.</p>

*/"/>
    <method name="public final java.lang.String text()" doc="/**
<p>Returns the Unicode text that this key generated. The text returned can be an empty string in cases where modifier keys, such as Shift, Control, Alt, and Meta, are being pressed or released. In such cases key() will contain a valid value.</p>

*/"/>
    <method name="public final static com.trolltech.qt.gui.QKeyEvent createExtendedKeyEvent(com.trolltech.qt.core.QEvent.Type type__0, int key__1, com.trolltech.qt.core.Qt.KeyboardModifiers modifiers__2, int nativeScanCode__3, int nativeVirtualKey__4, int nativeModifiers__5, java.lang.String text__6, boolean autorep__7, char count__8)"/>
    <method name="protected final int k()"/>
    <method name="protected final void setK(int k)"/>
    <method name="protected final java.lang.String txt()"/>
    <method name="protected final void setTxt(java.lang.String txt)"/>
    <method name="protected final char c()"/>
    <method name="protected final void setC(char c)"/>
</class>
