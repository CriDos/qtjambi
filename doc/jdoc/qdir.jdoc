<class name="QDir" doc="/**
<p>The QDir class provides access to directory structures and their contents.</p>
<p>A QDir is used to manipulate path names, access information regarding paths and files, and manipulate the underlying file system. It can also be used to access Qt's resource system.</p>
<p>Qt uses &quot;/&quot; as a universal directory separator in the same way that &quot;/&quot; is used as a path separator in URLs. If you always use &quot;/&quot; as a directory separator, Qt will translate your paths to conform to the underlying operating system.</p>
<p>A QDir can point to a file using either a relative or an absolute path. Absolute paths begin with the directory separator (optionally preceded by a drive specification under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory.</p>
<p>Examples of absolute paths:</p>
<pre>    QDir(&quot;/home/user/Documents&quot;)
    QDir(&quot;C:/Documents and Settings&quot;)</pre>
<p>On Windows, the second of the examples above will be translated to <tt>C:\My Documents</tt> when used to access files.</p>
<p>Examples of relative paths:</p>
<pre>    QDir(&quot;images/landscape.png&quot;)</pre>
<p>You can use the isRelative() or isAbsolute() functions to check if a QDir is using a relative or an absolute file path. Call makeAbsolute() to convert a relative QDir to an absolute one.</p>
<a name=&quote;navigation-and-directory-operations&quote;></a>
<h3>Navigation and Directory Operations</h3>
<p>A directory's path can be obtained with the path() function, and a new path set with the setPath() function. The absolute path to a directory is found by calling absolutePath().</p>
<p>The name of a directory is found using the dirName() function. This typically returns the last element in the absolute path that specifies the location of the directory. However, it can also return &quot;.&quot; if the QDir represents the current directory.</p>
<pre>    QDir(&quot;Documents/Letters/Applications&quot;).dirName() <span class=&quote;comment&quote;>// &quot;Applications&quot;</span>
    QDir().dirName()                                 <span class=&quote;comment&quote;>// &quot;.&quot;</span></pre>
<p>The path for a directory can also be changed with the cd() and cdUp() functions, both of which operate like familiar shell commands. When cd() is called with the name of an existing directory, the QDir object changes directory so that it represents that directory instead. The cdUp() function changes the directory of the QDir object so that it refers to its parent directory; i.e. cd(&quot;..&quot;) is equivalent to cdUp().</p>
<p>Directories can be created with mkdir(), renamed with rename(), and removed with rmdir().</p>
<p>You can test for the presence of a directory with a given name by using exists(), and the properties of a directory can be tested with isReadable(), isAbsolute(), isRelative(), and isRoot().</p>
<p>The refresh() function re-reads the directory's data from disk.</p>
<a name=&quote;files-and-directory-contents&quote;></a>
<h3>Files and Directory Contents</h3>
<p>Directories contain a number of entries, representing files, directories, and symbolic links. The number of entries in a directory is returned by count(). A string list of the names of all the entries in a directory can be obtained with entryList(). If you need information about each entry, use entryInfoList() to obtain a list of QFileInfo objects.</p>
<p>Paths to files and directories within a directory can be constructed using filePath() and absoluteFilePath(). The filePath() function returns a path to the specified file or directory relative to the path of the QDir object; absoluteFilePath() returns an absolute path to the specified file or directory. Neither of these functions checks for the existence of files or directory; they only construct paths.</p>
<pre>    QDir directory(&quot;Documents/Letters&quot;);
    QString path = directory.filePath(&quot;contents.txt&quot;);
    QString absolutePath = directory.absoluteFilePath(&quot;contents.txt&quot;);</pre>
<p>Files can be removed by using the remove() function. Directories cannot be removed in the same way as files; use rmdir() to remove them instead.</p>
<p>It is possible to reduce the number of entries returned by entryList() and entryInfoList() by applying filters to a QDir object. You can apply a name filter to specify a pattern with wildcards that file names need to match, an attribute filter that selects properties of entries and can distinguish between files and directories, and a sort order.</p>
<p>Name filters are lists of strings that are passed to setNameFilters(). Attribute filters consist of a bitwise OR combination of Filters, and these are specified when calling setFilter(). The sort order is specified using setSorting() with a bitwise OR combination of SortFlags.</p>
<p>You can test to see if a filename matches a filter using the match() function.</p>
<p>Filter and sort order flags may also be specified when calling entryList() and entryInfoList() in order to override previously defined behavior.</p>
<a name=&quote;the-current-directory-and-other-special-paths&quote;></a>
<h3>The Current Directory and Other Special Paths</h3>
<p>Access to some common directories is provided with a number of static functions that return QDir objects. There are also corresponding functions for these that return strings:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>QDir</th><th>QString</th><th>Return Value</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>current()</td><td>currentPath()</td><td>The application's working directory</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>home()</td><td>homePath()</td><td>The user's home directory</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>root()</td><td>rootPath()</td><td>The root directory</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>temp()</td><td>tempPath()</td><td>The system's temporary directory</td></tr>
</table></p>
<p>The setCurrent() static function can also be used to set the application's working directory.</p>
<p>If you want to find the directory containing the application's executable, see QCoreApplication::applicationDirPath().</p>
<p>The drives() static function provides a list of root directories for each device that contains a filing system. On Unix systems this returns a list containing a single root directory &quot;/&quot;; on Windows the list will usually contain <tt>C:/</tt>, and possibly other drive letters such as <tt>D:/</tt>, depending on the configuration of the user's system.</p>
<a name=&quote;path-manipulation-and-strings&quote;></a>
<h3>Path Manipulation and Strings</h3>
<p>Paths containing &quot;.&quot; elements that reference the current directory at that point in the path, &quot;..&quot; elements that reference the parent directory, and symbolic links can be reduced to a canonical form using the canonicalPath() function.</p>
<p>Paths can also be simplified by using cleanPath() to remove redundant &quot;/&quot; and &quot;..&quot; elements.</p>
<p>It is sometimes necessary to be able to show a path in the native representation for the user's platform. The static toNativeSeparators() function returns a copy of the specified path in which each directory separator is replaced by the appropriate separator for the underlying operating system.</p>
<a name=&quote;examples&quote;></a>
<h3>Examples</h3>
<p>Check if a directory exists:</p>
<pre>        QDir dir(&quot;example&quot;);
        if (!dir.exists())
            qWarning(&quot;Cannot find the example directory&quot;);</pre>
<p>(We could also use the static convenience function QFile::exists().)</p>
<p>Traversing directories and reading a file:</p>
<pre>        QDir dir = QDir::root();                 <span class=&quote;comment&quote;>// &quot;/&quot;</span>
        if (!dir.cd(&quot;tmp&quot;)) {                    <span class=&quote;comment&quote;>// &quot;/tmp&quot;</span>
            qWarning(&quot;Cannot find the \&quot;/tmp\&quot; directory&quot;);
        } else {
            QFile file(dir.filePath(&quot;ex1.txt&quot;)); <span class=&quote;comment&quote;>// &quot;/tmp/ex1.txt&quot;</span>
            if (!file.open(QIODevice::ReadWrite))
                qWarning(&quot;Cannot create the file %s&quot;, file.name());
        }</pre>
<p>A program that lists all the files in the current directory (excluding symbolic links), sorted by size, smallest first:</p>
<pre>    #include &lt;QDir&gt;
    #include &lt;iostream&gt;

    int main(int argc, char *argv[])
    {
        QDir dir;
        dir.setFilter(QDir::Files | QDir::Hidden | QDir::NoSymLinks);
        dir.setSorting(QDir::Size | QDir::Reversed);

        QFileInfoList list = dir.entryInfoList();
        std::cout &lt;&lt; &quot;     Bytes Filename&quot; &lt;&lt; std::endl;
        for (int i = 0; i &lt; list.size(); ++i) {
            QFileInfo fileInfo = list.at(i);
            std::cout &lt;&lt; qPrintable(QString(&quot;%1 %2&quot;).arg(fileInfo.size(), 10)
                                                    .arg(fileInfo.fileName()));
            std::cout &lt;&lt; std::endl;
        }
        return 0;
    }</pre>

*/">
    <method name="public QDir(java.lang.String path__0, java.lang.String nameFilter__1, com.trolltech.qt.core.QDir.SortFlags sort__2, com.trolltech.qt.core.QDir.Filters filter__3)" doc="/**
<p>Constructs a QDir with path <i>path</i>, that filters its entries by name using <i>nameFilter</i> and by attributes using <i>filters</i>. It also sorts the names using <i>sort</i>.</p>
<p>The default <i>nameFilter</i> is an empty string, which excludes nothing; the default <i>filters</i> is AllEntries, which also means exclude nothing. The default <i>sort</i> is Name | IgnoreCase, i.e. sort by name case-insensitively.</p>
<p>If <i>path</i> is an empty string, QDir uses &quot;.&quot; (the current directory). If <i>nameFilter</i> is an empty string, QDir uses the name filter &quot;*&quot; (all files).</p>
<p>Note that <i>path</i> need not exist.</p>

*/"/>
    <method name="public QDir(com.trolltech.qt.core.QDir arg__0)" doc="/**
<p>Constructs a QDir object that is a copy of the QDir object for directory <i>dir</i>.</p>

*/"/>
    <method name="public QDir(java.lang.String path__0)" doc="/**
<p>Constructs a QDir pointing to the given directory <i>path</i>. If path is empty the program's working directory, (&quot;.&quot;), is used.</p>

*/"/>
    <method name="public final java.lang.String absoluteFilePath(java.lang.String fileName__0)" doc="/**
<p>Returns the absolute path name of a file in the directory. Does <i>not</i> check if the file actually exists in the directory; but see exists(). Redundant multiple separators or &quot;.&quot; and &quot;..&quot; directories in <i>fileName</i> are not removed (see cleanPath()).</p>

*/"/>
    <method name="public final java.lang.String absolutePath()" doc="/**
<p>Returns the absolute path (a path that starts with &quot;/&quot; or with a drive specification), which may contain symbolic links, but never contains redundant &quot;.&quot;, &quot;..&quot; or multiple separators.</p>

*/"/>
    <method name="public final java.lang.String canonicalPath()" doc="/**
<p>Returns the canonical path, i.e. a path without symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements.</p>
<p>On systems that do not have symbolic links this function will always return the same string that absolutePath() returns. If the canonical path does not exist (normally due to dangling symbolic links) canonicalPath() returns an empty string.</p>
<p>Example:</p>
<pre>    QString bin = &quot;/local/bin&quot;;         <span class=&quote;comment&quote;>// where /local/bin is a symlink to /usr/bin</span>
    QDir binDir(bin);
    QString canonicalBin = binDir.canonicalPath();
<span class=&quote;comment&quote;>    // canonicalBin now equals &quot;/usr/bin&quot;</span>

    QString ls = &quot;/local/bin/ls&quot;;       <span class=&quote;comment&quote;>// where ls is the executable &quot;ls&quot;</span>
    QDir lsDir(ls);
    QString canonicalLs = lsDir.canonicalPath();
<span class=&quote;comment&quote;>    // canonicalLS now equals &quot;/usr/bin/ls&quot;.</span></pre>

*/"/>
    <method name="public final boolean cd(java.lang.String dirName__0)" doc="/**
<p>Changes the QDir's directory to <i>dirName</i>.</p>
<p>Returns true if the new directory exists and is readable; otherwise returns false. Note that the logical cd() operation is not performed if the new directory does not exist.</p>
<p>Calling cd(&quot;..&quot;) is equivalent to calling cdUp().</p>

*/"/>
    <method name="public final boolean cdUp()" doc="/**
<p>Changes directory by moving one directory up from the QDir's current directory.</p>
<p>Returns true if the new directory exists and is readable; otherwise returns false. Note that the logical cdUp() operation is not performed if the new directory does not exist.</p>

*/"/>
    <method name="public final int count()" doc="/**
<p>Returns the total number of directories and files in the directory.</p>
<p>Equivalent to entryList().count().</p>

*/"/>
    <method name="public final java.lang.String dirName()" doc="/**
<p>Returns the name of the directory; this is <i>not</i> the same as the path, e.g. a directory with the name &quot;mail&quot;, might have the path &quot;/var/spool/mail&quot;. If the directory has no name (e.g. it is the root directory) an empty string is returned.</p>
<p>No check is made to ensure that a directory with this name actually exists; but see exists().</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.core.QFileInfo&gt; entryInfoList(java.util.List&lt;java.lang.String&gt; nameFilters__0, com.trolltech.qt.core.QDir.Filters filters__1, com.trolltech.qt.core.QDir.SortFlags sort__2)" doc="/**
<p>Returns a list of QFileInfo objects for all the files and directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting().</p>
<p>The name filter, file attribute filter, and sorting specification can be overridden using the <i>nameFilters</i>, <i>filters</i>, and <i>sort</i> arguments.</p>
<p>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.core.QFileInfo&gt; entryInfoList(com.trolltech.qt.core.QDir.Filters filters__0, com.trolltech.qt.core.QDir.SortFlags sort__1)" doc="/**
<p>Returns a list of QFileInfo objects for all the files and directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting().</p>
<p>The attribute filter and sorting specifications can be overridden using the <i>filters</i> and <i>sort</i> arguments.</p>
<p>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; entryList(com.trolltech.qt.core.QDir.Filters filters__0, com.trolltech.qt.core.QDir.SortFlags sort__1)" doc="/**
<p>Returns a list of the names of all the files and directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting().</p>
<p>The attribute filter and sorting specifications can be overridden using the <i>filters</i> and <i>sort</i> arguments.</p>
<p>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; entryList(java.util.List&lt;java.lang.String&gt; nameFilters__0, com.trolltech.qt.core.QDir.Filters filters__1, com.trolltech.qt.core.QDir.SortFlags sort__2)" doc="/**
<p>Returns a list of the names of all the files and directories in the directory, ordered according to the name and attribute filters previously set with setNameFilters() and setFilter(), and sorted according to the flags set with setSorting().</p>
<p>The name filter, file attribute filter, and sorting specification can be overridden using the <i>nameFilters</i>, <i>filters</i>, and <i>sort</i> arguments.</p>
<p>Returns an empty list if the directory is unreadable, does not exist, or if nothing matches the specification.</p>

*/"/>
    <method name="public final boolean exists(java.lang.String name__0)" doc="/**
<p>Returns true if the file called <i>name</i> exists; otherwise returns false.</p>

*/"/>
    <method name="public final boolean exists()" doc="/**
<p>Returns true if the <i>directory</i> exists; otherwise returns false. (If a file with the same name is found this function will return false).</p>

*/"/>
    <method name="public final java.lang.String filePath(java.lang.String fileName__0)" doc="/**
<p>Returns the path name of a file in the directory. Does <i>not</i> check if the file actually exists in the directory; but see exists(). If the QDir is relative the returned path name will also be relative. Redundant multiple separators or &quot;.&quot; and &quot;..&quot; directories in <i>fileName</i> are not removed (see cleanPath()).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDir.Filters filter()" doc="/**
<p>Returns the value set by setFilter()</p>

*/"/>
    <method name="public final boolean isAbsolute()" doc="/**
<p>Returns true if the directory's path is absolute; otherwise returns false. See isAbsolutePath().</p>

*/"/>
    <method name="public final boolean isReadable()" doc="/**
<p>Returns true if the directory is readable <i>and</i> we can open files by name; otherwise returns false.</p>
<p><b>Warning:</b> A false value from this function is not a guarantee that files in the directory are not accessible.</p>

*/"/>
    <method name="public final boolean isRelative()" doc="/**
<p>Returns true if the directory path is relative; otherwise returns false. (Under Unix a path is relative if it does not start with a &quot;/&quot;).</p>

*/"/>
    <method name="public final boolean isRoot()" doc="/**
<p>Returns true if the directory is the root directory; otherwise returns false.</p>
<p>Note: If the directory is a symbolic link to the root directory this function returns false. If you want to test for this use canonicalPath(), e.g.</p>
<pre>    QDir dir(&quot;/tmp/root_link&quot;);
    dir = dir.canonicalPath();
    if (dir.isRoot())
        qWarning(&quot;It is a root link&quot;);</pre>

*/"/>
    <method name="public final boolean makeAbsolute()" doc="/**
<p>Converts the directory path to an absolute path. If it is already absolute nothing happens. Returns true if the conversion succeeded; otherwise returns false.</p>

*/"/>
    <method name="public final boolean mkdir(java.lang.String dirName__0)" doc="/**
<p>Creates a sub-directory called <i>dirName</i>.</p>
<p>Returns true on success; otherwise returns false.</p>

*/"/>
    <method name="public final boolean mkpath(java.lang.String dirPath__0)" doc="/**
<p>Creates the directory path <i>dirPath</i>.</p>
<p>The function will create all parent directories necessary to create the directory.</p>
<p>Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; nameFilters()" doc="/**
<p>Returns the string list set by setNameFilters()</p>

*/"/>
    <method name="public final java.lang.String path()" doc="/**
<p>Returns the path. This may contain symbolic links, but never contains redundant &quot;.&quot;, &quot;..&quot; or multiple separators.</p>
<p>The returned path can be either absolute or relative (see setPath()).</p>

*/"/>
    <method name="public final void refresh()" doc="/**
<p>Refreshes the directory information.</p>

*/"/>
    <method name="public final java.lang.String relativeFilePath(java.lang.String fileName__0)" doc="/**
<p>Returns the path to <i>fileName</i> relative to the directory.</p>
<pre>    QDir dir(&quot;/home/bob&quot;);
    QString s;

    s = dir.relativePath(&quot;images/file.jpg&quot;);     <span class=&quote;comment&quote;>// s is &quot;images/file.jpg&quot;</span>
    s = dir.relativePath(&quot;/home/mary/file.txt&quot;); <span class=&quote;comment&quote;>// s is &quot;../mary/file.txt&quot;</span></pre>

*/"/>
    <method name="public final boolean remove(java.lang.String fileName__0)" doc="/**
<p>Removes the file, <i>fileName</i>.</p>
<p>Returns true if the file is removed successfully; otherwise returns false.</p>

*/"/>
    <method name="public final boolean rename(java.lang.String oldName__0, java.lang.String newName__1)" doc="/**
<p>Renames a file or directory from <i>oldName</i> to <i>newName</i>, and returns true if successful; otherwise returns false.</p>
<p>On most file systems, rename() fails only if <i>oldName</i> does not exist, if <i>newName</i> and <i>oldName</i> are not on the same partition or if a file with the new name already exists. However, there are also other reasons why rename() can fail. For example, on at least one file system rename() fails if <i>newName</i> points to an open file.</p>

*/"/>
    <method name="public final boolean rmdir(java.lang.String dirName__0)" doc="/**
<p>Removes the directory specified by <i>dirName</i>.</p>
<p>The directory must be empty for rmdir() to succeed.</p>
<p>Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public final boolean rmpath(java.lang.String dirPath__0)" doc="/**
<p>Removes the directory path <i>dirPath</i>.</p>
<p>The function will remove all parent directories in <i>dirPath</i>, provided that they are empty. This is the opposite of mkpath(dirPath).</p>
<p>Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public final void setFilter(com.trolltech.qt.core.QDir.Filters filter__0)" doc="/**
<p>Sets the filter used by entryList() and entryInfoList() to <i>filters</i>. The filter is used to specify the kind of files that should be returned by entryList() and entryInfoList(). See QDir::Filter.</p>

*/"/>
    <method name="public final void setNameFilters(java.util.List&lt;java.lang.String&gt; nameFilters__0)" doc="/**
<p>Sets the name filters used by entryList() and entryInfoList() to the list of filters specified by <i>nameFilters</i>.</p>
<p>Each name filter is a wildcard (globbing) filter that understands <tt>*</tt> and <tt>?</tt> wildcards. (See <a href=&quote;qregexp.jdoc#qregexp-wildcard-matching&quote;>QRegExp wildcard matching</a>.)</p>
<p>For example, the following code sets three name filters on a QDir to ensure that only files with extensions typically used for C++ source files are listed:</p>
<pre>        QStringList filters;
        filters &lt;&lt; &quot;*.cpp&quot; &lt;&lt; &quot;*.cxx&quot; &lt;&lt; &quot;*.cc&quot;;
        dir.setNameFilters(filters);</pre>

*/"/>
    <method name="public final void setPath(java.lang.String path__0)" doc="/**
<p>Sets the path of the directory to <i>path</i>. The path is cleaned of redundant &quot;.&quot;, &quot;..&quot; and of multiple separators. No check is made to see whether a directory with this path actually exists; but you can check for yourself using exists().</p>
<p>The path can be either absolute or relative. Absolute paths begin with the directory separator &quot;/&quot; (optionally preceded by a drive specification under Windows). Relative file names begin with a directory name or a file name and specify a path relative to the current directory. An example of an absolute path is the string &quot;/tmp/quartz&quot;, a relative path might look like &quot;src/fatlib&quot;.</p>

*/"/>
    <method name="public final void setSorting(com.trolltech.qt.core.QDir.SortFlags sort__0)" doc="/**
<p>Sets the sort order used by entryList() and entryInfoList().</p>
<p>The <i>sort</i> is specified by OR-ing values from the enum QDir::SortFlag.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDir.SortFlags sorting()" doc="/**
<p>Returns the value set by setSorting()</p>

*/"/>
    <method name="public native static void addResourceSearchPath(java.lang.String path__0)" doc="/**
<p>Adds <i>path</i> to the search paths searched in to find resources that are not specified with an absolute path. The default search path is to search only in the root (<tt>:/</tt>).</p>

*/"/>
    <method name="public native static java.lang.String cleanPath(java.lang.String path__0)" doc="/**
<p>Removes all multiple directory separators &quot;/&quot; and resolves any &quot;.&quot;s or &quot;..&quot;s found in the path, <i>path</i>.</p>
<p>Symbolic links are kept. This function does not return the canonical path, but rather the simplest version of the input. For example, &quot;./local&quot; becomes &quot;local&quot;, &quot;local/../bin&quot; becomes &quot;bin&quot; and &quot;/local/usr/../bin&quot; becomes &quot;/local/bin&quot;.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDir current()" doc="/**
<p>Returns the application's current directory.</p>
<p>The directory is constructed using the absolute path of the current directory, ensuring that its path() will be the same as its absolutePath().</p>

*/"/>
    <method name="public native static java.lang.String currentPath()" doc="/**
<p>Returns the absolute path of the application's current directory.</p>

*/"/>
    <method name="public native static java.util.List&lt;com.trolltech.qt.core.QFileInfo&gt; drives()" doc="/**
<p>Returns a list of the root directories on this system.</p>
<p>On Windows this returns a list of QFileInfo objects containing &quot;C:/&quot;, &quot;D:/&quot;, etc. On other operating systems, it returns a list containing just one root directory (i.e. &quot;/&quot;).</p>

*/"/>
    <method name="public native static java.lang.String fromNativeSeparators(java.lang.String pathName__0)" doc="/**
<p>Returns <i>pathName</i> with the native '\' separators converted to '/' separators.</p>
<p>On Windows, toNativeSeparators(&quot;c:\winnt\system32&quot;) returns &quot;c:/winnt/system32&quot;.</p>
<p>The returned string may be the same as the argument on some operating systems, for example on Unix.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDir home()" doc="/**
<p>Returns the user's home directory.</p>
<p>The directory is constructed using the absolute path of the home directory, ensuring that its path() will be the same as its absolutePath().</p>
<p>See homePath() for details.</p>

*/"/>
    <method name="public native static java.lang.String homePath()" doc="/**
<p>Returns the absolute path of the user's home directory.</p>
<p>Under Windows this function will return the directory of the current user's profile. Typically, this is:</p>
<pre>    C:\Documents and Settings\Username</pre>
<p>If the directory of the current user's profile does not exist or cannot be retrieved, the following alternatives will be checked (in the given order) until an existing and available path is found:</p>
<ol type=&quote;1&quote;>
<li>The path specified by the <tt>USERPROFILE</tt> environment variable.</li>
<li>The path formed by concatenating the <tt>HOMEDRIVE</tt> and <tt>HOMEPATH</tt> environment variables.</li>
<li>The path specified by the <tt>HOME</tt> environment variable.</li>
<li>The path returned by the rootPath() function (which uses the <tt>SystemDrive</tt> environment variable)</li>
<li>The <tt>C:\</tt> directory.</li>
</ol>
<p>Under non-Windows operating systems the <tt>HOME</tt> environment variable is used if it exists, otherwise the path returned by the rootPath() function is used.</p>

*/"/>
    <method name="public native static boolean isAbsolutePath(java.lang.String path__0)" doc="/**
<p>Returns true if <i>path</i> is absolute; returns false if it is relative.</p>

*/"/>
    <method name="public native static boolean isRelativePath(java.lang.String path__0)" doc="/**
<p>Returns true if <i>path</i> is relative; returns false if it is absolute.</p>

*/"/>
    <method name="public native static boolean match(java.lang.String filter__0, java.lang.String fileName__1)" doc="/**
<p>Returns true if the <i>fileName</i> matches the wildcard (glob) pattern <i>filter</i>; otherwise returns false. The <i>filter</i> may contain multiple patterns separated by spaces or semicolons. The matching is case insensitive.</p>

*/"/>
    <method name="public native static java.util.List&lt;java.lang.String&gt; nameFiltersFromString(java.lang.String nameFilter__0)" doc="/**
<p>Returns a list of name filters from the given <i>nameFilter</i>. (If there is more than one filter, each pair of filters is separated by a space or by a semicolon.)</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDir root()" doc="/**
<p>Returns the root directory.</p>
<p>The directory is constructed using the absolute path of the root directory, ensuring that its path() will be the same as its absolutePath().</p>
<p>See rootPath() for details.</p>

*/"/>
    <method name="public native static java.lang.String rootPath()" doc="/**
<p>Returns the absolute path of the root directory.</p>
<p>For Unix operating systems this returns &quot;/&quot;. For Windows file systems this normally returns &quot;c:/&quot;.</p>

*/"/>
    <method name="public native static char separator()" doc="/**
<p>Returns the native directory separator: &quot;/&quot; under Unix (including Mac OS X) and &quot;\&quot; under Windows.</p>
<p>You do not need to use this function to build file paths. If you always use &quot;/&quot;, Qt will translate your paths to conform to the underlying operating system. If you want to display paths to the user using their operating system's separator use toNativeSeparators().</p>

*/"/>
    <method name="public native static boolean setCurrent(java.lang.String path__0)" doc="/**
<p>Sets the application's current working directory to <i>path</i>. Returns true if the directory was successfully changed; otherwise returns false.</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QDir temp()" doc="/**
<p>Returns the system's temporary directory.</p>
<p>The directory is constructed using the absolute path of the temporary directory, ensuring that its path() will be the same as its absolutePath().</p>
<p>See tempPath() for details.</p>

*/"/>
    <method name="public native static java.lang.String tempPath()" doc="/**
<p>Returns the absolute path of the system's temporary directory.</p>
<p>On Unix/Linux systems this is usually <tt>/tmp</tt>; on Windows this is usually the path in the <tt>TEMP</tt> or <tt>TMP</tt> environment variable. Whether a directory separator is added to the end or not, depends on the operating system.</p>

*/"/>
    <method name="public native static java.lang.String toNativeSeparators(java.lang.String pathName__0)" doc="/**
<p>Returns <i>pathName</i> with the '/' separators converted to separators that are appropriate for the underlying operating system.</p>
<p>On Windows, toNativeSeparators(&quot;c:/winnt/system32&quot;) returns &quot;c:\winnt\system32&quot;.</p>
<p>The returned string may be the same as the argument on some operating systems, for example on Unix.</p>

*/"/>
    <enum name="Filter" doc="/**
<p>This enum describes the filtering options available to QDir; e.g. for entryList() and entryInfoList(). The filter value is specified by combining values from the following list using the bitwise OR operator:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List directories that match the filters.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List all directories; i.e. don't apply the filters to directory names.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List files only.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List disk drives (ignored under Unix).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Do not list symbolic links (ignored by operating systems that don't support symbolic links).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Do not list the special entries &quot;.&quot; and &quot;..&quot;.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List directories, files, drives and symlinks (this does not list broken symlinks unless you specify System).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List files for which the application has read access. The Readable value needs to be combined with Dirs or Files.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List files for which the application has write access. The Writable value needs to be combined with Dirs or Files.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List files for which the application has execute access. The Executable value needs to be combined with Dirs or Files.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Only list files that have been modified (ignored under Unix).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List hidden files (on Unix, files starting with a .).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>List system files (on Unix, FIFOs, sockets and device files)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The filter should be case sensitive if the file system is case sensitive.</td></tr>
</table></p>
<p>Functions that use Filter enum values to filter lists of files and directories will include symbolic links to files and directories unless you set the NoSymLinks value.</p>
<p>A default constructed QDir will not filter out files based on their permissions, so entryList() and entryInfoList() will return all files that are readable, writable, executable, or any combination of the three. This makes the default easy to write, and at the same time useful.</p>
<p>For example, setting the <tt>Readable</tt>, <tt>Writable</tt>, and <tt>Files</tt> flags allows all files to be listed for which the application has read access, write access or both. If the <tt>Dirs</tt> and <tt>Drives</tt> flags are also included in this combination then all drives, directories, all files that the application can read, write, or execute, and symlinks to such files/directories can be listed.</p>
<p>To retrieve the permissons for a directory, use the entryInfoList() function to get the associated QFileInfo objects and then use the QFileInfo::permissons() to obtain the permissions and ownership for each file.</p>

*/"/>
    <enum name="SortFlag" doc="/**
<p>This enum describes the sort options available to QDir, e.g. for entryList() and entryInfoList(). The sort value is specified by OR-ing together values from the following list:</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Sort by name.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Sort by time (modification time).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Sort by file size.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Sort by file type (extension).</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Do not sort.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Put the directories first, then the files.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Put the files first, then the directories.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Reverse the sort order.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Sort case-insensitively.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Sort items appropriately using the current locale settings.</td></tr>
</table></p>
<p>You can only specify one of the first four.</p>
<p>If you specify both DirsFirst and Reversed, directories are still put first, but in reverse order; the files will be listed after the directories, again in reverse order.</p>

*/"/>
</class>
