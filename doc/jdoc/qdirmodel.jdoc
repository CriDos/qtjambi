<class name="QDirModel" doc="/**
<p>The QDirModel class provides a data model for the local filesystem.</p>
<p>This class provides access to the local filesystem, providing functions for renaming and removing files and directories, and for creating new directories. In the simplest case, it can be used with a suitable display widget as part of a browser or filer.</p>
<p>QDirModel does not store file information internally or cache file data.</p>
<p>A directory model that displays the contents of a default directory is usually constructed with a parent object:</p>
<pre>        QDirModel *model = new QDirModel;</pre>
<p>A tree view can be used to display the contents of the model</p>
<pre>        QTreeView *tree = new QTreeView(splitter);
        tree-&gt;setModel(model);</pre>
<p>and the contents of a particular directory can be displayed by setting the tree view's root index:</p>
<pre>        tree-&gt;setRootIndex(model-&gt;index(QDir::currentPath()));</pre>
<p>The view's root index can be used to control how much of a hierarchical model is displayed. QDirModel provides a convenience function that returns a suitable model index for a path to a directory within the model.</p>
<p>QDirModel can be accessed using the standard interface provided by QAbstractItemModel, but it also provides some convenience functions that are specific to a directory model. The fileInfo(), isDir(), name(), and path() functions provide information about the underlying files and directories related to items in the model. Directories can be created and removed using mkdir(), rmdir(), and the model will be automatically updated to take the changes into account.</p>

*/">
    <method name="public QDirModel(java.util.List&lt;java.lang.String&gt; nameFilters__0, com.trolltech.qt.core.QDir.Filters filters__1, com.trolltech.qt.core.QDir.SortFlags sort__2, com.trolltech.qt.core.QObject parent__3)" doc="/**
<p>Constructs a new directory model with the given <i>parent</i>. Only those files matching the <i>nameFilters</i> and the <i>filters</i> are included in the model. The sort order is given by the <i>sort</i> flags.</p>

*/"/>
    <method name="public QDirModel(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs a directory model with the given <i>parent</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QIcon fileIcon(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the icons for the item stored in the model under the given <i>index</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QFileInfo fileInfo(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the file information for the model item <i>index</i>.</p>

*/"/>
    <method name="public final java.lang.String fileName(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the name of the item stored in the model under the <i>index</i> given.</p>

*/"/>
    <method name="public final java.lang.String filePath(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the path of the item stored in the model under the <i>index</i> given.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDir.Filters filter()" doc="/**
<p>Returns the filter specification for the directory model.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QFileIconProvider iconProvider()" doc="/**
<p>Returns the file icon provider for this directory model.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QModelIndex index(java.lang.String path__0, int column__1)" doc="/**
<p>Returns the model item index for the given <i>path</i>.</p>

*/"/>
    <method name="public final boolean isDir(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns true if the model item <i>index</i> represents a directory; otherwise returns false.</p>

*/"/>
    <method name="public final boolean isReadOnly()"/>
    <method name="public final boolean lazyChildCount()"/>
    <method name="public final com.trolltech.qt.core.QModelIndex mkdir(com.trolltech.qt.core.QModelIndex parent__0, java.lang.String name__1)" doc="/**
<p>Create a directory with the <i>name</i> in the <i>parent</i> model item.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; nameFilters()" doc="/**
<p>Returns a list of filters applied to the names in the model.</p>

*/"/>
    <method name="public final void refresh(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Refreshes (rereads) the children of <i>parent</i>.</p>

*/"/>
    <method name="public final boolean remove(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Removes the model item <i>index</i> from the directory model, returning true if successful. If the item cannot be removed, false is returned.</p>

*/"/>
    <method name="public final boolean resolveSymlinks()"/>
    <method name="public final boolean rmdir(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Removes the directory corresponding to the model item <i>index</i> in the directory model, returning true if successful. If the directory cannot be removed, false is returned.</p>

*/"/>
    <method name="public final void setFilter(com.trolltech.qt.core.QDir.Filters filters__0)" doc="/**
<p>Sets the directory model's filter to that specified by <i>filters</i>.</p>
<p>Note that the filter you set should always include the QDir::AllDirs enum value, otherwise QDirModel won't be able to read the directory structure.</p>

*/"/>
    <method name="public final void setIconProvider(com.trolltech.qt.gui.QFileIconProvider provider__0)" doc="/**
<p>Sets the <i>provider</i> of file icons for the directory model.</p>

*/"/>
    <method name="public final void setLazyChildCount(boolean enable__0)"/>
    <method name="public final void setNameFilters(java.util.List&lt;java.lang.String&gt; filters__0)" doc="/**
<p>Sets the name <i>filters</i> for the directory model.</p>

*/"/>
    <method name="public final void setReadOnly(boolean enable__0)"/>
    <method name="public final void setResolveSymlinks(boolean enable__0)"/>
    <method name="public final void setSorting(com.trolltech.qt.core.QDir.SortFlags sort__0)" doc="/**
<p>Sets the directory model's sorting order to that specified by <i>sort</i>.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDir.SortFlags sorting()" doc="/**
<p>Returns the sorting method used for the directory model.</p>

*/"/>
    <method name="public int columnCount(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Returns the number of columns in the <i>parent</i> model item.</p>

*/"/>
    <method name="public java.lang.Object data(com.trolltech.qt.core.QModelIndex index__0, int role__1)" doc="/**
<p>Returns the data for the model item <i>index</i> with the given <i>role</i>.</p>

*/"/>
    <method name="public boolean dropMimeData(com.trolltech.qt.gui.QMimeData data__0, com.trolltech.qt.core.Qt.DropAction action__1, int row__2, int column__3, com.trolltech.qt.core.QModelIndex parent__4)" doc="/**
<p>Handles the <i>data</i> supplied by a drag and drop operation that ended with the given <i>action</i> over the row in the model specified by the <i>row</i> and <i>column</i> and by the <i>parent</i> index.</p>

*/"/>
    <method name="public com.trolltech.qt.core.Qt.ItemFlags flags(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns the item flags for the given <i>index</i> in the model.</p>

*/"/>
    <method name="public boolean hasChildren(com.trolltech.qt.core.QModelIndex index__0)" doc="/**
<p>Returns true if the <i>parent</i> model item has children; otherwise returns false.</p>

*/"/>
    <method name="public java.lang.Object headerData(int section__0, com.trolltech.qt.core.Qt.Orientation orientation__1, int role__2)" doc="/**
<p>Returns the data stored under the given <i>role</i> for the specified <i>section</i> of the header with the given <i>orientation</i>.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QModelIndex index(int row__0, int column__1, com.trolltech.qt.core.QModelIndex parent__2)" doc="/**
<p>Returns the model item index for the item in the <i>parent</i> with the given <i>row</i> and <i>column</i>.</p>

*/"/>
    <method name="public com.trolltech.qt.gui.QMimeData mimeData(java.util.List&lt;com.trolltech.qt.core.QModelIndex&gt; indexes__0)" doc="/**
<p>Returns an object that contains a serialized description of the specified <i>indexes</i>. The format used to describe the items corresponding to the indexes is obtained from the mimeTypes() function.</p>
<p>If the list of indexes is empty, 0 is returned rather than a serialized empty list.</p>

*/"/>
    <method name="public java.util.List&lt;java.lang.String&gt; mimeTypes()" doc="/**
<p>Returns a list of MIME types that can be used to describe a list of items in the model.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QModelIndex parent(com.trolltech.qt.core.QModelIndex child__0)" doc="/**
<p>Return the parent of the given <i>child</i> model item.</p>

*/"/>
    <method name="public int rowCount(com.trolltech.qt.core.QModelIndex parent__0)" doc="/**
<p>Returns the number of rows in the <i>parent</i> model item.</p>

*/"/>
    <method name="public boolean setData(com.trolltech.qt.core.QModelIndex index__0, java.lang.Object value__1, int role__2)" doc="/**
<p>Sets the data for the model item <i>index</i> with the given <i>role</i> to the data referenced by the <i>value</i>. Returns true if successful; otherwise returns false.</p>

*/"/>
    <method name="public void sort(int column__0, com.trolltech.qt.core.Qt.SortOrder order__1)" doc="/**
<p>Sort the model items in the <i>column</i> using the <i>order</i> given. The order is a value defined in Qt::SortOrder.</p>

*/"/>
    <method name="public com.trolltech.qt.core.Qt.DropActions supportedDropActions()" doc="/**
<p>Returns the drop actions supported by this model.</p>

*/"/>
    <enum name="Roles" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;40%&quote;>
<tr><th width=&quote;60%&quote;>Constant</th><th width=&quote;40%&quote;>Value</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
</table></p>

*/"/>
</class>
