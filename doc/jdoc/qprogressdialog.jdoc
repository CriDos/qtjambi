<class name="QProgressDialog" doc="/**
<p>The QProgressDialog class provides feedback on the progress of a slow operation.</p>
<p>A progress dialog is used to give the user an indication of how long an operation is going to take, and to demonstrate that the application has not frozen. It can also give the user an opportunity to abort the operation.</p>
<p>A common problem with progress dialogs is that it is difficult to know when to use them; operations take different amounts of time on different hardware. QProgressDialog offers a solution to this problem: it estimates the time the operation will take (based on time for steps), and only shows itself if that estimate is beyond minimumDuration() (4 seconds by default).</p>
<p>Use setMinimum() and setMaximum() or the constructor to set the number of &quot;steps&quot; in the operation and call setValue() as the operation progresses. The number of steps can be chosen arbitrarily. It can be the number of files copied, the number of bytes received, the number of iterations through the main loop of your algorithm, or some other suitable unit. Progress starts at the value set by setMinimum(), and the progress dialog shows that the operation has finished when you call setValue() with the value set by setMaximum() as its argument.</p>
<p>The dialog automatically resets and hides itself at the end of the operation. Use setAutoReset() and setAutoClose() to change this behavior.</p>
<p>There are two ways of using QProgressDialog: modal and modeless.</p>
<p>Using a modal QProgressDialog is simpler for the programmer, but you must call QApplication::processEvents() or QEventLoop::processEvents(ExcludeUserInput) to keep the event loop running to ensure that the application doesn't freeze. Do the operation in a loop, call setValue() at intervals, and check for cancellation with wasCanceled(). For example:</p>
<pre>        QProgressDialog progress(&quot;Copying files...&quot;, &quot;Abort Copy&quot;, 0, numFiles, this);
        progress.setWindowModality(Qt::WindowModal);

        for (int i = 0; i &lt; numFiles; i++) {
            progress.setValue(i);
            qApp-&gt;processEvents();

            if (progress.wasCanceled())
                break;
            <span class=&quote;comment&quote;>//... copy one file</span>
        }
        progress.setValue(numFiles);</pre>
<p>A modeless progress dialog is suitable for operations that take place in the background, where the user is able to interact with the application. Such operations are typically based on QTimer (or QObject::timerEvent()), QSocketNotifier, or QUrlOperator; or performed in a separate thread. A QProgressBar in the status bar of your main window is often an alternative to a modeless progress dialog.</p>
<p>You need to have an event loop to be running, connect the canceled() signal to a slot that stops the operation, and call setValue() at intervals. For example:</p>
<pre><span class=&quote;comment&quote;>    // Operation constructor</span>
    Operation::Operation(QObject *parent)
        : QObject(parent), steps(0)
    {
        pd = new QProgressDialog(&quot;Operation in progress.&quot;, &quot;Cancel&quot;, 0, 100);
        connect(pd, SIGNAL(canceled()), this, SLOT(cancel()));
        t = new QTimer(this);
        connect(t, SIGNAL(timeout()), this, SLOT(perform()));
        t-&gt;start(0);
    }

    void Operation::perform()
    {
        pd-&gt;setValue(steps);
        <span class=&quote;comment&quote;>//... perform one percent of the operation</span>
        steps++;
        if (steps &gt; pd-&gt;maximum())
            t-&gt;stop();
    }

    void Operation::cancel()
    {
        t-&gt;stop();
        <span class=&quote;comment&quote;>//... cleanup</span>
    }</pre>
<p>In both modes the progress dialog may be customized by replacing the child widgets with custom widgets by using setLabel(), setBar(), and setCancelButton(). The functions setLabelText() and setCancelButtonText() set the texts shown.</p>
<p>The Standard Dialogs example shows how to use QProgressDialog as well as other built-in Qt dialogs.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image plastique-progressdialog.png]</font></p>
*/">
    <method name="public QProgressDialog(com.trolltech.qt.gui.QWidget parent__0, com.trolltech.qt.core.Qt.WindowFlags f__1)" doc="/**
<p>Constructs a progress dialog.</p>
<p>Default settings:</p>
<ul>
<li>The label text is empty.</li>
<li>The cancel button text is (translated) &quot;Cancel&quot;.</li>
<li>minimum is 0;</li>
<li>maximum is 100</li>
</ul>
<p>The <i>parent</i> argument is dialog's parent widget. The widget flags, <i>f</i>, are passed to the QDialog::QDialog() constructor.</p>

*/"/>
    <method name="public QProgressDialog(java.lang.String labelText__0, java.lang.String cancelButtonText__1, int minimum__2, int maximum__3, com.trolltech.qt.gui.QWidget parent__4, com.trolltech.qt.core.Qt.WindowFlags f__5)" doc="/**
<p>Constructs a progress dialog.</p>
<p>The <i>labelText</i> is the text used to remind the user what is progressing.</p>
<p>The <i>cancelButtonText</i> is the text to display on the cancel button, or 0 if no cancel button is to be shown.</p>
<p>The <i>minimum</i> and <i>maximum</i> is the number of steps in the operation for which this progress dialog shows progress. For example, if the operation is to examine 50 files, this value minimum value would be 0, and the maximum would be 50. Before examining the first file, call setValue(0). As each file is processed call setValue(1), setValue(2), etc., finally calling setValue(50) after examining the last file.</p>
<p>The <i>parent</i> argument is the dialog's parent widget. The and widget flags, <i>f</i>, are passed to the QDialog::QDialog() constructor.</p>

*/"/>
    <method name="public final boolean autoClose()"/>
    <method name="public final boolean autoReset()"/>
    <method name="public final void cancel()" doc="/**
<p>Resets the progress dialog. wasCanceled() becomes true until the progress dialog is reset. The progress dialog becomes hidden.</p>

*/"/>
    <method name="protected final void forceShow()" doc="/**
<p>Shows the dialog if it is still hidden after the algorithm has been started and minimumDuration milliseconds have passed.</p>

*/"/>
    <method name="public final java.lang.String labelText()"/>
    <method name="public final int maximum()"/>
    <method name="public final int minimum()"/>
    <method name="public final int minimumDuration()"/>
    <method name="public final void reset()" doc="/**
<p>Resets the progress dialog. The progress dialog becomes hidden if autoClose() is true.</p>

*/"/>
    <method name="public final void setAutoClose(boolean b__0)"/>
    <method name="public final void setAutoReset(boolean b__0)"/>
    <method name="public final void setBar(com.trolltech.qt.gui.QProgressBar bar__0)" doc="/**
<p>Sets the progress bar widget to <i>bar</i>. The progress dialog resizes to fit. The progress dialog takes ownership of the progress <i>bar</i> which will be deleted when necessary, so do not use a progress bar allocated on the stack.</p>

*/"/>
    <method name="public final void setCancelButton(com.trolltech.qt.gui.QPushButton button__0)" doc="/**
<p>Sets the cancel button to the push button, <i>cancelButton</i>. The progress dialog takes ownership of this button which will be deleted when necessary, so do not pass the address of an object that is on the stack, i.e. use new() to create the button.</p>

*/"/>
    <method name="public final void setCancelButtonText(java.lang.String arg__0)" doc="/**
<p>Sets the cancel button's text to <i>cancelButtonText</i>.</p>

*/"/>
    <method name="public final void setLabel(com.trolltech.qt.gui.QLabel label__0)" doc="/**
<p>Sets the label to <i>label</i>. The progress dialog resizes to fit. The label becomes owned by the progress dialog and will be deleted when necessary, so do not pass the address of an object on the stack.</p>

*/"/>
    <method name="public final void setLabelText(java.lang.String arg__0)"/>
    <method name="public final void setMaximum(int maximum__0)"/>
    <method name="public final void setMinimum(int minimum__0)"/>
    <method name="public final void setMinimumDuration(int ms__0)"/>
    <method name="public final void setRange(int minimum__0, int maximum__1)" doc="/**
<p>Sets the progress dialog's minimum and maximum values to <i>minimum</i> and <i>maximum</i>, respectively.</p>
<p>If <i>maximum</i> is smaller than <i>minimum</i>, <i>minimum</i> becomes the only legal value.</p>
<p>If the current value falls outside the new range, the progress dialog is reset with reset().</p>

*/"/>
    <method name="public final void setValue(int progress__0)"/>
    <method name="public final int value()"/>
    <method name="public final boolean wasCanceled()"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="protected void closeEvent(com.trolltech.qt.gui.QCloseEvent arg__0)"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent arg__0)"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent e__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()" doc="/**
<p>Returns a size that fits the contents of the progress dialog. The progress dialog resizes itself as required, so you should not need to call this yourself.</p>

*/"/>
</class>
