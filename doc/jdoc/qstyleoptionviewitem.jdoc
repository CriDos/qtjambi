<class name="QStyleOptionViewItem" doc="/**
<p>The QStyleOptionViewItem class is used to describe the parameters used to draw an item in a view widget.</p>
<p>QStyleOptionViewItem contains all the information that QStyle functions need to draw the items for Qt's model/view classes.</p>
<p>For performance reasons, the access to the member variables is direct (i.e., using the <tt>.</tt> or <tt>-&gt;</tt> operator). This low-level feel makes the structures straightforward to use and emphasizes that these are simply parameters used by the style functions.</p>
<p>For an example demonstrating how style options can be used, see the Styles example.</p>

*/">
    <method name="public QStyleOptionViewItem(com.trolltech.qt.gui.QStyleOptionViewItem other__0)" doc="/**
<p>Constructs a copy of the <i>other</i> style option.</p>

*/"/>
    <method name="public QStyleOptionViewItem()" doc="/**
<p>Constructs a QStyleOptionViewItem, initializing the members variables to their default values.</p>

*/"/>
    <method name="protected QStyleOptionViewItem(int version__0)"/>
    <enum name="StyleOptionVersion" doc="/**
<p>This enum is used to hold information about the version of the style option, and is defined for each QStyleOption subclass.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>1</td></tr>
</table></p>
<p>The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally don't need to check it.</p>

*/"/>
    <enum name="StyleOptionType" doc="/**
<p>This enum is used to hold information about the type of the style option, and is defined for each QStyleOption subclass.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The type of style option provided (SO_ViewItem for this class).</td></tr>
</table></p>
<p>The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.</p>

*/"/>
    <enum name="Position" doc="/**
<p>This enum describes the position of the item's decoration.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>On the left of the text.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>On the right of the text.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Above the text.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Below the text.</td></tr>
</table></p>

*/"/>
    <method name="public final boolean showDecorationSelected()" doc="/**
<p>whether the decoration should be highlighted on selected items</p>
<p>If this option is true, the branch and any decorations on selected items should be highlighted, indicating that the item is selected; otherwise, no highlighting is required. The default value is false.</p>

*/"/>
    <method name="public final void setShowDecorationSelected(boolean showDecorationSelected)" doc="/**
<p>whether the decoration should be highlighted on selected items</p>
<p>If this option is true, the branch and any decorations on selected items should be highlighted, indicating that the item is selected; otherwise, no highlighting is required. The default value is false.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QStyleOptionViewItem.Position decorationPosition()" doc="/**
<p>the position of the decoration for the item</p>
<p>The default value is Left.</p>

*/"/>
    <method name="public final void setDecorationPosition(com.trolltech.qt.gui.QStyleOptionViewItem.Position decorationPosition)" doc="/**
<p>the position of the decoration for the item</p>
<p>The default value is Left.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Alignment decorationAlignment()" doc="/**
<p>the alignment of the decoration for the item</p>
<p>The default value is Qt::AlignLeft.</p>

*/"/>
    <method name="public final void setDecorationAlignment(com.trolltech.qt.core.Qt.Alignment decorationAlignment)" doc="/**
<p>the alignment of the decoration for the item</p>
<p>The default value is Qt::AlignLeft.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.Alignment displayAlignment()" doc="/**
<p>the alignment of the display value for the item</p>
<p>The default value is Qt::AlignLeft.</p>

*/"/>
    <method name="public final void setDisplayAlignment(com.trolltech.qt.core.Qt.Alignment displayAlignment)" doc="/**
<p>the alignment of the display value for the item</p>
<p>The default value is Qt::AlignLeft.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.TextElideMode textElideMode()" doc="/**
<p>where ellipsis should be added for text that is too long to fit into an item</p>
<p>The default value is Qt::ElideMiddle, i.e. the ellipsis appears in the middle of the text.</p>

*/"/>
    <method name="public final void setTextElideMode(com.trolltech.qt.core.Qt.TextElideMode textElideMode)" doc="/**
<p>where ellipsis should be added for text that is too long to fit into an item</p>
<p>The default value is Qt::ElideMiddle, i.e. the ellipsis appears in the middle of the text.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize decorationSize()" doc="/**
<p>the size of the decoration for the item</p>
<p>The default value is QSize(-1, -1), i.e. an invalid size.</p>

*/"/>
    <method name="public final void setDecorationSize(com.trolltech.qt.core.QSize decorationSize)" doc="/**
<p>the size of the decoration for the item</p>
<p>The default value is QSize(-1, -1), i.e. an invalid size.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QFont font()" doc="/**
<p>the font used for the item</p>
<p>By default, the application's default font is used.</p>

*/"/>
    <method name="public final void setFont(com.trolltech.qt.gui.QFont font)" doc="/**
<p>the font used for the item</p>
<p>By default, the application's default font is used.</p>

*/"/>
</class>
