<class name="QCursor" doc="/**
<p>The QCursor class provides a mouse cursor with an arbitrary shape.</p>
<p>This class is mainly used to create mouse cursors that are associated with particular widgets and to get and set the position of the mouse cursor.</p>
<p>Qt has a number of standard cursor shapes, but you can also make custom cursor shapes based on a QBitmap, a mask and a hotspot.</p>
<p>To associate a cursor with a widget, use QWidget::setCursor(). To associate a cursor with all widgets (normally for a short period of time), use QApplication::setOverrideCursor().</p>
<p>To set a cursor shape use QCursor::setShape() or use the QCursor constructor which takes the shape as argument, or you can use one of the predefined cursors defined in the Qt::CursorShape enum.</p>
<p>If you want to create a cursor with your own bitmap, either use the QCursor constructor which takes a bitmap and a mask or the constructor which takes a pixmap as arguments.</p>
<p>To set or get the position of the mouse cursor use the static methods QCursor::pos() and QCursor::setPos().</p>
<a name=&quote;a-note-for-x11-users&quote;></a>
<h3>A Note for X11 Users</h3>
<p>On X11, Qt supports the <a href=&quote;http://www.xfree86.org/4.3.0/Xcursor.3.html&quote;>Xcursor</a> library, which allows for full color icon themes. The table below shows the cursor name used for each Qt::CursorShape value. If a cursor cannot be found using the name shown below, a standard X11 cursor will be used instead. Note: X11 does not provide appropriate cursors for all possible Qt::CursorShape values. It is possible that some cursors will be taken from the Xcursor theme, while others will use an internal bitmap cursor.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Shape</th><th>Qt::CursorShape Value</th><th>Cursor Name</th><th>Shape</th><th>Qt::CursorShape Value</th><th>Cursor Name</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image cursor-arrow.png]</font></td><td>Qt::ArrowCursor</td><td><tt>left_ptr</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-sizev.png]</font></td><td>Qt::SizeVerCursor</td><td><tt>size_ver</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image cursor-uparrow.png]</font></td><td>Qt::UpArrowCursor</td><td><tt>up_arrow</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-sizeh.png]</font></td><td>Qt::SizeHorCursor</td><td><tt>size_hor</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image cursor-cross.png]</font></td><td>Qt::CrossCursor</td><td><tt>cross</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-sizeb.png]</font></td><td>Qt::SizeBDiagCursor</td><td><tt>size_bdiag</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image cursor-ibeam.png]</font></td><td>Qt::IBeamCursor</td><td><tt>ibeam</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-sizef.png]</font></td><td>Qt::SizeFDiagCursor</td><td><tt>size_fdiag</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image cursor-wait.png]</font></td><td>Qt::WaitCursor</td><td><tt>wait</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-sizeall.png]</font></td><td>Qt::SizeAllCursor</td><td><tt>size_all</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image cursor-busy.png]</font></td><td>Qt::BusyCursor</td><td><tt>left_ptr_watch</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-vsplit.png]</font></td><td>Qt::SplitVCursor</td><td><tt>split_v</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image cursor-forbidden.png]</font></td><td>Qt::ForbiddenCursor</td><td><tt>forbidden</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-hsplit.png]</font></td><td>Qt::SplitHCursor</td><td><tt>split_h</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image cursor-hand.png]</font></td><td>Qt::PointingHandCursor</td><td><tt>pointing_hand</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-openhand.png]</font></td><td>Qt::OpenHandCursor</td><td><tt>openhand</tt></td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image cursor-whatsthis.png]</font></td><td>Qt::WhatsThisCursor</td><td><tt>whats_this</tt></td><td><font color=&quote;red&quote;>[Missing image cursor-closedhand.png]</font></td><td>Qt::ClosedHandCursor</td><td><tt>closedhand</tt></td></tr>
</table></p>

*/">
    <method name="public QCursor(com.trolltech.qt.gui.QBitmap bitmap__0, com.trolltech.qt.gui.QBitmap mask__1, int hotX__2, int hotY__3)" doc="/**
<p>Constructs a custom bitmap cursor.</p>
<p><i>bitmap</i> and <i>mask</i> make up the bitmap. <i>hotX</i> and <i>hotY</i> define the cursor's hot spot.</p>
<p>If <i>hotX</i> is negative, it is set to the <tt>bitmap().width()/2</tt>. If <i>hotY</i> is negative, it is set to the <tt>bitmap().height()/2</tt>.</p>
<p>The cursor <i>bitmap</i> (B) and <i>mask</i> (M) bits are combined like this:</p>
<ul>
<li>B=1 and M=1 gives black.</li>
<li>B=0 and M=1 gives white.</li>
<li>B=0 and M=0 gives transparent.</li>
<li>B=1 and M=0 gives an XOR'd result.</li>
</ul>
<p>Use the global Qt color Qt::color0 to draw 0-pixels and Qt::color1 to draw 1-pixels in the bitmaps.</p>
<p>Valid cursor sizes depend on the display hardware (or the underlying window system). We recommend using 32 x 32 cursors, because this size is supported on all platforms. Some platforms also support 16 x 16, 48 x 48, and 64 x 64 cursors.</p>

*/"/>
    <method name="public QCursor()" doc="/**
<p>Constructs a cursor with the default arrow shape.</p>

*/"/>
    <method name="public QCursor(com.trolltech.qt.gui.QCursor cursor__0)" doc="/**
<p>Constructs a copy of the cursor <i>c</i>.</p>

*/"/>
    <method name="public QCursor(com.trolltech.qt.gui.QPixmap pixmap__0, int hotX__1, int hotY__2)" doc="/**
<p>Constructs a custom pixmap cursor.</p>
<p><i>pixmap</i> is the image. It is usual to give it a mask (set using QPixmap::setMask()). <i>hotX</i> and <i>hotY</i> define the cursor's hot spot.</p>
<p>If <i>hotX</i> is negative, it is set to the <tt>pixmap().width()/2</tt>. If <i>hotY</i> is negative, it is set to the <tt>pixmap().height()/2</tt>.</p>
<p>Valid cursor sizes depend on the display hardware (or the underlying window system). We recommend using 32 x 32 cursors, because this size is supported on all platforms. Some platforms also support 16 x 16, 48 x 48, and 64 x 64 cursors.</p>

*/"/>
    <method name="public QCursor(com.trolltech.qt.core.Qt.CursorShape shape__0)" doc="/**
<p>Constructs a cursor with the specified <i>shape</i>.</p>
<p>See Qt::CursorShape for a list of shapes.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer bitmap()" doc="/**
<p>Returns the cursor bitmap, or 0 if it is one of the standard cursors.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint hotSpot()" doc="/**
<p>Returns the cursor hot spot, or (0, 0) if it is one of the standard cursors.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer mask()" doc="/**
<p>Returns the cursor bitmap mask, or 0 if it is one of the standard cursors.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPixmap pixmap()" doc="/**
<p>Returns the cursor pixmap. This is only valid if the cursor is a pixmap cursor.</p>

*/"/>
    <method name="public final void setShape(com.trolltech.qt.core.Qt.CursorShape newShape__0)" doc="/**
<p>Sets the cursor to the shape identified by <i>shape</i>.</p>
<p>See Qt::CursorShape for the list of cursor shapes.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.CursorShape shape()" doc="/**
<p>Returns the cursor shape identifier. The return value is one of the Qt::CursorShape enum values (cast to an int).</p>

*/"/>
    <method name="public native static com.trolltech.qt.core.QPoint pos()" doc="/**
<p>Returns the position of the cursor (hot spot) in global screen coordinates.</p>
<p>You can call QWidget::mapFromGlobal() to translate it to widget coordinates.</p>

*/"/>
    <method name="public final static void setPos(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the cursor (hot spot) to the global screen position at point <i>p</i>.</p>

*/"/>
    <method name="public native static void setPos(int x__0, int y__1)" doc="/**
<p>Moves the cursor (hot spot) to the global screen position (<i>x</i>, <i>y</i>).</p>
<p>You can call QWidget::mapToGlobal() to translate widget coordinates to global screen coordinates.</p>

*/"/>
</class>
