<class name="QDataStream" doc="/**
<p>The QDataStream class provides serialization of binary data to a QIODevice.</p>
<p>A data stream is a binary stream of encoded information which is 100% independent of the host computer's operating system, CPU or byte order. For example, a data stream that is written by a PC under Windows can be read by a Sun SPARC running Solaris.</p>
<p>You can also use a data stream to read/write <a href=&quote;#raw&quote;>raw unencoded binary data</a>. If you want a &quot;parsing&quot; input stream, see QTextStream.</p>
<p>The QDataStream class implements the serialization of C++'s basic data types, like <tt>char</tt>, <tt>short</tt>, <tt>int</tt>, <tt>char *</tt>, etc. Serialization of more complex data is accomplished by breaking up the data into primitive units.</p>
<p>A data stream cooperates closely with a QIODevice. A QIODevice represents an input/output medium one can read data from and write data to. The QFile class is an example of an I/O device.</p>
<p>Example (write binary data to a stream):</p>
<pre>    QFile file(&quot;file.dat&quot;);
    file.open(QIODevice::WriteOnly);
    QDataStream out(&amp;file);   <span class=&quote;comment&quote;>// we will serialize the data into the file</span>
    out &lt;&lt; &quot;the answer is&quot;;   <span class=&quote;comment&quote;>// serialize a string</span>
    out &lt;&lt; (qint32)42;        <span class=&quote;comment&quote;>// serialize an integer</span></pre>
<p>Example (read binary data from a stream):</p>
<pre>    QFile file(&quot;file.dat&quot;);
    file.open(QIODevice::ReadOnly);
    QDataStream in(&amp;file);    <span class=&quote;comment&quote;>// read the data serialized from the file</span>
    QString str;
    qint32 a;
    in &gt;&gt; str &gt;&gt; a;           <span class=&quote;comment&quote;>// extract &quot;the answer is&quot; and 42</span></pre>
<p>Each item written to the stream is written in a predefined binary format that varies depending on the item's type. Supported Qt types include QBrush, QColor, QDateTime, QFont, QPixmap, QString, QVariant and many others. For the complete list of all Qt types supporting data streaming see the Format of the QDataStream operators.</p>
<p>For integers it is best to always cast to a Qt integer type for writing, and to read back into the same Qt integer type. This ensures that you get integers of the size you want and insulates you from compiler and platform differences.</p>
<p>To take one example, a <tt>char *</tt> string is written as a 32-bit integer equal to the length of the string including the '\0' byte, followed by all the characters of the string including the '\0' byte. When reading a <tt>char *</tt> string, 4 bytes are read to create the 32-bit length value, then that many characters for the <tt>char *</tt> string including the '\0' terminator are read.</p>
<p>The initial I/O device is usually set in the constructor, but can be changed with setDevice(). If you've reached the end of the data (or if there is no I/O device set) atEnd() will return true.</p>
<a name=&quote;versioning&quote;></a>
<h3>Versioning</h3>
<p>QDataStream's binary format has evolved since Qt 1.0, and is likely to continue evolving to reflect changes done in Qt. When inputting or outputting complex types, it's very important to make sure that the same version of the stream (version()) is used for reading and writing. If you need both forward and backward compatibility, you can hardcode the version number in the application:</p>
<pre>    stream.setVersion(QDataStream::Qt_4_0);</pre>
<p>If you are producing a new binary data format, such as a file format for documents created by your application, you could use a QDataStream to write the data in a portable format. Typically, you would write a brief header containing a magic string and a version number to give yourself room for future expansion. For example:</p>
<pre>    QFile file(&quot;file.xxx&quot;);
    file.open(QIODevice::WriteOnly);
    QDataStream out(&amp;file);

<span class=&quote;comment&quote;>    // Write a header with a &quot;magic number&quot; and a version</span>
    out &lt;&lt; (quint32)0xA0B0C0D0;
    out &lt;&lt; (qint32)123;

    out.setVersion(QDataStream::Qt_4_0);

<span class=&quote;comment&quote;>    // Write the data</span>
    out &lt;&lt; lots_of_interesting_data;</pre>
<p>Then read it in with:</p>
<pre>    QFile file(&quot;file.xxx&quot;);
    file.open(QIODevice::ReadOnly);
    QDataStream in(&amp;file);

<span class=&quote;comment&quote;>    // Read and check the header</span>
    quint32 magic;
    in &gt;&gt; magic;
    if (magic != 0xA0B0C0D0)
        return XXX_BAD_FILE_FORMAT;

<span class=&quote;comment&quote;>    // Read the version</span>
    qint32 version;
    in &gt;&gt; version;
    if (version &lt; 100)
        return XXX_BAD_FILE_TOO_OLD;
    if (version &gt; 123)
        return XXX_BAD_FILE_TOO_NEW;

    if (version &lt;= 110)
        in.setVersion(QDataStream::Qt_3_2);
    else
        in.setVersion(QDataStream::Qt_4_0);

<span class=&quote;comment&quote;>    // Read the data</span>
    in &gt;&gt; lots_of_interesting_data;
    if (version &gt;= 120)
        in &gt;&gt; data_new_in_XXX_version_1_2;
    in &gt;&gt; other_interesting_data;</pre>
<p>You can select which byte order to use when serializing data. The default setting is big endian (MSB first). Changing it to little endian breaks the portability (unless the reader also changes to little endian). We recommend keeping this setting unless you have special requirements.</p>
<a name=&quote;raw&quote;></a><a name=&quote;reading-and-writing-raw-binary-data&quote;></a>
<h3>Reading and writing raw binary data</h3>
<p>You may wish to read/write your own raw binary data to/from the data stream directly. Data may be read from the stream into a preallocated <tt>char *</tt> using readRawData(). Similarly data can be written to the stream using writeRawData(). Note that any encoding/decoding of the data must be done by you.</p>
<p>A similar pair of functions is readBytes() and writeBytes(). These differ from their <i>raw</i> counterparts as follows: readBytes() reads a quint32 which is taken to be the length of the data to be read, then that number of bytes is read into the preallocated <tt>char *</tt>; writeBytes() writes a quint32 containing the length of the data, followed by the data. Note that any encoding/decoding of the data (apart from the length quint32) must be done by you.</p>

*/">
    <method name="public QDataStream(com.trolltech.qt.core.QByteArray arg__0)" doc="/**
<p>Constructs a read-only data stream that operates on byte array <i>a</i>. Use QDataStream(QByteArray*, int) if you want to write to a byte array.</p>
<p>Since QByteArray is not a QIODevice subclass, internally a QBuffer is created to wrap the byte array.</p>

*/"/>
    <method name="public QDataStream(com.trolltech.qt.core.QIODevice arg__0)" doc="/**
<p>Constructs a data stream that uses the I/O device <i>d</i>.</p>
<p><b>Warning:</b> If you use QSocket or QSocketDevice as the I/O device <i>d</i> for reading data, you must make sure that enough data is available on the socket for the operation to successfully proceed; QDataStream does not have any means to handle or recover from short-reads.</p>

*/"/>
    <method name="public QDataStream(com.trolltech.qt.QNativePointer arg__0, com.trolltech.qt.core.QIODevice.OpenMode flags__1)" doc="/**
<p>Constructs a data stream that operates on a byte array, <i>a</i>. The <i>mode</i> describes how the device is to be used.</p>
<p>Alternatively, you can use QDataStream(const QByteArray &amp;) if you just want to read from a byte array.</p>
<p>Since QByteArray is not a QIODevice subclass, internally a QBuffer is created to wrap the byte array.</p>

*/"/>
    <method name="public QDataStream()" doc="/**
<p>Constructs a data stream that has no I/O device.</p>

*/"/>
    <method name="public final boolean atEnd()" doc="/**
<p>Returns true if the I/O device has reached the end position (end of the stream or file) or if there is no I/O device set; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QIODevice device()" doc="/**
<p>Returns the I/O device currently set.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDataStream readBytes(com.trolltech.qt.QNativePointer arg__0, com.trolltech.qt.QNativePointer len__1)" doc="/**
<p>Reads the buffer <i>s</i> from the stream and returns a reference to the stream.</p>
<p>The buffer <i>s</i> is allocated using <tt>new</tt>. Destroy it with the <tt>delete[]</tt> operator.</p>
<p>The <i>l</i> parameter is set to the length of the buffer. If the string read is empty, <i>l</i> is set to 0 and <i>s</i> is set to a null pointer.</p>
<p>The serialization format is a quint32 length specifier first, then <i>l</i> bytes of data.</p>

*/"/>
    <method name="public final int readRawData(com.trolltech.qt.QNativePointer arg__0, int len__1)" doc="/**
<p>Reads at most <i>len</i> bytes from the stream into <i>s</i> and returns the number of bytes read. If an error occurs, this function returns -1.</p>
<p>The buffer <i>s</i> must be preallocated. The data is <i>not</i> encoded.</p>

*/"/>
    <method name="public final void resetStatus()" doc="/**
<p>Resets the status of the data stream.</p>

*/"/>
    <method name="public final void setDevice(com.trolltech.qt.core.QIODevice arg__0)" doc="/**
<p>void QDataStream::setDevice(QIODevice *d)</p>
<p>Sets the I/O device to <i>d</i>.</p>

*/"/>
    <method name="public final void setStatus(com.trolltech.qt.core.QDataStream.Status status__0)" doc="/**
<p>Sets the status of the data stream to the <i>status</i> given.</p>

*/"/>
    <method name="public final void setVersion(int arg__0)" doc="/**
<p>Sets the version number of the data serialization format to <i>v</i>.</p>
<p>You don't <i>have</i> to set a version if you are using the current version of Qt, but for your own custom binary formats we recommend that you do; see <a href=&quote;qdatastream.jdoc#versioning&quote;>Versioning</a> in the Detailed Description.</p>
<p>In order to accommodate new functionality, the datastream serialization format of some Qt classes has changed in some versions of Qt. If you want to read data that was created by an earlier version of Qt, or write data that can be read by a program that was compiled with an earlier version of Qt, use this function to modify the serialization format used by QDataStream.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Qt Version</th><th>QDataStream Version</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt 4.2</td><td>8</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt 4.0</td><td>7</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt 3.3</td><td>6</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt 3.1, 3.2</td><td>5</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt 3.0</td><td>4</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt 2.1, 2.2, 2.3</td><td>3</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt 2.0</td><td>2</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt 1.x</td><td>1</td></tr>
</table></p>
<p>The Version enum provides symbolic constants for the different versions of Qt. For example:</p>
<pre>    QDataStream out(file);
    out.setVersion(QDataStream::Qt_4_0);</pre>

*/"/>
    <method name="public final int skipRawData(int len__0)" doc="/**
<p>Skips <i>len</i> bytes from the device. Returns the number of bytes actually skipped, or -1 on error.</p>
<p>This is equivalent to calling readRawData() on a buffer of length <i>len</i> and ignoring the buffer.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDataStream.Status status()" doc="/**
<p>Returns the status of the data stream.</p>

*/"/>
    <method name="public final void unsetDevice()" doc="/**
<p>Unsets the I/O device. This is the same as calling setDevice(0).</p>

*/"/>
    <method name="public final int version()" doc="/**
<p>Returns the version number of the data serialization format.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QDataStream writeBytes(com.trolltech.qt.QNativePointer arg__0, int len__1)" doc="/**
<p>Writes the length specifier <i>len</i> and the buffer <i>s</i> to the stream and returns a reference to the stream.</p>
<p>The <i>len</i> is serialized as a quint32, followed by <i>len</i> bytes from <i>s</i>. Note that the data is <i>not</i> encoded.</p>

*/"/>
    <method name="public final int writeRawData(com.trolltech.qt.QNativePointer arg__0, int len__1)" doc="/**
<p>Writes <i>len</i> bytes from <i>s</i> to the stream. Returns the number of bytes actually written, or -1 on error. The data is <i>not</i> encoded.</p>

*/"/>
    <enum name="Version" doc="/**
<p>This enum provides symbolic synonyms for the data serialization format version numbers.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 1 (Qt 1.x)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 2 (Qt 2.0)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 3 (Qt 2.1, 2.2, 2.3)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 4 (Qt 3.0)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 5 (Qt 3.1, 3.2)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 6 (Qt 3.3)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 7 (Qt 4.0, Qt 4.1)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 7 (Qt 4.0, Qt 4.1)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Version 8 (Qt 4.2)</td></tr>
</table></p>

*/"/>
    <enum name="Status" doc="/**
<p>This enum describes the current status of the data stream.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The data stream is operating normally.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The data stream has read past the end of the data in the underlying device.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The data stream has read corrupt data.</td></tr>
</table></p>

*/"/>
</class>
