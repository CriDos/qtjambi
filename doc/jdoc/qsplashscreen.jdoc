<class name="QSplashScreen" doc="/**
<p>The QSplashScreen widget provides a splash screen that can be shown during application startup.</p>
<p>A splash screen is a widget that is usually displayed when an application is being started. Splash screens are often used for applications that have long start up times (e.g. database or networking applications that take time to establish connections) to provide the user with feedback that the application is loading.</p>
<p>The splash screen appears in the center of the screen. It may be useful to add the Qt::WindowStaysOnTopHint to the splash widget's window flags if you want to keep it above all the other windows on the desktop.</p>
<p>Some X11 window managers do not support the &quot;stays on top&quot; flag. A solution is to set up a timer that periodically calls raise() on the splash screen to simulate the &quot;stays on top&quot; effect.</p>
<p>The most common usage is to show a splash screen before the main widget is displayed on the screen. This is illustrated in the following code snippet in which a splash screen is displayed and some initialization tasks are performed before the application's main window is shown:</p>
<pre>    int main(int argc, char *argv[])
    {
        QApplication app(argc, argv);
        QPixmap pixmap(&quot;:/splash.png&quot;);
        QSplashScreen splash(pixmap);
        splash.show();
        app.processEvents();
        ...
        MainWindow window;
        window.show();
        splash.finish(&amp;window);
        return app.exec();
    }</pre>
<p>The user can hide the splash screen by clicking on it with the mouse. Since the splash screen is typically displayed before the event loop has started running, it is necessary to periodically call QApplication::processEvents() to receive the mouse clicks.</p>
<p>It is sometimes useful to update the splash screen with messages, for example, announcing connections established or modules loaded as the application starts up:</p>
<pre>    QPixmap pixmap(&quot;:/splash.png&quot;);
    QSplashScreen *splash = new QSplashScreen(pixmap);
    splash-&gt;show();

    ... <span class=&quote;comment&quote;>// Loading some items</span>
    splash-&gt;showMessage(&quot;Loaded modules&quot;);

    qApp-&gt;processEvents();

    ... <span class=&quote;comment&quote;>// Establishing connections</span>
    splash-&gt;showMessage(&quot;Established connections&quot;);

    qApp-&gt;processEvents();</pre>
<p>QSplashScreen supports this with the showMessage() function. If you wish to do your own drawing you can get a pointer to the pixmap used in the splash screen with pixmap(). Alternatively, you can subclass QSplashScreen and reimplement drawContents().</p>

*/">
    <method name="public QSplashScreen(com.trolltech.qt.gui.QPixmap pixmap__0, com.trolltech.qt.core.Qt.WindowFlags f__1)" doc="/**
<p>Construct a splash screen that will display the <i>pixmap</i>.</p>
<p>There should be no need to set the widget flags, <i>f</i>, except perhaps Qt::WindowStaysOnTopHint.</p>

*/"/>
    <method name="public QSplashScreen(com.trolltech.qt.gui.QWidget parent__0, com.trolltech.qt.gui.QPixmap pixmap__1, com.trolltech.qt.core.Qt.WindowFlags f__2)" doc="/**
<p>This function allows you to specify a parent for your splashscreen. The typical use for this constructor is if you have a multiple screens and prefer to have the splash screen on a different screen than your primary one. In that case pass the proper desktop() as the <i>parent</i>.</p>

*/"/>
    <method name="public final void clearMessage()" doc="/**
<p>Removes the message being displayed on the splash screen</p>

*/"/>
    <method name="public final void finish(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Makes the splash screen wait until the widget <i>mainWin</i> is displayed before calling close() on itself.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPixmap pixmap()" doc="/**
<p>Returns the pixmap that is used in the splash screen. The image does not have any of the text drawn by showMessage() calls.</p>

*/"/>
    <method name="public final void repaint()" doc="/**
<p>This overrides QWidget::repaint(). It differs from the standard repaint function in that it also calls QApplication::flush() to ensure the updates are displayed, even when there is no event loop present.</p>

*/"/>
    <method name="public final void setPixmap(com.trolltech.qt.gui.QPixmap pixmap__0)" doc="/**
<p>Sets the pixmap that will be used as the splash screen's image to <i>pixmap</i>.</p>

*/"/>
    <method name="public final void showMessage(java.lang.String message__0, int alignment__1, com.trolltech.qt.gui.QColor color__2)" doc="/**
<p>Draws the <i>message</i> text onto the splash screen with color <i>color</i> and aligns the text according to the flags in <i>alignment</i>.</p>

*/"/>
    <method name="protected void drawContents(com.trolltech.qt.gui.QPainter painter__0)" doc="/**
<p>Draw the contents of the splash screen using painter <i>painter</i>. The default implementation draws the message passed by showMessage(). Reimplement this function if you want to do your own drawing on the splash screen.</p>

*/"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
</class>
