<class name="QTextEdit" doc="/**
<p>The QTextEdit class provides a widget that is used to edit and display both plain and rich text.</p>
<ul><li><a href=&quote;#introduction-and-concepts&quote;>Introduction and Concepts</a></li>
<li><a href=&quote;#using-qtextedit-as-a-display-widget&quote;>Using QTextEdit as a Display Widget</a></li>
<ul><li><a href=&quote;#read-only-key-bindings&quote;>Read-only Key Bindings</a></li>
</ul>
<li><a href=&quote;#using-qtextedit-as-an-editor&quote;>Using QTextEdit as an Editor</a></li>
<ul><li><a href=&quote;#editing-key-bindings&quote;>Editing Key Bindings</a></li>
</ul>
</ul>
<a name=&quote;introduction-and-concepts&quote;></a>
<h3>Introduction and Concepts</h3>
<p>QTextEdit is an advanced WYSIWYG viewer/editor supporting rich text formatting using HTML-style tags. It is optimized to handle large documents and to respond quickly to user input.</p>
<p>QTextEdit works on paragraphs and characters. A paragraph is a formatted string which is word-wrapped to fit into the width of the widget. By default when reading plain text, one newline signifies a paragraph. A document consists of zero or more paragraphs. The words in the paragraph are aligned in accordance with the paragraph's alignment. Paragraphs are separated by hard line breaks. Each character within a paragraph has its own attributes, for example, font and color.</p>
<p>QTextEdit can display images, lists and tables. If the text is too large to view within the text edit's viewport, scrollbars will appear. The text edit can load both plain text and HTML files (a subset of HTML 3.2 and 4).</p>
<p>If you just need to display a small piece of rich text use QLabel.</p>
<p>Note that we do not intend to add a full-featured web browser widget to Qt (because that would easily double Qt's size and only a few applications would benefit from it). The rich text support in Qt is designed to provide a fast, portable and efficient way to add reasonable online help facilities to applications, and to provide a basis for rich text editors.</p>
<a name=&quote;using-qtextedit-as-a-display-widget&quote;></a>
<h3>Using QTextEdit as a Display Widget</h3>
<p>QTextEdit can display a large HTML subset, including tables and images.</p>
<p>The text is set or replaced using setHtml() which deletes any existing text and replaces it with the text passed in the setHtml() call. If you call setHtml() with legacy HTML, and then call toHtml(), the text that is returned may have different markup, but will render the same. The entire text can be deleted with clear().</p>
<p>Text itself can be inserted using the QTextCursor class or using the convenience functions insertHtml(), insertPlainText(), append() or paste(). QTextCursor is also able to insert complex objects like tables or lists into the document, and it deals with creating selections and applying changes to selected text.</p>
<p>By default the text edit wraps words at whitespace to fit within the text edit widget. The setLineWrapMode() function is used to specify the kind of line wrap you want, or NoWrap if you don't want any wrapping. Call setLineWrapMode() to set a fixed pixel width FixedPixelWidth, or character column (e.g. 80 column) FixedColumnWidth with the pixels or columns specified with setLineWrapColumnOrWidth(). If you use word wrap to the widget's width WidgetWidth, you can specify whether to break on whitespace or anywhere with setWordWrapMode().</p>
<p>The find() function can be used to find and select a given string within the text.</p>
<p>If you want to limit the total number of paragraphs in a QTextEdit, as it is for example open useful in a log viewer, then you can use QTextDocument's maximumBlockCount property for that.</p>
<a name=&quote;read-only-key-bindings&quote;></a>
<h4>Read-only Key Bindings</h4>
<p>When QTextEdit is used read-only the key bindings are limited to navigation, and text may only be selected with the mouse:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Keypresses</th><th>Action</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::UpArrow</td><td>Moves one line up.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::DownArrow</td><td>Moves one line down.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Qt::LeftArrow</td><td>Moves one character to the left.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Qt::RightArrow</td><td>Moves one character to the right.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>PageUp</td><td>Moves one (viewport) page up.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>PageDown</td><td>Moves one (viewport) page down.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Home</td><td>Moves to the beginning of the text.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>End</td><td>Moves to the end of the text.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Alt+Wheel</td><td>Scrolls the page horizontally (the Wheel is the mouse wheel).</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Ctrl+Wheel</td><td>Zooms the text.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+A</td><td>Selects all text.</td></tr>
</table></p>
<p>The text edit may be able to provide some meta-information. For example, the documentTitle() function will return the text from within HTML <tt>&lt;title&gt;</tt> tags.</p>
<a name=&quote;using-qtextedit-as-an-editor&quote;></a>
<h3>Using QTextEdit as an Editor</h3>
<p>All the information about using QTextEdit as a display widget also applies here.</p>
<p>The current char format's attributes are set with setFontItalic(), setFontWeight(), setFontUnderline(), setFontFamily(), setFontPointSize(), setTextColor() and setCurrentFont(). The current paragraph's alignment is set with setAlignment().</p>
<p>Selection of text is handled by the QTextCursor class, which provides functionality for creating selections, retrieving the text contents or deleting selections. You can retrieve the object that corresponds with the user-visible cursor using the textCursor() method. If you want to set a selection in QTextEdit just create one on a QTextCursor object and then make that cursor the visible cursor using setCursor(). The selection can be copied to the clipboard with copy(), or cut to the clipboard with cut(). The entire text can be selected using selectAll().</p>
<p>When the cursor is moved and the underlying formatting attributes change, the currentCharFormatChanged() signal is emitted to reflect the new attributes at the new cursor position.</p>
<p>QTextEdit holds a QTextDocument object which can be retrieved using the document() method. You can also set your own document object using setDocument(). QTextDocument emits a textChanged() signal if the text changes and it also provides a isModified() function which will return true if the text has been modified since it was either loaded or since the last call to setModified with false as argument. In addition it provides methods for undo and redo.</p>
<a name=&quote;editing-key-bindings&quote;></a>
<h4>Editing Key Bindings</h4>
<p>The list of key bindings which are implemented for editing:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<thead><tr valign=&quote;top&quote; class=&quote;qt-style&quote;><th>Keypresses</th><th>Action</th></tr></thead>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Backspace</td><td>Deletes the character to the left of the cursor.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Delete</td><td>Deletes the character to the right of the cursor.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+C</td><td>Copy the selected text to the clipboard.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Ctrl+Insert</td><td>Copy the selected text to the clipboard.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+K</td><td>Deletes to the end of the line.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Ctrl+V</td><td>Pastes the clipboard text into text edit.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Shift+Insert</td><td>Pastes the clipboard text into text edit.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Ctrl+X</td><td>Deletes the selected text and copies it to the clipboard.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Shift+Delete</td><td>Deletes the selected text and copies it to the clipboard.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Ctrl+Z</td><td>Undoes the last operation.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+Y</td><td>Redoes the last operation.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>LeftArrow</td><td>Moves the cursor one character to the left.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+LeftArrow</td><td>Moves the cursor one word to the left.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>RightArrow</td><td>Moves the cursor one character to the right.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+RightArrow</td><td>Moves the cursor one word to the right.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>UpArrow</td><td>Moves the cursor one line up.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+UpArrow</td><td>Moves the cursor one word up.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>DownArrow</td><td>Moves the cursor one line down.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+Down Arrow</td><td>Moves the cursor one word down.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>PageUp</td><td>Moves the cursor one page up.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>PageDown</td><td>Moves the cursor one page down.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Home</td><td>Moves the cursor to the beginning of the line.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+Home</td><td>Moves the cursor to the beginning of the text.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>End</td><td>Moves the cursor to the end of the line.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+End</td><td>Moves the cursor to the end of the text.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Alt+Wheel</td><td>Scrolls the page horizontally (the Wheel is the mouse wheel).</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td>Ctrl+Wheel</td><td>Zooms the text.</td></tr>
</table></p>
<p>To select (mark) text hold down the Shift key whilst pressing one of the movement keystrokes, for example, <i>Shift+Right Arrow</i> will select the character to the right, and <i>Shift+Ctrl+Right Arrow</i> will select the word to the right, etc.</p>

*/">
    <method name="public QTextEdit(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs an empty QTextEdit with parent <i>parent</i>.</p>

*/"/>
    <method name="public QTextEdit(java.lang.String text__0, com.trolltech.qt.gui.QWidget parent__1)" doc="/**
<p>Constructs a QTextEdit with parent <i>parent</i>. The text edit will display the text <i>text</i>. The text is interpreted as html.</p>

*/"/>
    <method name="public final boolean acceptRichText()"/>
    <method name="public final com.trolltech.qt.core.Qt.Alignment alignment()" doc="/**
<p>Returns the alignment of the current paragraph.</p>

*/"/>
    <method name="public final java.lang.String anchorAt(com.trolltech.qt.core.QPoint pos__0)" doc="/**
<p>Returns the reference of the anchor at position <i>pos</i>, or an empty string if no anchor exists at that point.</p>

*/"/>
    <method name="public final void append(java.lang.String text__0)" doc="/**
<p>Appends a new paragraph with <i>text</i> to the end of the text edit.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextEdit.AutoFormatting autoFormatting()"/>
    <method name="public final boolean canPaste()" doc="/**
<p>Returns whether text can be pasted from the clipboard into the textedit.</p>

*/"/>
    <method name="public final void clear()" doc="/**
<p>Deletes all the text in the text edit.</p>
<p>Note that the undo/redo history is cleared by this function.</p>

*/"/>
    <method name="public final void copy()" doc="/**
<p>Copies any selected text to the clipboard.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMenu createStandardContextMenu()" doc="/**
<p>This function creates the standard context menu which is shown when the user clicks on the line edit with the right mouse button. It is called from the default contextMenuEvent() handler. The popup menu's ownership is transferred to the caller.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextCharFormat currentCharFormat()" doc="/**
<p>Returns the char format that is used when inserting new text.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QFont currentFont()" doc="/**
<p>Returns the font of the current format.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextCursor cursorForPosition(com.trolltech.qt.core.QPoint pos__0)" doc="/**
<p>returns a QTextCursor at position <i>pos</i> (in viewport coordinates).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect cursorRect()" doc="/**
<p>returns a rectangle (in viewport coordinates) that includes the cursor of the text edit.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect cursorRect(com.trolltech.qt.gui.QTextCursor cursor__0)" doc="/**
<p>returns a rectangle (in viewport coordinates) that includes the <i>cursor</i>.</p>

*/"/>
    <method name="public final int cursorWidth()"/>
    <method name="public final void cut()" doc="/**
<p>Copies the selected text to the clipboard and deletes it from the text edit.</p>
<p>If there is no selected text nothing happens.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextDocument document()" doc="/**
<p>Returns a pointer to the underlying document.</p>

*/"/>
    <method name="public final java.lang.String documentTitle()"/>
    <method name="public final void ensureCursorVisible()" doc="/**
<p>Ensures that the cursor is visible by scrolling the text edit if necessary.</p>

*/"/>
    <method name="public final java.util.List&lt;com.trolltech.qt.gui.QTextEdit_ExtraSelection&gt; extraSelections()" doc="/**
<p>Returns previously set extra selections.</p>

*/"/>
    <method name="public final boolean find(java.lang.String exp__0, com.trolltech.qt.gui.QTextDocument.FindFlags options__1)" doc="/**
<p>Finds the next occurrence of the string, <i>exp</i>, using the given <i>options</i>. Returns true if <i>exp</i> was found and changes the cursor to select the match; otherwise returns false.</p>

*/"/>
    <method name="public final java.lang.String fontFamily()" doc="/**
<p>Returns the font family of the current format.</p>

*/"/>
    <method name="public final boolean fontItalic()" doc="/**
<p>Returns true if the font of the current format is italic; otherwise returns false.</p>

*/"/>
    <method name="public final double fontPointSize()" doc="/**
<p>Returns the point size of the font of the current format.</p>

*/"/>
    <method name="public final boolean fontUnderline()" doc="/**
<p>Returns true if the font of the current format is underlined; otherwise returns false.</p>

*/"/>
    <method name="public final int fontWeight()" doc="/**
<p>Returns the font weight of the current format.</p>

*/"/>
    <method name="public final void insertHtml(java.lang.String text__0)" doc="/**
<p>Convenience slot that inserts <i>text</i> which is assumed to be of html formatting at the current cursor position.</p>
<p>It is equivalent to:</p>
<pre>    edit-&gt;textCursor().insertHtml(fragment);</pre>

*/"/>
    <method name="public final void insertPlainText(java.lang.String text__0)" doc="/**
<p>Convenience slot that inserts <i>text</i> at the current cursor position.</p>
<p>It is equivalent to</p>
<pre>    edit-&gt;textCursor().insertText(text);</pre>

*/"/>
    <method name="public final boolean isReadOnly()"/>
    <method name="public final boolean isUndoRedoEnabled()"/>
    <method name="public final int lineWrapColumnOrWidth()"/>
    <method name="public final com.trolltech.qt.gui.QTextEdit.LineWrapMode lineWrapMode()"/>
    <method name="public final void mergeCurrentCharFormat(com.trolltech.qt.gui.QTextCharFormat modifier__0)" doc="/**
<p>Merges the properties specified in <i>modifier</i> into the current character format by calling QTextCursor::mergeCharFormat on the editor's cursor. If the editor has a selection then the properties of <i>modifier</i> are directly applied to the selection.</p>

*/"/>
    <method name="public final void moveCursor(com.trolltech.qt.gui.QTextCursor.MoveOperation operation__0, com.trolltech.qt.gui.QTextCursor.MoveMode mode__1)" doc="/**
<p>Moves the cursor by performing the given <i>operation</i>.</p>
<p>If <i>mode</i> is QTextCursor::KeepAnchor, the cursor selects the text it moves over. This is the same effect that the user achieves when they hold down the Shift key and move the cursor with the cursor keys.</p>

*/"/>
    <method name="public final boolean overwriteMode()"/>
    <method name="public final void paste()" doc="/**
<p>Pastes the text from the clipboard into the text edit at the current cursor position.</p>
<p>If there is no text in the clipboard nothing happens.</p>
<p>To change the behavior of this function, i.e. to modify what QTextEdit can paste and how it is being pasted, reimplement the virtual canInsertFromMimeData() and insertFromMimeData() functions.</p>

*/"/>
    <method name="public final void redo()" doc="/**
<p>Redoes the last operation.</p>
<p>If there is no operation to redo, i.e. there is no redo step in the undo/redo history, nothing happens.</p>

*/"/>
    <method name="public final void scrollToAnchor(java.lang.String name__0)" doc="/**
<p>Scrolls the text edit so that the anchor with the given <i>name</i> is visible; does nothing if the <i>name</i> is empty, or is already visible, or isn't found.</p>

*/"/>
    <method name="public final void selectAll()" doc="/**
<p>Selects all text.</p>

*/"/>
    <method name="public final void setAcceptRichText(boolean accept__0)"/>
    <method name="public final void setAlignment(com.trolltech.qt.core.Qt.Alignment a__0)" doc="/**
<p>Sets the alignment of the current paragraph to <i>a</i>. Valid alignments are Qt::AlignLeft, Qt::AlignRight, Qt::AlignJustify and Qt::AlignCenter (which centers horizontally).</p>

*/"/>
    <method name="public final void setAutoFormatting(com.trolltech.qt.gui.QTextEdit.AutoFormatting features__0)"/>
    <method name="public final void setCurrentCharFormat(com.trolltech.qt.gui.QTextCharFormat format__0)" doc="/**
<p>Sets the char format that is be used when inserting new text to <i>format</i> by calling QTextCursor::setCharFormat() on the editor's cursor. If the editor has a selection then the char format is directly applied to the selection.</p>

*/"/>
    <method name="public final void setCurrentFont(com.trolltech.qt.gui.QFont f__0)" doc="/**
<p>Sets the font of the current format to <i>f</i>.</p>

*/"/>
    <method name="public final void setCursorWidth(int width__0)"/>
    <method name="public final void setDocument(com.trolltech.qt.gui.QTextDocument document__0)" doc="/**
<p>Makes <i>document</i> the new document of the text editor.</p>
<p>The parent QObject of the provided document remains the owner of the object. If the current document is a child of the text editor, then it is deleted.</p>

*/"/>
    <method name="public final void setDocumentTitle(java.lang.String title__0)"/>
    <method name="public final void setExtraSelections(java.util.List&lt;com.trolltech.qt.gui.QTextEdit_ExtraSelection&gt; selections__0)" doc="/**
<p>This function allows temporarily marking certain regions in the document with a given color, specified as <i>selections</i>. This can be useful for example in a programming editor to mark a whole line of text with a given background color to indicate the existance of a breakpoint.</p>

*/"/>
    <method name="public final void setFontFamily(java.lang.String fontFamily__0)" doc="/**
<p>Sets the font family of the current format to <i>fontFamily</i>.</p>

*/"/>
    <method name="public final void setFontItalic(boolean b__0)" doc="/**
<p>If <i>italic</i> is true, sets the current format to italic; otherwise sets the current format to non-italic.</p>

*/"/>
    <method name="public final void setFontPointSize(double s__0)" doc="/**
<p>Sets the point size of the current format to <i>s</i>.</p>
<p>Note that if <i>s</i> is zero or negative, the behavior of this function is not defined.</p>

*/"/>
    <method name="public final void setFontUnderline(boolean b__0)" doc="/**
<p>If <i>underline</i> is true, sets the current format to underline; otherwise sets the current format to non-underline.</p>

*/"/>
    <method name="public final void setFontWeight(int w__0)" doc="/**
<p>Sets the font weight of the current format to the given <i>weight</i>, where the value used is in the range defined by the QFont::Weight enum.</p>

*/"/>
    <method name="public final void setHtml(java.lang.String text__0)"/>
    <method name="public final void setLineWrapColumnOrWidth(int w__0)"/>
    <method name="public final void setLineWrapMode(com.trolltech.qt.gui.QTextEdit.LineWrapMode mode__0)"/>
    <method name="public final void setOverwriteMode(boolean overwrite__0)"/>
    <method name="public final void setPlainText(java.lang.String text__0)" doc="/**
<p>Changes the text of the text edit to the string <i>text</i>. Any previous text is removed.</p>
<p><i>text</i> is interpreted as plain text.</p>
<p>Note that the undo/redo history is cleared by this function.</p>

*/"/>
    <method name="public final void setReadOnly(boolean ro__0)"/>
    <method name="public final void setTabChangesFocus(boolean b__0)"/>
    <method name="public final void setTabStopWidth(int width__0)"/>
    <method name="public final void setText(java.lang.String text__0)" doc="/**
<p>Sets the text edit's <i>text</i>. The text can be plain text or HTML and the text edit will try to guess the right format.</p>
<p>Use setHtml() or setPlainText() directly to avoid text edit's guessing.</p>

*/"/>
    <method name="public final void setTextColor(com.trolltech.qt.gui.QColor c__0)" doc="/**
<p>Sets the text color of the current format to <i>c</i>.</p>

*/"/>
    <method name="public final void setTextCursor(com.trolltech.qt.gui.QTextCursor cursor__0)" doc="/**
<p>Sets the visible <i>cursor</i>.</p>

*/"/>
    <method name="public final void setTextInteractionFlags(com.trolltech.qt.core.Qt.TextInteractionFlags flags__0)"/>
    <method name="public final void setUndoRedoEnabled(boolean enable__0)"/>
    <method name="public final void setWordWrapMode(com.trolltech.qt.gui.QTextOption.WrapMode policy__0)"/>
    <method name="public final boolean tabChangesFocus()"/>
    <method name="public final int tabStopWidth()"/>
    <method name="public final com.trolltech.qt.gui.QColor textColor()" doc="/**
<p>Returns the text color of the current format.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextCursor textCursor()" doc="/**
<p>Returns a copy of the QTextCursor that represents the currently visible cursor. Note that changes on the returned cursor do not affect QTextEdit's cursor; use setTextCursor() to update the visible cursor.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.TextInteractionFlags textInteractionFlags()"/>
    <method name="public final java.lang.String toHtml()"/>
    <method name="public final java.lang.String toPlainText()" doc="/**
<p>Returns the text of the text edit as plain text.</p>

*/"/>
    <method name="public final void undo()" doc="/**
<p>Undoes the last operation.</p>
<p>If there is no operation to undo, i.e. there is no undo step in the undo/redo history, nothing happens.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QTextOption.WrapMode wordWrapMode()"/>
    <method name="public final void zoomIn(int range__0)" doc="/**
<p>Zooms in on the text by by making the base font size <i>range</i> points larger and recalculating all font sizes to be the new size. This does not change the size of any images.</p>

*/"/>
    <method name="public final void zoomOut(int range__0)" doc="/**
<p>Zooms out on the text by making the base font size <i>range</i> points smaller and recalculating all font sizes to be the new size. This does not change the size of any images.</p>

*/"/>
    <method name="protected boolean canInsertFromMimeData(com.trolltech.qt.gui.QMimeData source__0)" doc="/**
<p>This function returns true if the contents of the MIME data object, specified by <i>source</i>, can be decoded and inserted into the document. It is called for example when during a drag operation the mouse enters this widget and it is necessary to determine whether it is possible to accept the drag.</p>

*/"/>
    <method name="protected void changeEvent(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected void contextMenuEvent(com.trolltech.qt.gui.QContextMenuEvent e__0)" doc="/**
<p>Shows the standard context menu created with createStandardContextMenu().</p>
<p>If you do not want the text edit to have a context menu, you can set its contextMenuPolicy to Qt::NoContextMenu. If you want to customize the context menu, reimplement this function. If you want to extend the standard context menu, reimplement this function, call createStandardContextMenu() and extend the menu returned.</p>
<p>Information about the event is passed in <i>e</i>.</p>
<pre>    void TextEdit::contextMenuEvent(QContextMenuEvent * e) {
            QMenu *menu = createStandardContextMenu();
            menu-&gt;addAction(My Menu Item&quot;);
            <span class=&quote;comment&quote;>//...</span>
            menu-&gt;exec(e-&gt;globalPos());
            delete menu;
    }</pre>

*/"/>
    <method name="protected com.trolltech.qt.gui.QMimeData createMimeDataFromSelection()" doc="/**
<p>This function returns a new MIME data object to represent the contents of the text edit's current selection. It is called when the selection needs to be encapsulated into a new QMimeData object; for example, when a drag and drop operation is started, or when data is copyied to the clipboard.</p>
<p>If you reimplement this function, note that the ownership of the returned QMimeData object is passed to the caller. The selection can be retrieved by using the textCursor() function.</p>

*/"/>
    <method name="protected void dragEnterEvent(com.trolltech.qt.gui.QDragEnterEvent e__0)"/>
    <method name="protected void dragLeaveEvent(com.trolltech.qt.gui.QDragLeaveEvent e__0)"/>
    <method name="protected void dragMoveEvent(com.trolltech.qt.gui.QDragMoveEvent e__0)"/>
    <method name="protected void dropEvent(com.trolltech.qt.gui.QDropEvent e__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent e__0)"/>
    <method name="protected void focusInEvent(com.trolltech.qt.gui.QFocusEvent e__0)"/>
    <method name="protected boolean focusNextPrevChild(boolean next__0)"/>
    <method name="protected void focusOutEvent(com.trolltech.qt.gui.QFocusEvent e__0)"/>
    <method name="protected void inputMethodEvent(com.trolltech.qt.gui.QInputMethodEvent arg__0)"/>
    <method name="public java.lang.Object inputMethodQuery(com.trolltech.qt.core.Qt.InputMethodQuery property__0)"/>
    <method name="protected void insertFromMimeData(com.trolltech.qt.gui.QMimeData source__0)" doc="/**
<p>This function inserts the contents of the MIME data object, specified by <i>source</i>, into the text edit at the current cursor position. It is called whenever text is inserted as the result of a clipboard paste operation, or when the text edit accepts data from a drag and drop operation.</p>

*/"/>
    <method name="protected void keyPressEvent(com.trolltech.qt.gui.QKeyEvent e__0)"/>
    <method name="protected void keyReleaseEvent(com.trolltech.qt.gui.QKeyEvent e__0)"/>
    <method name="public java.lang.Object loadResource(int type__0, com.trolltech.qt.core.QUrl name__1)" doc="/**
<p>Loads the resource specified by the given <i>type</i> and <i>name</i>.</p>
<p>This function is an extension of QTextDocument::loadResource().</p>

*/"/>
    <method name="protected void mouseDoubleClickEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent e__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent e__0)"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent e__0)"/>
    <method name="protected void scrollContentsBy(int dx__0, int dy__1)"/>
    <method name="protected void showEvent(com.trolltech.qt.gui.QShowEvent arg__0)"/>
    <method name="protected void timerEvent(com.trolltech.qt.core.QTimerEvent e__0)"/>
    <method name="protected void wheelEvent(com.trolltech.qt.gui.QWheelEvent e__0)"/>
    <enum name="AutoFormattingFlag" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Don't do any automatic formatting.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Automatically create bullet lists (e.g. when the user enters an asterisk ('*') in the left most column, or presses Enter in an existing list item.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Apply all automatic formatting. Currently only automatic bullet lists are supported.</td></tr>
</table></p>

*/"/>
    <enum name="LineWrapMode" doc="/**
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;40%&quote;>
<tr><th width=&quote;60%&quote;>Constant</th><th width=&quote;40%&quote;>Value</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td></tr>
</table></p>

*/"/>
</class>
