<class name="QRectF" doc="/**
<p>The QRectF class defines a rectangle in the plane using floating point precision.</p>
<p>A rectangle is normally expressed as an upper-left corner and a size. The size (width and height) of a QRectF is always equivalent to the mathematical rectangle that forms the basis for its rendering.</p>
<p>A QRectF can be constructed with a set of left, top, width and height integers, or from a QPoint and a QSize. The following code creates two identical rectangles.</p>
<pre>    QRectF r1(100, 200, 11, 16);
    QRectF r2(QPoint(100, 200), QSize(11, 16));</pre>
<p>There is also a third constructor creating a QRectF from a QRect, and a corresponding toRect() function that returns a QRect object based on the values of this rectangle (note that the coordinates in the returned rectangle are rounded to the nearest integer).</p>
<p>The QRectF class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. QRectF also provide functions to move the rectangle relative to the various coordinates. In addition there is a moveTo() function that moves the rectangle, leaving its top left corner at the given coordinates. Alternatively, the translate() function moves the rectangle the given offset relative to the current position, and the translated() function returns a translated copy of this rectangle.</p>
<p>The size() function returns the rectange's dimensions as a QSize. The dimensions can also be retrieved separately using the width() and height() functions. To manipulate the dimensions use the setSize(), setWidth() or setHeight() functions. Alternatively, the size can be changed by applying either of the functions setting the rectangle coordinates, for example, setBottom() or setRight().</p>
<p>The contains() function tells whether a given point is inside the rectangle or not, and the intersects() function returns true if this rectangle intersects with a given rectangle (otherwise false). The QRectF class also provides the intersected() function which returns the intersection rectangle, and the united() function which returns the rectangle that encloses the given rectangle and this:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qrect-intersect.png]</font></td><td><font color=&quote;red&quote;>[Missing image qrect-unite.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>intersected()</td><td>united()</td></tr>
</table></p>
<p>The isEmpty() function returns true if the rectangle's width or height is less than, or equal to, 0. Note that an empty rectangle is not valid: The isValid() function returns true if both width and height is larger than 0. A null rectangle (isNull() == true) on the other hand, has both width and height set to 0.</p>
<p>Finally, QRectF objects can be streamed as well as compared.</p>
<ul><li><a href=&quote;#rendering&quote;>Rendering</a></li>
<li><a href=&quote;#coordinates&quote;>Coordinates</a></li>
</ul>
<a name=&quote;rendering&quote;></a>
<h3>Rendering</h3>
<p>When using an anti-aliased painter, the boundary line of a QRectF will be rendered symmetrically on both sides of the mathematical rectangle's boundary line. But when using an aliased painter (the default) other rules apply.</p>
<p>Then, when rendering with a one pixel wide pen the QRectF's boundary line will be rendered to the right and below the mathematical rectangle's boundary line.</p>
<p>When rendering with a two pixels wide pen the boundary line will be split in the middle by the mathematical rectangle. This will be the case whenever the pen is set to an even number of pixels, while rendering with a pen with an odd number of pixels, the spare pixel will be rendered to the right and below the mathematical rectangle as in the one pixel case.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qrect-diagram-zero.png]</font></td><td><font color=&quote;red&quote;>[Missing image qrectf-diagram-one.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Logical representation</td><td>One pixel wide pen</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qrectf-diagram-two.png]</font></td><td><font color=&quote;red&quote;>[Missing image qrectf-diagram-three.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Two pixel wide pen</td><td>Three pixel wide pen</td></tr>
</table></p>
<a name=&quote;coordinates&quote;></a>
<h3>Coordinates</h3>
<p>The QRectF class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. QRectF also provide functions to move the rectangle relative to the various coordinates.</p>
<p>For example: the bottom(), setBottom() and moveBottom() functions: bottom() returns the y-coordinate of the rectangle's bottom edge, setBottom() sets the bottom edge of the rectangle to the given y coordinate (it may change the height, but will never change the rectangle's top edge) and moveBottom() moves the entire rectangle vertically, leaving the rectangle's bottom edge at the given y coordinate and its size unchanged.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qrectf-coordinates.png]</font></p><p>It is also possible to add offsets to this rectangle's coordinates using the adjust() function, as well as retrieve a new rectangle based on adjustments of the original one using the adjusted() function. If either of the width and height is negative, use the normalized() function to retrieve a rectangle where the corners are swapped.</p>
<p>In addition, QRectF provides the getCoords() function which extracts the position of the rectangle's top-left and bottom-right corner, and the getRect() function which extracts the rectangle's top-left corner, width and height. Use the setCoords() and setRect() function to manipulate the rectangle's coordinates and dimensions in one go.</p>

*/">
    <method name="public QRectF(com.trolltech.qt.core.QPointF topleft__0, com.trolltech.qt.core.QSizeF size__1)" doc="/**
<p>Constructs a rectangle with the given <i>topLeft</i> corner and the given <i>size</i>.</p>

*/"/>
    <method name="public QRectF(com.trolltech.qt.core.QRect rect__0)" doc="/**
<p>Constructs a QRectF rectangle from the given QRect <i>rectangle</i>.</p>

*/"/>
    <method name="public QRectF()" doc="/**
<p>Constructs a null rectangle.</p>

*/"/>
    <method name="public QRectF(double left__0, double top__1, double width__2, double height__3)" doc="/**
<p>Constructs a rectangle with (<i>x</i>, <i>y</i>) as its top-left corner and the given <i>width</i> and <i>height</i>.</p>

*/"/>
    <method name="public final void adjust(double x1__0, double y1__1, double x2__2, double y2__3)" doc="/**
<p>Adds <i>dx1</i>, <i>dy1</i>, <i>dx2</i> and <i>dy2</i> respectively to the existing coordinates of the rectangle.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF adjusted(double x1__0, double y1__1, double x2__2, double y2__3)" doc="/**
<p>Returns a new rectangle with <i>dx1</i>, <i>dy1</i>, <i>dx2</i> and <i>dy2</i> added respectively to the existing coordinates of this rectangle.</p>

*/"/>
    <method name="public final double bottom()" doc="/**
<p>Returns the y-coordinate of the rectangle's bottom edge.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF bottomLeft()" doc="/**
<p>Returns the position of the rectangle's bottom-left corner.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF bottomRight()" doc="/**
<p>Returns the position of the rectangle's bottom-right corner.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF center()" doc="/**
<p>Returns the center point of the rectangle.</p>

*/"/>
    <method name="public final boolean contains(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Returns true if the given <i>point</i> is inside or on the edge of the rectangle; otherwise returns false.</p>

*/"/>
    <method name="public final boolean contains(com.trolltech.qt.core.QRectF r__0)" doc="/**
<p>Returns true if the given <i>rectangle</i> is inside this rectangle; otherwise returns false.</p>

*/"/>
    <method name="public final boolean contains(double x__0, double y__1)" doc="/**
<p>Returns true if the point (<i>x</i>, <i>y</i>) is inside or on the edge of the rectangle; otherwise returns false.</p>

*/"/>
    <method name="public final void getCoords(com.trolltech.qt.QNativePointer x1__0, com.trolltech.qt.QNativePointer y1__1, com.trolltech.qt.QNativePointer x2__2, com.trolltech.qt.QNativePointer y2__3)" doc="/**
<p>Extracts the position of the rectangle's top-left corner to *<i>x1</i> and *<i>y1</i>, and the position of the bottom-right corner to *<i>x2</i> and *<i>y2</i>.</p>

*/"/>
    <method name="public final void getRect(com.trolltech.qt.QNativePointer x__0, com.trolltech.qt.QNativePointer y__1, com.trolltech.qt.QNativePointer w__2, com.trolltech.qt.QNativePointer h__3)" doc="/**
<p>Extracts the position of the rectangle's top-left corner to *<i>x</i> and *<i>y</i>, and its dimensions to *<i>width</i> and *<i>height</i>.</p>

*/"/>
    <method name="public final double height()" doc="/**
<p>Returns the height of the rectangle.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF intersect(com.trolltech.qt.core.QRectF r__0)" doc="/**
<p>Use intersected(<i>rectangle</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF intersected(com.trolltech.qt.core.QRectF other__0)" doc="/**
<p>Returns the intersection of this rectangle and the given <i>rectangle</i>. Note that <tt>r.intersected(s)</tt> is equivalent to <tt>r &amp; s</tt>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qrect-intersect.png]</font></p>
*/"/>
    <method name="public final boolean intersects(com.trolltech.qt.core.QRectF r__0)" doc="/**
<p>Returns true if this rectangle intersects with the given <i>rectangle</i> (i.e. there is at least one pixel that is within both rectangles), otherwise returns false.</p>
<p>The intersection rectangle can be retrieved using the intersected() function.</p>

*/"/>
    <method name="public final boolean isEmpty()" doc="/**
<p>Returns true if the rectangle is empty, otherwise returns false.</p>
<p>An empty rectangle has width() &lt;= 0 or height() &lt;= 0. An empty rectangle is not valid (i.e isEmpty() == !isValid()).</p>
<p>Use the normalized() function to retrieve a rectangle where the corners are swapped.</p>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if the rectangle is a null rectangle, otherwise returns false.</p>
<p>A null rectangle has both the width and the height set to 0. A null rectangle is also empty, and hence not valid.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the rectangle is valid, otherwise returns false.</p>
<p>A valid rectangle has a width() &gt; 0 and height() &gt; 0. Note that non-trivial operations like intersections are not defined for invalid rectangles. A valid rectangle is not empty (i.e. isValid() == !isEmpty()).</p>

*/"/>
    <method name="public final double left()" doc="/**
<p>Returns the x-coordinate of the rectangle's left edge. Equivalent to x().</p>

*/"/>
    <method name="public final void moveBottom(double pos__0)" doc="/**
<p>Moves the rectangle vertically, leaving the rectangle's bottom edge at the given <i>y</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveBottomLeft(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Moves the rectangle, leaving the bottom-left corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveBottomRight(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Moves the rectangle, leaving the bottom-right corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveCenter(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Moves the rectangle, leaving the center point at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveLeft(double pos__0)" doc="/**
<p>Moves the rectangle horizontally, leaving the rectangle's left edge at the given <i>x</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveRight(double pos__0)" doc="/**
<p>Moves the rectangle horizontally, leaving the rectangle's right edge at the given <i>x</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTo(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Moves the rectangle, leaving the top-left corner at the given <i>position</i>.</p>

*/"/>
    <method name="public final void moveTo(double x__0, double t__1)" doc="/**
<p>Moves the rectangle, leaving the top-left corner at the given position (<i>x</i>, <i>y</i>). The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTop(double pos__0)" doc="/**
<p>Moves the rectangle vertically, leaving the rectangle's top line at the given <i>y</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTopLeft(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Moves the rectangle, leaving the top-left corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTopRight(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Moves the rectangle, leaving the top-right corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF normalized()" doc="/**
<p>Returns a normalized rectangle; i.e. a rectangle that has a non-negative width and height.</p>
<p>If width() &lt; 0 the function swaps the left and right corners, and it swaps the top and bottom corners if height() &lt; 0.</p>

*/"/>
    <method name="public final double right()" doc="/**
<p>Returns the x-coordinate of the rectangle's right edge.</p>

*/"/>
    <method name="public final void setBottom(double pos__0)" doc="/**
<p>Sets the bottom edge of the rectangle to the given <i>y</i> coordinate. May change the height, but will never change the top edge of the rectangle.</p>

*/"/>
    <method name="public final void setBottomLeft(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Set the bottom-left corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the top-right corner of the rectangle.</p>

*/"/>
    <method name="public final void setBottomRight(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Set the top-right corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the top-left corner of the rectangle.</p>

*/"/>
    <method name="public final void setCoords(double x1__0, double y1__1, double x2__2, double y2__3)" doc="/**
<p>Sets the coordinates of the rectangle's top-left corner to (<i>x1</i>, <i>y1</i>), and the coordinates of its bottom-right corner to (<i>x2</i>, <i>y2</i>).</p>

*/"/>
    <method name="public final void setHeight(double h__0)" doc="/**
<p>Sets the height of the rectangle to the given <i>height</i>. The bottom edge is changed, but not the top one.</p>

*/"/>
    <method name="public final void setLeft(double pos__0)" doc="/**
<p>Sets the left edge of the rectangle to the given <i>x</i> coordinate. May change the width, but will never change the right edge of the rectangle.</p>
<p>Equivalent to setX().</p>

*/"/>
    <method name="public final void setRect(double x__0, double y__1, double w__2, double h__3)" doc="/**
<p>Sets the coordinates of the rectangle's top-left corner to (<i>x</i>, <i>y</i>), and its size to the given <i>width</i> and <i>height</i>.</p>

*/"/>
    <method name="public final void setRight(double pos__0)" doc="/**
<p>Sets the right edge of the rectangle to the given <i>x</i> coordinate. May change the width, but will never change the left edge of the rectangle.</p>

*/"/>
    <method name="public final void setSize(com.trolltech.qt.core.QSizeF s__0)" doc="/**
<p>Sets the size of the rectangle to the given <i>size</i>. The top-left corner is not moved.</p>

*/"/>
    <method name="public final void setTop(double pos__0)" doc="/**
<p>Sets the top edge of the rectangle to the given <i>y</i> coordinate. May change the height, but will never change the bottom edge of the rectangle.</p>
<p>Equivalent to setY().</p>

*/"/>
    <method name="public final void setTopLeft(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Set the top-left corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the bottom-right corner of the rectangle.</p>

*/"/>
    <method name="public final void setTopRight(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Set the top-right corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the bottom-left corner of the rectangle.</p>

*/"/>
    <method name="public final void setWidth(double w__0)" doc="/**
<p>Sets the width of the rectangle to the given <i>width</i>. The right edge is changed, but not the left one.</p>

*/"/>
    <method name="public final void setX(double pos__0)" doc="/**
<p>Sets the left edge of the rectangle to the given <i>x</i> coordinate. May change the width, but will never change the right edge of the rectangle.</p>
<p>Equivalent to setLeft().</p>

*/"/>
    <method name="public final void setY(double pos__0)" doc="/**
<p>Sets the top edge of the rectangle to the given <i>y</i> coordinate. May change the height, but will never change the bottom edge of the rectangle.</p>
<p>Equivalent to setTop().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSizeF size()" doc="/**
<p>Returns the size of the rectangle.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect toRect()" doc="/**
<p>Returns a QRect based on the values of this rectangle. Note that the coordinates in the returned rectangle are rounded to the nearest integer.</p>

*/"/>
    <method name="public final double top()" doc="/**
<p>Returns the y-coordinate of the rectangle's top edge. Equivalent to y().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF topLeft()" doc="/**
<p>Returns the position of the rectangle's top-left corner.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF topRight()" doc="/**
<p>Returns the position of the rectangle's top-right corner.</p>

*/"/>
    <method name="public final void translate(double dx__0, double dy__1)" doc="/**
<p>Moves the rectangle <i>dx</i> along the x-axis and <i>dy</i> along the y-axis, relative to the current position. Positive values move the rectangle to the right and downwards.</p>

*/"/>
    <method name="public final void translate(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Moves the rectangle <i>offset</i>.x() along the x axis and <i>offset</i>.y() along the y axis, relative to the current position.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF translated(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Returns a copy of the rectangle that is translated <i>offset</i>.x() along the x axis and <i>offset</i>.y() along the y axis, relative to the current position.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF translated(double dx__0, double dy__1)" doc="/**
<p>Returns a copy of the rectangle that is translated <i>dx</i> along the x axis and <i>dy</i> along the y axis, relative to the current position. Positive values move the rectangle to the right and down.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF unite(com.trolltech.qt.core.QRectF r__0)" doc="/**
<p>Use united(<i>rectangle</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF united(com.trolltech.qt.core.QRectF other__0)" doc="/**
<p>Returns the bounding rectangle of this rectangle and the given <i>rectangle</i>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qrect-unite.png]</font></p>
*/"/>
    <method name="public final double width()" doc="/**
<p>Returns the width of the rectangle.</p>

*/"/>
    <method name="public final double x()" doc="/**
<p>Returns the x-coordinate of the rectangle's left edge. Equivalent to left().</p>

*/"/>
    <method name="public final double y()" doc="/**
<p>Returns the y-coordinate of the rectangle's top edge. Equivalent to top().</p>

*/"/>
</class>
