<class name="QMatrix" doc="/**
<p>The QMatrix class specifies 2D transformations of a coordinate system.</p>
<p>A matrix specifies how to translate, scale, shear or rotate the coordinate system, and is typically used when rendering graphics.</p>
<p>A QMatrix object can be built using the setMatrix(), scale(), rotate(), translate() and shear() functions. Alternatively, it can be built by applying basic matrix operations. The matrix can also be defined when constructed, and it can be reset to the identity matrix (the default) using the reset() function.</p>
<p>The QMatrix class supports mapping of graphic primitives: A given point, line, polygon, region, or painter path can be mapped to the coordinate system defined by <i>this</i> matrix using the map() function. In case of a rectangle, its coordinates can be transformed using the mapRect() function. A rectangle can also be transformed into a <i>polygon</i> (mapped to the coordinate system defined by <i>this</i> matrix), using the mapToPolygon() function.</p>
<p>QMatrix provides the isIdentity() function which returns true if the matrix is the identity matrix, and the isInvertible() function which returns true if the matrix is non-singular (i.e. AB = BA = I). The inverted() function returns an inverted copy of <i>this</i> matrix if it is invertible (otherwise it returns the identity matrix). In addition, QMatrix provides the det() function returning the matrix's determinant.</p>
<p>Finally, the QMatrix class supports matrix multiplication, and objects of the class can be streamed as well as compared.</p>
<ul><li><a href=&quote;#rendering-graphics&quote;>Rendering Graphics</a></li>
<li><a href=&quote;#basic-matrix-operations&quote;>Basic Matrix Operations</a></li>
</ul>
<a name=&quote;rendering-graphics&quote;></a>
<h3>Rendering Graphics</h3>
<p>When rendering graphics, the matrix defines the transformations but the actual transformation is performed by the drawing routines in QPainter.</p>
<p>By default, QPainter operates on the associated device's own coordinate system. The standard coordinate system of a QPaintDevice has its origin located at the top-left position. The <i>x</i> values increase to the right; <i>y</i> values increase downward. For a complete description, see the coordinate system documentation.</p>
<p>QPainter has functions to translate, scale, shear and rotate the coordinate system without using a QMatrix. For example:</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qmatrix-simpletransformation]</font></td><td><pre>    void SimpleTransformation::paintEvent(QPaintEvent *)
    {
        QPainter painter(this);
        painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));
        painter.drawRect(0, 0, 100, 100);

        painter.rotate(45);

        painter.setFont(QFont(&quot;Helvetica&quot;, 24));
        painter.setPen(QPen(Qt::black, 1));
        painter.drawText(20, 10, &quot;QMatrix&quot;);
    }</pre>
</td></tr>
</table></p>
<p>Although these functions are very convenient, it can be more efficient to build a QMatrix and call QPainter::setMatrix() if you want to perform more than a single transform operation. For example:</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qmatrix-combinedtransformation.png]</font></td><td><pre>    void CombinedTransformation::paintEvent(QPaintEvent *)
    {
        QPainter painter(this);
        painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));
        painter.drawRect(0, 0, 100, 100);

        QMatrix matrix;
        matrix.translate(50, 50);
        matrix.rotate(45);
        matrix.scale(0.5, 1.0);
        painter.setMatrix(matrix);

        painter.setFont(QFont(&quot;Helvetica&quot;, 24));
        painter.setPen(QPen(Qt::black, 1));
        painter.drawText(20, 10, &quot;QMatrix&quot;);
    }</pre>
</td></tr>
</table></p>
<a name=&quote;basic-matrix-operations&quote;></a>
<h3>Basic Matrix Operations</h3>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qmatrix-representation.png]</font></p><p>A QMatrix object contains a 3 x 3 matrix. The <tt>dx</tt> and <tt>dy</tt> elements specify horizontal and vertical translation. The <tt>m11</tt> and <tt>m22</tt> elements specify horizontal and vertical scaling. And finally, the <tt>m21</tt> and <tt>m12</tt> elements specify horizontal and vertical <i>shearing</i>.</p>
<p>QMatrix transforms a point in the plane to another point using the following formulas:</p>
<pre>    x' = m11*x + m21*y + dx
    y' = m22*y + m12*x + dy</pre>
<p>The point <i>(x, y)</i> is the original point, and <i>(x', y')</i> is the transformed point. <i>(x', y')</i> can be transformed back to <i>(x, y)</i> by performing the same operation on the inverted() matrix.</p>
<p>The various matrix elements can be set when constructing the matrix, or by using the setMatrix() function later on. They also be manipulated using the translate(), rotate(), scale() and shear() convenience functions, The currently set values can be retrieved using the m11(), m12(), m21(), m22(), dx() and dy() functions.</p>
<p>Translation is the simplest transformation. Setting <tt>dx</tt> and <tt>dy</tt> will move the coordinate system <tt>dx</tt> units along the X axis and <tt>dy</tt> units along the Y axis. Scaling can be done by setting <tt>m11</tt> and <tt>m22</tt>. For example, setting <tt>m11</tt> to 2 and <tt>m22</tt> to 1.5 will double the height and increase the width by 50%. The identity matrix has <tt>m11</tt> and <tt>m22</tt> set to 1 (all others are set to 0) mapping a point to itself. Shearing is controlled by <tt>m12</tt> and <tt>m21</tt>. Setting these elements to values different from zero will twist the coordinate system. Rotation is achieved by carefully setting both the shearing factors and the scaling factors.</p>
<p>Here's the combined transformations example using basic matrix operations:</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qmatrix-combinedtransformation.png]</font></td><td><pre>    void BasicOperations::paintEvent(QPaintEvent *)
    {
        double pi = 3.14;

        double a    = pi/180 * 45.0;
        double sina = sin(a);
        double cosa = cos(a);

        QMatrix translationMatrix(1, 0, 0, 1, 50.0, 50.0);
        QMatrix rotationMatrix(cosa, sina, -sina, cosa, 0, 0);
        QMatrix scalingMatrix(0.5, 0, 0, 1.0, 0, 0);

        QMatrix matrix;
        matrix =  scalingMatrix * rotationMatrix * translationMatrix;

        QPainter painter(this);
        painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));
        painter.drawRect(0, 0, 100, 100);

        painter.setMatrix(matrix);

        painter.setFont(QFont(&quot;Helvetica&quot;, 24));
        painter.setPen(QPen(Qt::black, 1));
        painter.drawText(20, 10, &quot;QMatrix&quot;);
    }</pre>
</td></tr>
</table></p>

*/">
    <method name="public QMatrix()" doc="/**
<p>Constructs an identity matrix.</p>
<p>All elements are set to zero except <tt>m11</tt> and <tt>m22</tt> (specifying the scale), which are set to 1.</p>

*/"/>
    <method name="public QMatrix(double m11__0, double m12__1, double m21__2, double m22__3, double dx__4, double dy__5)" doc="/**
<p>Constructs a matrix with the elements, <i>m11</i>, <i>m12</i>, <i>m21</i>, <i>m22</i>, <i>dx</i> and <i>dy</i>.</p>

*/"/>
    <method name="public QMatrix(com.trolltech.qt.gui.QMatrix matrix__0)" doc="/**
<p>Constructs a matrix that is a copy of the given <i>matrix</i>.</p>

*/"/>
    <method name="public final double det()" doc="/**
<p>Returns the matrix's determinant.</p>

*/"/>
    <method name="public final double dx()" doc="/**
<p>Returns the horizontal translation factor.</p>

*/"/>
    <method name="public final double dy()" doc="/**
<p>Returns the vertical translation factor.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QMatrix inverted(com.trolltech.qt.QNativePointer invertible__0)" doc="/**
<p>Returns an inverted copy of this matrix.</p>
<p>If the matrix is singular (not invertible), the returned matrix is the identity matrix. If <i>invertible</i> is valid (i.e. not 0), its value is set to true if the matrix is invertible, otherwise it is set to false.</p>

*/"/>
    <method name="public final boolean isIdentity()" doc="/**
<p>Returns true if the matrix is the identity matrix, otherwise returns false.</p>

*/"/>
    <method name="public final boolean isInvertible()" doc="/**
<p>Returns true if the matrix is invertible, otherwise returns false.</p>

*/"/>
    <method name="public final double m11()" doc="/**
<p>Returns the horizontal scaling factor.</p>

*/"/>
    <method name="public final double m12()" doc="/**
<p>Returns the vertical shearing factor.</p>

*/"/>
    <method name="public final double m21()" doc="/**
<p>Returns the horizontal shearing factor.</p>

*/"/>
    <method name="public final double m22()" doc="/**
<p>Returns the vertical scaling factor.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPolygon map(com.trolltech.qt.gui.QPolygon a__0)" doc="/**
<p>Creates and returns a QPolygon object that is a copy of the given <i>polygon</i>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPainterPath map(com.trolltech.qt.gui.QPainterPath p__0)" doc="/**
<p>Creates and returns a QPainterPath object that is a copy of the given <i>path</i>, mapped into the coordinate system defined by this matrix.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QRegion map(com.trolltech.qt.gui.QRegion r__0)" doc="/**
<p>Creates and returns a QRegion object that is a copy of the given <i>region</i>, mapped into the coordinate system defined by this matrix.</p>
<p>Calling this method can be rather expensive if rotations or shearing are used.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QLine map(com.trolltech.qt.gui.QLine l__0)" doc="/**
<p>Creates and returns a QLine object that is a copy of the given <i>line</i>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</p>

*/"/>
    <method name="public final void map(int x__0, int y__1, com.trolltech.qt.QNativePointer tx__2, com.trolltech.qt.QNativePointer ty__3)" doc="/**
<p>Maps the given coordinates <i>x</i> and <i>y</i> into the coordinate system defined by this matrix. The resulting values are put in *<i>tx</i> and *<i>ty</i>, respectively. Note that the transformed coordinates are rounded to the nearest integer.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF map(com.trolltech.qt.core.QPointF p__0)" doc="/**
<p>Creates and returns a QPointF object that is a copy of the given <i>point</i>, mapped into the coordinate system defined by this matrix.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPolygonF map(com.trolltech.qt.gui.QPolygonF a__0)" doc="/**
<p>Creates and returns a QPolygonF object that is a copy of the given <i>polygon</i>, mapped into the coordinate system defined by this matrix.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint map(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Creates and returns a QPoint object that is a copy of the given <i>point</i>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QLineF map(com.trolltech.qt.gui.QLineF l__0)" doc="/**
<p>Creates and returns a QLineF object that is a copy of the given <i>line</i>, mapped into the coordinate system defined by this matrix.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect mapRect(com.trolltech.qt.core.QRect arg__0)" doc="/**
<p>Creates and returns a QRect object that is a copy of the given <i>rectangle</i>, mapped into the coordinate system defined by this matrix. Note that the transformed coordinates are rounded to the nearest integer.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRectF mapRect(com.trolltech.qt.core.QRectF arg__0)" doc="/**
<p>Creates and returns a QRectF object that is a copy of the given <i>rectangle</i>, mapped into the coordinate system defined by this matrix.</p>
<p>The rectangle's coordinates are transformed using the following formulas:</p>
<pre>    x' = m11*x + m21*y + dx
    y' = m22*y + m12*x + dy</pre>
<p>If rotation or shearing has been specified, this function returns the <i>bounding</i> rectangle. To retrieve the exact region the given <i>rectangle</i> maps to, use the mapToPolygon() function instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPolygon mapToPolygon(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Creates and returns a QPolygon representation of the given <i>rectangle</i>, mapped into the coordinate system defined by this matrix.</p>
<p>The rectangle's coordinates are transformed using the following formulas:</p>
<pre>    x' = m11*x + m21*y + dx
    y' = m22*y + m12*x + dy</pre>
<p>Polygons and rectangles behave slightly differently when transformed (due to integer rounding), so <tt>matrix.map(QPolygon(rectangle))</tt> is not always the same as <tt>matrix.mapToPolygon(rectangle)</tt>.</p>

*/"/>
    <method name="public final void reset()" doc="/**
<p>Resets the matrix to an identity matrix, i.e. all elements are set to zero, except <tt>m11</tt> and <tt>m22</tt> (specifying the scale) which are set to 1.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer rotate(double a__0)" doc="/**
<p>Rotates the coordinate system the given <i>degrees</i> counterclockwise.</p>
<p>Note that if you apply a QMatrix to a point defined in widget coordinates, the direction of the rotation will be clockwise because the y-axis points downwards.</p>
<p>Returns a reference to the matrix.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer scale(double sx__0, double sy__1)" doc="/**
<p>Scales the coordinate system by <i>sx</i> horizontally and <i>sy</i> vertically, and returns a reference to the matrix.</p>

*/"/>
    <method name="public final void setMatrix(double m11__0, double m12__1, double m21__2, double m22__3, double dx__4, double dy__5)" doc="/**
<p>Sets the matrix elements to the specified values, <i>m11</i>, <i>m12</i>, <i>m21</i>, <i>m22</i>, <i>dx</i> and <i>dy</i>.</p>
<p>Note that this function replaces the previous values. QMatrix provide the translate(), rotate(), scale() and shear() convenience functions to manipulate the various matrix elements based on the currently defined coordinate system.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer shear(double sh__0, double sv__1)" doc="/**
<p>Shears the coordinate system by <i>sh</i> horizontally and <i>sv</i> vertically, and returns a reference to the matrix.</p>

*/"/>
    <method name="public final com.trolltech.qt.QNativePointer translate(double dx__0, double dy__1)" doc="/**
<p>Moves the coordinate system <i>dx</i> along the x axis and <i>dy</i> along the y axis, and returns a reference to the matrix.</p>

*/"/>
</class>
