<class name="QGraphicsPixmapItem" doc="/**
<p>The QGraphicsPixmapItem class provides a pixmap item that you can add to a QGraphicsScene.</p>
<p>To set the item's pixmap, pass a QPixmap to QGraphicsPixmapItem's constructor, or call the setPixmap() function. The pixmap() function returns the current pixmap.</p>
<p>QGraphicsPixmapItem uses pixmap's optional alpha mask to provide a reasonable implementation of boundingRect(), shape(), and contains().</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image graphicsview-pixmapitem.png]</font></p><p>The pixmap is drawn at the item's (0, 0) coordinate, as returned by offset(). You can change the drawing offset by calling setOffset().</p>
<p>You can set the pixmap's transformation mode by calling setTransformationMode(). By default, Qt::FastTransformation is used, which provides fast, non-smooth scaling. Call transformationMode() to get the current transformation mode for the item.</p>

*/">
    <method name="public QGraphicsPixmapItem(com.trolltech.qt.gui.QGraphicsItemInterface parent__0, com.trolltech.qt.gui.QGraphicsScene scene__1)" doc="/**
<p>Constructs a QGraphicsPixmapItem. The <i>parent</i> and <i>scene</i> parameteres are passed to QGraphicsItem's constructor.</p>

*/"/>
    <method name="public QGraphicsPixmapItem(com.trolltech.qt.gui.QPixmap pixmap__0, com.trolltech.qt.gui.QGraphicsItemInterface parent__1, com.trolltech.qt.gui.QGraphicsScene scene__2)" doc="/**
<p>Constructs a QGraphicsPixmapItem, using <i>pixmap</i> as the default pixmap. The <i>parent</i> and <i>scene</i> parameteres are passed to QGraphicsItem's constructor.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPointF offset()" doc="/**
<p>Returns the pixmap item's <i>offset</i>, which defines the point of the top-left corner of the pixmap, in local coordinates.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QPixmap pixmap()" doc="/**
<p>Returns the item's pixmap, or an invalid QPixmap if no pixmap has been set.</p>

*/"/>
    <method name="public final void setOffset(com.trolltech.qt.core.QPointF offset__0)" doc="/**
<p>Sets the pixmap item's offset to <i>offset</i>. QGraphicsPixmapItem will draw its pixmap using <i>offset</i> for its top-left corner.</p>

*/"/>
    <method name="public final void setPixmap(com.trolltech.qt.gui.QPixmap pixmap__0)" doc="/**
<p>Sets the item's pixmap to <i>pixmap</i>.</p>

*/"/>
    <method name="public final void setShapeMode(com.trolltech.qt.gui.QGraphicsPixmapItem.ShapeMode mode__0)" doc="/**
<p>Sets the item's shape mode to <i>mode</i>. The shape mode describes how QGraphicsPixmapItem calculates its shape. The default mode is MaskShape.</p>

*/"/>
    <method name="public final void setTransformationMode(com.trolltech.qt.core.Qt.TransformationMode mode__0)" doc="/**
<p>Sets the pixmap item's transformation mode to <i>mode</i>, and toggles an update of the item. The default mode is Qt::FastTransformation, which provides quick transformation with no smoothing.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QGraphicsPixmapItem.ShapeMode shapeMode()" doc="/**
<p>Returns the item's shape mode. The shape mode describes how QGraphicsPixmapItem calculates its shape. The default mode is MaskShape.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.Qt.TransformationMode transformationMode()" doc="/**
<p>Returns the transformation mode of the pixmap. The default mode is Qt::FastTransformation, which provides quick transformation with no smoothing.</p>

*/"/>
    <method name="public com.trolltech.qt.core.QRectF boundingRect()"/>
    <method name="public boolean contains(com.trolltech.qt.core.QPointF point__0)"/>
    <method name="public java.lang.Object data(int key__0)"/>
    <method name="public java.lang.Object extension(java.lang.Object variant__0)"/>
    <method name="public boolean isEnabled()"/>
    <method name="public boolean isObscuredBy(com.trolltech.qt.gui.QGraphicsItemInterface item__0)"/>
    <method name="public com.trolltech.qt.core.QPointF mapFromItem(com.trolltech.qt.gui.QGraphicsItemInterface item__0, double x__1, double y__2)"/>
    <method name="public com.trolltech.qt.core.QPointF mapFromParent(double x__0, double y__1)"/>
    <method name="public com.trolltech.qt.core.QPointF mapToItem(com.trolltech.qt.gui.QGraphicsItemInterface item__0, double x__1, double y__2)"/>
    <method name="public com.trolltech.qt.core.QPointF mapToParent(double x__0, double y__1)"/>
    <method name="public com.trolltech.qt.gui.QMatrix matrix()"/>
    <method name="public com.trolltech.qt.gui.QPainterPath opaqueArea()"/>
    <method name="public void paint(com.trolltech.qt.gui.QPainter painter__0, com.trolltech.qt.gui.QStyleOptionGraphicsItem option__1, com.trolltech.qt.gui.QWidget widget__2)"/>
    <method name="public void setData(int key__0, java.lang.Object value__1)"/>
    <method name="public void setExtension(com.trolltech.qt.gui.QGraphicsItem.Extension extension__0, java.lang.Object variant__1)" doc="/**
<p>Note: This is provided as a hook to avoid future problems related to adding virtual functions.</p>

*/"/>
    <method name="public void setPos(double x__0, double y__1)"/>
    <method name="public com.trolltech.qt.gui.QPainterPath shape()"/>
    <method name="public boolean supportsExtension(com.trolltech.qt.gui.QGraphicsItem.Extension extension__0)" doc="/**
<p>Note: This is provided as a hook to avoid future problems related to adding virtual functions.</p>

*/"/>
    <method name="public int type()"/>
    <enum name="ShapeMode" doc="/**
<p>This enum describes how QGraphicsPixmapItem calculates its shape.</p>
<p>The default value is MaskShape.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The shape is determined by calling QPixmap::mask(). This shape includes only the opaque pixels of the pixmap. Because the shape is more complex, however, it can be slower than the other modes, and uses more memory.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The shape is determined by tracing the outline of the pixmap. This is the fastest shape mode, but it does not take into account any transparent areas on the pixmap.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>The shape is determine by calling QPixmap::createHeuristicMask(). The performance and memory consumption is similar to MaskShape.</td></tr>
</table></p>

*/"/>
</class>
