<class name="QSqlRelationalTableModel" doc="/**
<p>The QSqlRelationalTableModel class provides an editable data model for a single database table, with foreign key support.</p>
<p>QSqlRelationalTableModel acts like QSqlTableModel, but allows columns to be set as foreign keys into other database tables.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image noforeignkeys.png]</font></td><td><font color=&quote;red&quote;>[Missing image foreignkeys.png]</font></td></tr>
</table></p>
<p>The screenshot on the left shows a plain QSqlTableModel in a QTableView. Foreign keys (<tt>city</tt> and <tt>country</tt>) aren't resolved to human-readable values. The screenshot on the right shows a QSqlRelationalTableModel, with foreign keys resolved into human-readable text strings.</p>
<p>The following code snippet shows how the QSqlRelationalTableModel was set up:</p>
<pre>        model-&gt;setTable(&quot;employee&quot;);

        model-&gt;setRelation(2, QSqlRelation(&quot;city&quot;, &quot;id&quot;, &quot;name&quot;));
        model-&gt;setRelation(3, QSqlRelation(&quot;country&quot;, &quot;id&quot;, &quot;name&quot;));</pre>
<p>The setRelation() function calls establish a relationship between two tables. The first call specifies that column 2 in table <tt>employee</tt> is a foreign key that maps with field <tt>id</tt> of table <tt>city</tt>, and that the view should present the <tt>city</tt>'s <tt>name</tt> field to the user. The second call does something similar with column 3.</p>
<p>If you use a read-write QSqlRelationalTableModel, you probably want to use QSqlRelationalDelegate on the view. Unlike the default delegate, QSqlRelationalDelegate provides a combobox for fields that are foreign keys into other tables. To use the class, simply call QAbstractItemView::setItemDelegate() on the view with an instance of QSqlRelationalDelegate:</p>
<pre>        QTableView *view = new QTableView;
        view-&gt;setModel(model);
        view-&gt;setItemDelegate(new QSqlRelationalDelegate(view));</pre>
<p>The sql/relationaltablemodel example illustrates how to use QSqlRelationalTableModel in conjunction with QSqlRelationalDelegate to provide tables with foreigh key support.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image relationaltable.png]</font></p><p>Notes:</p>
<ul>
<li>The table's primary key may not contain a relation to another table.</li>
<li>If a relational table contains keys that refer to non-existent rows in the referenced table, the rows containing the invalid keys will not be exposed through the model. The user or the database is responsible for keeping referential integrity.</li>
</ul>

*/">
    <method name="public QSqlRelationalTableModel(com.trolltech.qt.core.QObject parent__0, com.trolltech.qt.sql.QSqlDatabase db__1)" doc="/**
<p>Creates an empty QSqlRelationalTableModel and sets the parent to <i>parent</i> and the database connection to <i>db</i>. If <i>db</i> is not valid, the default database connection will be used.</p>

*/"/>
    <method name="public final com.trolltech.qt.sql.QSqlRelation relation(int column__0)" doc="/**
<p>Returns the relation for the column <i>column</i>, or an invalid relation if no relation is set.</p>

*/"/>
    <method name="public void clear()"/>
    <method name="public java.lang.Object data(com.trolltech.qt.core.QModelIndex item__0, int role__1)"/>
    <method name="protected boolean insertRowIntoTable(com.trolltech.qt.sql.QSqlRecord values__0)"/>
    <method name="protected java.lang.String orderByClause()"/>
    <method name="public com.trolltech.qt.sql.QSqlTableModel relationModel(int column__0)" doc="/**
<p>Returns a QSqlTableModel object for accessing the table for which <i>column</i> is a foreign key, or 0 if there is no relation for the given <i>column</i>.</p>
<p>The returned object is owned by the QSqlRelationalTableModel.</p>

*/"/>
    <method name="public boolean removeColumns(int column__0, int count__1, com.trolltech.qt.core.QModelIndex parent__2)"/>
    <method name="public void revertRow(int row__0)"/>
    <method name="public boolean select()"/>
    <method name="protected java.lang.String selectStatement()"/>
    <method name="public boolean setData(com.trolltech.qt.core.QModelIndex item__0, java.lang.Object value__1, int role__2)" doc="/**
<p>Sets the data for the <i>role</i> in the item with the specified <i>index</i> to the <i>value</i> given. Depending on the edit strategy, the value might be applied to the database at once, or it may be cached in the model.</p>
<p>Returns true if the value could be set, or false on error (for example, if <i>index</i> is out of bounds).</p>
<p>For relational columns, <i>value</i> must be the index, not the display value.</p>

*/"/>
    <method name="public void setRelation(int column__0, com.trolltech.qt.sql.QSqlRelation relation__1)" doc="/**
<p>Lets the specified <i>column</i> be a foreign index specified by <i>relation</i>.</p>
<p>Example:</p>
<pre>        model-&gt;setTable(&quot;employee&quot;);

        model-&gt;setRelation(2, QSqlRelation(&quot;city&quot;, &quot;id&quot;, &quot;name&quot;));</pre>
<p>The setRelation() call specifies that column 2 in table <tt>employee</tt> is a foreign key that maps with field <tt>id</tt> of table <tt>city</tt>, and that the view should present the <tt>city</tt>'s <tt>name</tt> field to the user.</p>
<p>Note: The table's primary key may not contain a relation to another table.</p>

*/"/>
    <method name="public void setTable(java.lang.String tableName__0)"/>
    <method name="protected boolean updateRowInTable(int row__0, com.trolltech.qt.sql.QSqlRecord values__1)"/>
</class>
