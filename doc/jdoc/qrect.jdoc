<class name="QRect" doc="/**
<p>The QRect class defines a rectangle in the plane using integer precision.</p>
<p>A rectangle is normally expressed as an upper-left corner and a size. The size (width and height) of a QRect is always equivalent to the mathematical rectangle that forms the basis for its rendering.</p>
<p>A QRect can be constructed with a set of left, top, width and height integers, or from a QPoint and a QSize. The following code creates two identical rectangles.</p>
<pre>    QRect r1(100, 200, 11, 16);
    QRect r2(QPoint(100, 200), QSize(11, 16));</pre>
<p>There is a third constructor that creates a QRect using the top-left and bottom-right coordinates, but we recommend that you avoid using it. The rationale is that for historical reasons the values returned by the bottom() and right() functions deviate from the true bottom-right corner of the rectangle.</p>
<p>The QRect class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. QRect also provide functions to move the rectangle relative to the various coordinates. In addition there is a moveTo() function that moves the rectangle, leaving its top left corner at the given coordinates. Alternatively, the translate() function moves the rectangle the given offset relative to the current position, and the translated() function returns a translated copy of this rectangle.</p>
<p>The size() function returns the rectange's dimensions as a QSize. The dimensions can also be retrieved separately using the width() and height() functions. To manipulate the dimensions use the setSize(), setWidth() or setHeight() functions. Alternatively, the size can be changed by applying either of the functions setting the rectangle coordinates, for example, setBottom() or setRight().</p>
<p>The contains() function tells whether a given point is inside the rectangle or not, and the intersects() function returns true if this rectangle intersects with a given rectangle. The QRect class also provides the intersected() function which returns the intersection rectangle, and the united() function which returns the rectangle that encloses the given rectangle and this:</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qrect-intersect.png]</font></td><td><font color=&quote;red&quote;>[Missing image qrect-unite.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>intersected()</td><td>united()</td></tr>
</table></p>
<p>The isEmpty() function returns true if left() &gt; right() or top() &gt; bottom(). Note that an empty rectangle is not valid: The isValid() function returns true if left() &lt;= right() <i>and</i> top() &lt;= bottom(). A null rectangle (isNull() == true) on the other hand, has both width and height set to 0.</p>
<p>Finally, QRect objects can be streamed as well as compared.</p>
<ul><li><a href=&quote;#rendering&quote;>Rendering</a></li>
<li><a href=&quote;#coordinates&quote;>Coordinates</a></li>
</ul>
<a name=&quote;rendering&quote;></a>
<h3>Rendering</h3>
<p>When using an anti-aliased painter, the boundary line of a QRect will be rendered symmetrically on both sides of the mathematical rectangle's boundary line. But when using an aliased painter (the default) other rules apply.</p>
<p>Then, when rendering with a one pixel wide pen the QRect's boundary line will be rendered to the right and below the mathematical rectangle's boundary line.</p>
<p>When rendering with a two pixels wide pen the boundary line will be split in the middle by the mathematical rectangle. This will be the case whenever the pen is set to an even number of pixels, while rendering with a pen with an odd number of pixels, the spare pixel will be rendered to the right and below the mathematical rectangle as in the one pixel case.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qrect-diagram-zero.png]</font></td><td><font color=&quote;red&quote;>[Missing image qrect-diagram-one.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Logical representation</td><td>One pixel wide pen</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qrect-diagram-two.png]</font></td><td><font color=&quote;red&quote;>[Missing image qrect-diagram-three.png]</font></td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td>Two pixel wide pen</td><td>Three pixel wide pen</td></tr>
</table></p>
<a name=&quote;coordinates&quote;></a>
<h3>Coordinates</h3>
<p>The QRect class provides a collection of functions that return the various rectangle coordinates, and enable manipulation of these. QRect also provide functions to move the rectangle relative to the various coordinates.</p>
<p>For example the left(), setLeft() and moveLeft() functions as an example: left() returns the x-coordinate of the rectangle's left edge, setLeft() sets the left edge of the rectangle to the given x coordinate (it may change the width, but will never change the rectangle's right edge) and moveLeft() moves the entire rectangle horizontally, leaving the rectangle's left edge at the given x coordinate and its size unchanged.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qrect-coordinates.png]</font></p><p>Note that for historical reasons the values returned by the bottom() and right() functions deviate from the true bottom-right corner of the rectangle: The right() function returns <i> left() + width() - 1</i> and the bottom() function returns <i>top() + height() - 1</i>. The same is the case for the point returned by the bottomRight() convenience function. In addition, the x and y coordinate of the topRight() and bottomLeft() functions, respectively, contain the same deviation from the true right and bottom edges.</p>
<p>We recommend that you use x() + width() and y() + height() to find the true bottom-right corner, and avoid right() and bottom(). Another solution is to use QRectF: The QRectF class defines a rectangle in the plane using floating point accuracy for coordinates, and the QRectF::right() and QRectF::bottom() functions <i>do</i> return the true bottom-right corner.</p>
<p>It is also possible to add offsets to this rectangle's coordinates using the adjust() function, as well as retrieve a new rectangle based on adjustments of the original one using the adjusted() function. If either of the width and height is negative, use the normalized() function to retrieve a rectangle where the corners are swapped.</p>
<p>In addition, QRect provides the getCoords() function which extracts the position of the rectangle's top-left and bottom-right corner, and the getRect() function which extracts the rectangle's top-left corner, width and height. Use the setCoords() and setRect() function to manipulate the rectangle's coordinates and dimensions in one go.</p>

*/">
    <method name="public QRect(int left__0, int top__1, int width__2, int height__3)" doc="/**
<p>Constructs a rectangle with (<i>x</i>, <i>y</i>) as its top-left corner and the given <i>width</i> and <i>height</i>.</p>

*/"/>
    <method name="public QRect(com.trolltech.qt.core.QPoint topleft__0, com.trolltech.qt.core.QPoint bottomright__1)" doc="/**
<p>Constructs a rectangle with the given <i>topLeft</i> and <i>bottomRight</i> corners.</p>

*/"/>
    <method name="public QRect()" doc="/**
<p>Constructs a null rectangle.</p>

*/"/>
    <method name="public QRect(com.trolltech.qt.core.QPoint topleft__0, com.trolltech.qt.core.QSize size__1)" doc="/**
<p>Constructs a rectangle with the given <i>topLeft</i> corner and the given <i>size</i>.</p>

*/"/>
    <method name="public final void adjust(int x1__0, int y1__1, int x2__2, int y2__3)" doc="/**
<p>Adds <i>dx1</i>, <i>dy1</i>, <i>dx2</i> and <i>dy2</i> respectively to the existing coordinates of the rectangle.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect adjusted(int x1__0, int y1__1, int x2__2, int y2__3)" doc="/**
<p>Returns a new rectangle with <i>dx1</i>, <i>dy1</i>, <i>dx2</i> and <i>dy2</i> added respectively to the existing coordinates of this rectangle.</p>

*/"/>
    <method name="public final int bottom()" doc="/**
<p>Returns the y-coordinate of the rectangle's bottom edge.</p>
<p>Note that for historical reasons this function returns top() + height() - 1; use y() + height() to retrieve the true y-coordinate.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint bottomLeft()" doc="/**
<p>Returns the position of the rectangle's bottom-left corner. Note that for historical reasons this function returns QPoint(left(), top() + height() - 1).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint bottomRight()" doc="/**
<p>Returns the position of the rectangle's bottom-right corner.</p>
<p>Note that for historical reasons this function returns QPoint(left() + width() -1, top() + height() - 1).</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint center()" doc="/**
<p>Returns the center point of the rectangle.</p>

*/"/>
    <method name="public final boolean contains(com.trolltech.qt.core.QPoint p__0, boolean proper__1)" doc="/**
<p>Returns true if the the given <i>point</i> is inside or on the edge of the rectangle, otherwise returns false. If <i>proper</i> is true, this function only returns true if the given <i>point</i> is <i>inside</i> the rectangle (i.e. not on the edge).</p>

*/"/>
    <method name="public final boolean contains(int x__0, int y__1, boolean proper__2)" doc="/**
<p>Returns true if the point (<i>x</i>, <i>y</i>) is inside or on the edge of the rectangle, otherwise returns false. If <i>proper</i> is true, this function only returns true if the point is entirely inside the rectangle(not on the edge).</p>

*/"/>
    <method name="public final boolean contains(int x__0, int y__1)" doc="/**
<p>Returns true if the point (<i>x</i>, <i>y</i>) is inside this rectangle, otherwise returns false.</p>

*/"/>
    <method name="public final boolean contains(com.trolltech.qt.core.QRect r__0, boolean proper__1)" doc="/**
<p>Returns true if the given <i>rectangle</i> is inside this rectangle. otherwise returns false. If <i>proper</i> is true, this function only returns true if the <i>rectangle</i> is entirely inside this rectangle (not on the edge).</p>

*/"/>
    <method name="public final void getCoords(com.trolltech.qt.QNativePointer x1__0, com.trolltech.qt.QNativePointer y1__1, com.trolltech.qt.QNativePointer x2__2, com.trolltech.qt.QNativePointer y2__3)" doc="/**
<p>Extracts the position of the rectangle's top-left corner to *<i>x1</i> and *<i>y1</i>, and the position of the bottom-right corner to *<i>x2</i> and *<i>y2</i>.</p>

*/"/>
    <method name="public final void getRect(com.trolltech.qt.QNativePointer x__0, com.trolltech.qt.QNativePointer y__1, com.trolltech.qt.QNativePointer w__2, com.trolltech.qt.QNativePointer h__3)" doc="/**
<p>Extracts the position of the rectangle's top-left corner to *<i>x</i> and *<i>y</i>, and its dimensions to *<i>width</i> and *<i>height</i>.</p>

*/"/>
    <method name="public final int height()" doc="/**
<p>Returns the height of the rectangle.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect intersect(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Use intersected(<i>rectangle</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect intersected(com.trolltech.qt.core.QRect other__0)" doc="/**
<p>Returns the intersection of this rectangle and the given <i>rectangle</i>. Note that <tt>r.intersected(s)</tt> is equivalent to <tt>r &amp; s</tt>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qrect-intersect.png]</font></p>
*/"/>
    <method name="public final boolean intersects(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Returns true if this rectangle intersects with the given <i>rectangle</i> (i.e. there is at least one pixel that is within both rectangles), otherwise returns false.</p>
<p>The intersection rectangle can be retrieved using the intersected() function.</p>

*/"/>
    <method name="public final boolean isEmpty()" doc="/**
<p>Returns true if the rectangle is empty, otherwise returns false.</p>
<p>An empty rectangle has a left() &gt; right() or top() &gt; bottom(). An empty rectangle is not valid (i.e isEmpty() == !isValid()).</p>
<p>Use the normalized() function to retrieve a rectangle where the corners are swapped.</p>

*/"/>
    <method name="public final boolean isNull()" doc="/**
<p>Returns true if the rectangle is a null rectangle, otherwise returns false.</p>
<p>A null rectangle has both the width and the height set to 0 (i.e. right() == left() - 1 and bottom() == top() - 1). A null rectangle is also empty, and hence is not valid.</p>

*/"/>
    <method name="public final boolean isValid()" doc="/**
<p>Returns true if the rectangle is valid, otherwise returns false.</p>
<p>A valid rectangle has a left() &lt; right() and top() &lt; bottom(). Note that non-trivial operations like intersections are not defined for invalid rectangles. A valid rectangle is not empty (i.e. isValid() == !isEmpty()).</p>

*/"/>
    <method name="public final int left()" doc="/**
<p>Returns the x-coordinate of the rectangle's left edge. Equivalent to x().</p>

*/"/>
    <method name="public final void moveBottom(int pos__0)" doc="/**
<p>Moves the rectangle vertically, leaving the rectangle's bottom edge at the given <i>y</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveBottomLeft(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rectangle, leaving the bottom-left corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveBottomRight(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rectangle, leaving the bottom-right corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveCenter(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rectangle, leaving the center point at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveLeft(int pos__0)" doc="/**
<p>Moves the rectangle horizontally, leaving the rectangle's left edge at the given <i>x</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveRight(int pos__0)" doc="/**
<p>Moves the rectangle horizontally, leaving the rectangle's right edge at the given <i>x</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTo(int x__0, int t__1)" doc="/**
<p>Moves the rectangle, leaving the top-left corner at the given position (<i>x</i>, <i>y</i>). The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTo(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rectangle, leaving the top-left corner at the given <i>position</i>.</p>

*/"/>
    <method name="public final void moveTop(int pos__0)" doc="/**
<p>Moves the rectangle vertically, leaving the rectangle's top edge at the given <i>y</i> coordinate. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTopLeft(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rectangle, leaving the top-left corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final void moveTopRight(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rectangle, leaving the top-right corner at the given <i>position</i>. The rectangle's size is unchanged.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect normalized()" doc="/**
<p>Returns a normalized rectangle; i.e. a rectangle that has a non-negative width and height.</p>
<p>If width() &lt; 0 the function swaps the left and right corners, and it swaps the top and bottom corners if height() &lt; 0.</p>

*/"/>
    <method name="public final int right()" doc="/**
<p>Returns the x-coordinate of the rectangle's right edge.</p>
<p>Note that for historical reasons this function returns left() + width() - 1; use x() + width() to retrieve the true x-coordinate.</p>

*/"/>
    <method name="public final void setBottom(int pos__0)" doc="/**
<p>Sets the bottom edge of the rectangle to the given <i>y</i> coordinate. May change the height, but will never change the top edge of the rectangle.</p>

*/"/>
    <method name="public final void setBottomLeft(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Set the bottom-left corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the top-right corner of the rectangle.</p>

*/"/>
    <method name="public final void setBottomRight(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Set the bottom-right corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the top-left corner of the rectangle.</p>

*/"/>
    <method name="public final void setCoords(int x1__0, int y1__1, int x2__2, int y2__3)" doc="/**
<p>Sets the coordinates of the rectangle's top-left corner to (<i>x1</i>, <i>y1</i>), and the coordinates of its bottom-right corner to (<i>x2</i>, <i>y2</i>).</p>

*/"/>
    <method name="public final void setHeight(int h__0)" doc="/**
<p>Sets the height of the rectangle to the given <i>height</i>. The bottom edge is changed, but not the top one.</p>

*/"/>
    <method name="public final void setLeft(int pos__0)" doc="/**
<p>Sets the left edge of the rectangle to the given <i>x</i> coordinate. May change the width, but will never change the right edge of the rectangle.</p>
<p>Equivalent to setX().</p>

*/"/>
    <method name="public final void setRect(int x__0, int y__1, int w__2, int h__3)" doc="/**
<p>Sets the coordinates of the rectangle's top-left corner to (<i>x</i>, <i>y</i>), and its size to the given <i>width</i> and <i>height</i>.</p>

*/"/>
    <method name="public final void setRight(int pos__0)" doc="/**
<p>Sets the right edge of the rectangle to the given <i>x</i> coordinate. May change the width, but will never change the left edge of the rectangle.</p>

*/"/>
    <method name="public final void setSize(com.trolltech.qt.core.QSize s__0)" doc="/**
<p>Sets the size of the rectangle to the given <i>size</i>. The top-left corner is not moved.</p>

*/"/>
    <method name="public final void setTop(int pos__0)" doc="/**
<p>Sets the top edge of the rectangle to the given <i>y</i> coordinate. May change the height, but will never change the bottom edge of the rectangle.</p>
<p>Equivalent to setY().</p>

*/"/>
    <method name="public final void setTopLeft(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Set the top-left corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the bottom-right corner of the rectangle.</p>

*/"/>
    <method name="public final void setTopRight(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Set the top-right corner of the rectangle to the given <i>position</i>. May change the size, but will the never change the bottom-left corner of the rectangle.</p>

*/"/>
    <method name="public final void setWidth(int w__0)" doc="/**
<p>Sets the width of the rectangle to the given <i>width</i>. The right edge is changed, but not the left one.</p>

*/"/>
    <method name="public final void setX(int x__0)" doc="/**
<p>Sets the left edge of the rectangle to the given <i>x</i> coordinate. May change the width, but will never change the right edge of the rectangle.</p>
<p>Equivalent to setLeft().</p>

*/"/>
    <method name="public final void setY(int y__0)" doc="/**
<p>Sets the top edge of the rectangle to the given <i>y</i> coordinate. May change the height, but will never change the bottom edge of the rectangle.</p>
<p>Equivalent to setTop().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSize size()" doc="/**
<p>Returns the size of the rectangle.</p>

*/"/>
    <method name="public final int top()" doc="/**
<p>Returns the y-coordinate of the rectangle's top edge. Equivalent to y().</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint topLeft()" doc="/**
<p>Returns the position of the rectangle's top-left corner.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QPoint topRight()" doc="/**
<p>Returns the position of the rectangle's top-right corner.</p>
<p>Note that for historical reasons this function returns QPoint(left() + width() -1, top()).</p>

*/"/>
    <method name="public final void translate(int dx__0, int dy__1)" doc="/**
<p>Moves the rectangle <i>dx</i> along the x axis and <i>dy</i> along the y axis, relative to the current position. Positive values move the rectangle to the right and down.</p>

*/"/>
    <method name="public final void translate(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Moves the rectangle <i>offset</i>.x() along the x axis and <i>offset</i>.y() along the y axis, relative to the current position.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect translated(int dx__0, int dy__1)" doc="/**
<p>Returns a copy of the rectangle that is translated <i>dx</i> along the x axis and <i>dy</i> along the y axis, relative to the current position. Positive values move the rectangle to the right and down.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect translated(com.trolltech.qt.core.QPoint p__0)" doc="/**
<p>Returns a copy of the rectangle that is translated <i>offset</i>.x() along the x axis and <i>offset</i>.y() along the y axis, relative to the current position.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect unite(com.trolltech.qt.core.QRect r__0)" doc="/**
<p>Use united(<i>rectangle</i>) instead.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QRect united(com.trolltech.qt.core.QRect other__0)" doc="/**
<p>Returns the bounding rectangle of this rectangle and the given <i>rectangle</i>.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qrect-unite.png]</font></p>
*/"/>
    <method name="public final int width()" doc="/**
<p>Returns the width of the rectangle.</p>

*/"/>
    <method name="public final int x()" doc="/**
<p>Returns the x-coordinate of the rectangle's left edge. Equivalent to left().</p>

*/"/>
    <method name="public final int y()" doc="/**
<p>Returns the y-coordinate of the rectangle's top edge. Equivalent to top().</p>

*/"/>
</class>
