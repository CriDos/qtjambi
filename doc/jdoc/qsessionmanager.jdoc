<class name="QSessionManager" doc="/**
<p>The QSessionManager class provides access to the session manager.</p>
<p>The session manager is responsible for session management, most importantly for interruption and resumption. A &quot;session&quot; is a kind of record of the state of the system, e.g. which applications were run at start up and which applications are currently running. The session manager is used to save the session, e.g. when the machine is shut down; and to restore a session, e.g. when the machine is started up. Use QSettings to save and restore an individual application's settings, e.g. window positions, recently used files, etc.</p>
<p>QSessionManager provides an interface between the application and the session manager so that the program can work well with the session manager. In Qt, session management requests for action are handled by the two virtual functions QApplication::commitData() and QApplication::saveState(). Both provide a reference to a session manager object as argument, to allow the application to communicate with the session manager.</p>
<p>During a session management action (i.e. within commitData() and saveState()), no user interaction is possible <i>unless</i> the application got explicit permission from the session manager. You ask for permission by calling allowsInteraction() or, if it's really urgent, allowsErrorInteraction(). Qt does not enforce this, but the session manager may.</p>
<p>You can try to abort the shutdown process by calling cancel(). The default commitData() function does this if some top-level window rejected its closeEvent().</p>
<p>For sophisticated session managers provided on Unix/X11, QSessionManager offers further possibilites to fine-tune an application's session management behavior: setRestartCommand(), setDiscardCommand(), setRestartHint(), setProperty(), requestPhase2(). See the respective function descriptions for further details.</p>

*/">
    <method name="public final boolean allowsErrorInteraction()" doc="/**
<p>This is similar to allowsInteraction(), but also tells the session manager that an error occurred. Session managers may give error interaction request higher priority, which means that it is more likely that an error interaction is permitted. However, you are still not guaranteed that the session manager will allow interaction.</p>

*/"/>
    <method name="public final boolean allowsInteraction()" doc="/**
<p>Asks the session manager for permission to interact with the user. Returns true if interaction is permitted; otherwise returns false.</p>
<p>The rationale behind this mechanism is to make it possible to synchronize user interaction during a shutdown. Advanced session managers may ask all applications simultaneously to commit their data, resulting in a much faster shutdown.</p>
<p>When the interaction is completed we strongly recommend releasing the user interaction semaphore with a call to release(). This way, other applications may get the chance to interact with the user while your application is still busy saving data. (The semaphore is implicitly released when the application exits.)</p>
<p>If the user decides to cancel the shutdown process during the interaction phase, you must tell the session manager that this has happened by calling cancel().</p>
<p>Here's an example of how an application's QApplication::commitData() might be implemented:</p>
<pre>    void MyApplication::commitData(QSessionManager&amp; manager)
    {
        if (manager.allowsInteraction()) {
            int ret = QMessageBox::warning(
                        mainWindow,
                        tr(&quot;My Application&quot;),
                        tr(&quot;Save changes to document?&quot;),
                        QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);

            switch (ret) {
            case QMessageBox::Save:
                manager.release();
                if (!saveDocument())
                    manager.cancel();
                break;
            case QMessageBox::Discard:
                break;
            case QMessageBox::Cancel:
            default:
                manager.cancel();
            }
        } else {
            <span class=&quote;comment&quote;>// we did not get permission to interact, then</span>
            <span class=&quote;comment&quote;>// do something reasonable instead</span>
        }
    }</pre>
<p>If an error occurred within the application while saving its data, you may want to try allowsErrorInteraction() instead.</p>

*/"/>
    <method name="public final void cancel()" doc="/**
<p>Tells the session manager to cancel the shutdown process. Applications should not call this function without first asking the user.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; discardCommand()" doc="/**
<p>Returns the currently set discard command.</p>
<p>To iterate over the list, you can use the foreach pseudo-keyword:</p>
<pre>    foreach (QString command, mySession.discardCommand())
        do_something(command);</pre>

*/"/>
    <method name="public final boolean isPhase2()" doc="/**
<p>Returns true if the session manager is currently performing a second session management phase; otherwise returns false.</p>

*/"/>
    <method name="public final void release()" doc="/**
<p>Releases the session manager's interaction semaphore after an interaction phase.</p>

*/"/>
    <method name="public final void requestPhase2()" doc="/**
<p>Requests a second session management phase for the application. The application may then return immediately from the QApplication::commitData() or QApplication::saveState() function, and they will be called again once most or all other applications have finished their session management.</p>
<p>The two phases are useful for applications such as the X11 window manager that need to store information about another application's windows and therefore have to wait until these applications have completed their respective session management tasks.</p>
<p>Note that if another application has requested a second phase it may get called before, simultaneously with, or after your application's second phase.</p>

*/"/>
    <method name="public final java.util.List&lt;java.lang.String&gt; restartCommand()" doc="/**
<p>Returns the currently set restart command.</p>
<p>To iterate over the list, you can use the foreach pseudo-keyword:</p>
<pre>    foreach (QString command, mySession.restartCommand())
        do_something(command);</pre>

*/"/>
    <method name="public final com.trolltech.qt.gui.QSessionManager.RestartHint restartHint()" doc="/**
<p>Returns the application's current restart hint. The default is <tt>RestartIfRunning</tt>.</p>

*/"/>
    <method name="public final java.lang.String sessionId()" doc="/**
<p>Returns the identifier of the current session.</p>
<p>If the application has been restored from an earlier session, this identifier is the same as it was in that earlier session.</p>

*/"/>
    <method name="public final java.lang.String sessionKey()" doc="/**
<p>Returns the session key in the current session.</p>
<p>If the application has been restored from an earlier session, this key is the same as it was when the previous session ended.</p>
<p>The session key changes with every call of commitData() or saveState().</p>

*/"/>
    <method name="public final void setDiscardCommand(java.util.List&lt;java.lang.String&gt; arg__0)" doc="/**
<p>Sets the discard command to the given <i>list</i>.</p>

*/"/>
    <method name="public final void setManagerProperty(java.lang.String name__0, java.lang.String value__1)" doc="/**
<p>Low-level write access to the application's identification and state records are kept in the session manager.</p>
<p>The property called <i>name</i> has its value set to the string <i>value</i>.</p>

*/"/>
    <method name="public final void setRestartCommand(java.util.List&lt;java.lang.String&gt; arg__0)" doc="/**
<p>If the session manager is capable of restoring sessions it will execute <i>command</i> in order to restore the application. The command defaults to</p>
<pre>    appname -session id</pre>
<p>The <tt>-session</tt> option is mandatory; otherwise QApplication cannot tell whether it has been restored or what the current session identifier is. See QApplication::isSessionRestored() and QApplication::sessionId() for details.</p>
<p>If your application is very simple, it may be possible to store the entire application state in additional command line options. This is usually a very bad idea because command lines are often limited to a few hundred bytes. Instead, use QSettings, or temporary files or a database for this purpose. By marking the data with the unique sessionId(), you will be able to restore the application in a future session.</p>

*/"/>
    <method name="public final void setRestartHint(com.trolltech.qt.gui.QSessionManager.RestartHint arg__0)" doc="/**
<p>Sets the application's restart hint to <i>hint</i>. On application startup the hint is set to <tt>RestartIfRunning</tt>.</p>
<p>Note that these flags are only hints, a session manager may or may not respect them.</p>
<p>We recommend setting the restart hint in QApplication::saveState() because most session managers perform a checkpoint shortly after an application's startup.</p>

*/"/>
    <enum name="RestartHint" doc="/**
<p>This enum type defines the circumstances under which this application wants to be restarted by the session manager. The current values are</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>if the application is still running when the session is shut down, it wants to be restarted at the start of the next session.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>the application wants to be started at the start of the next session, no matter what. (This is useful for utilities that run just after startup and then quit.)</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>the application wants to be started immediately whenever it is not running.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>the application does not want to be restarted automatically.</td></tr>
</table></p>
<p>The default hint is <tt>RestartIfRunning</tt>.</p>

*/"/>
</class>
