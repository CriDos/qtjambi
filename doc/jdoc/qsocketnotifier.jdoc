<class name="QSocketNotifier" doc="/**
<p>The QSocketNotifier class provides support for monitoring activity on a file descriptor.</p>
<p>The QSocketNotifier makes it possible to integrate Qt's event loop with other event loops based on file descriptors. For example, the CORBA Framework uses it to process CORBA events. File descriptor action is detected in Qt's main event loop (QCoreApplication::exec()).</p>
<a name=&quote;write-notifiers&quote;></a><p>Once you have opened a device using a low-level (usually platform-specific) API, you can create a socket notifier to monitor the file descriptor. The socket notifier is enabled by default, i.e. it emits the activated() signal whenever a socket event corresponding to its type occurs. Connect the activated() signal to the slot you want to be called when an event corresponding to your socket notifier's type occurs.</p>
<p>There are three types of socket notifiers: read, write, and exception. The type is described by the Type enum, and must be specified when constructing the socket notifier. After construction it can be determined using the type() function. Note that if you need to monitor both reads and writes for the same file descriptor, you must create two socket notifiers. Note also that it is not possible to install two socket notifiers of the same type (Read, Write, Exception) on the same socket.</p>
<p>The setEnabled() function allows you to disable as well as enable the socket notifier. It is generally advisable to explicitly enable or disable the socket notifier, especially for write notifiers. A disabled notifier ignores socket events (the same effect as not creating the socket notifier). Use the isEnabled() function to determine the notifier's current status.</p>
<p>Finally, you can use the socket() function to retrieve the socket identifier. Although the class is called QSocketNotifier, it is normally used for other types of devices than sockets. QTcpSocket and QUdpSocket provide notification through signals, so there is normally no need to use a QSocketNotifier on them.</p>
<p><b>Notes for Windows users:</b> The socket passed to QSocketNotifier will become non-blocking, even if it was created as a blocking socket. The activated() signal is sometimes triggered by high general activity on the host, even if there is nothing to read. A subsequent read from the socket can then fail, the error indicating that there is no data available (e.g., WSAEWOULDBLOCK). This is an operating system limitation, and not a bug in QSocketNotifier.</p>

*/">
    <method name="public QSocketNotifier(int socket__0, com.trolltech.qt.core.QSocketNotifier.Type arg__1, com.trolltech.qt.core.QObject parent__2)" doc="/**
<p>Constructs a socket notifier with the given <i>parent</i>. It enables the <i>socket</i>, and watches for events of the given <i>type</i>.</p>
<p>It is generally advisable to explicitly enable or disable the socket notifier, especially for write notifiers.</p>
<p><b>Note for Windows users:</b> The socket passed to QSocketNotifier will become non-blocking, even if it was created as a blocking socket.</p>

*/"/>
    <method name="public final boolean isEnabled()" doc="/**
<p>Returns true if the notifier is enabled; otherwise returns false.</p>

*/"/>
    <method name="public final void setEnabled(boolean arg__0)" doc="/**
<p>If <i>enable</i> is true, the notifier is enabled; otherwise the notifier is disabled.</p>
<p>The notifier is enabled by default, i.e. it emits the activated() signal whenever a socket event corresponding to its type occurs. If it is disabled, it ignores socket events (the same effect as not creating the socket notifier).</p>
<p>Write notifiers should normally be disabled immediately after the activated() signal has been emitted</p>

*/"/>
    <method name="public final int socket()" doc="/**
<p>Returns the socket identifier specified to the constructor.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QSocketNotifier.Type type()" doc="/**
<p>Returns the socket event type specified to the constructor.</p>

*/"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent arg__0)"/>
    <enum name="Type" doc="/**
<p>This enum describes the various types of events that a socket notifier can recognize. The type must be specified when constructing the socket notifier.</p>
<p>Note that if you need to monitor both reads and writes for the same file descriptor, you must create two socket notifiers. Note also that it is not possible to install two socket notifiers of the same type (Read, Write, Exception) on the same socket.</p>
<p><table border=&quote;1&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; width=&quote;100%&quote;>
<tr><th width=&quote;25%&quote;>Constant</th><th width=&quote;15%&quote;>Value</th><th width=&quote;60%&quote;>Description</th></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>There is data to be read.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>Data can be written.</td></tr>
<tr><td valign=&quote;top&quote;><tt></tt></td><td align=&quote;center&quote; valign=&quote;top&quote;>&nbsp;</td><td valign=&quote;top&quote;>An exception has occurred. We recommend against using this.</td></tr>
</table></p>

*/"/>
</class>
