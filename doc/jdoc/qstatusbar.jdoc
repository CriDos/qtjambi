<class name="QStatusBar" doc="/**
<p>The QStatusBar class provides a horizontal bar suitable for presenting status information.</p>
<p>Each status indicator falls into one of three categories:</p>
<ul>
<li><i>Temporary</i> - briefly occupies most of the status bar. Used to explain tool tip texts or menu entries, for example.</li>
<li><i>Normal</i> - occupies part of the status bar and may be hidden by temporary messages. Used to display the page and line number in a word processor, for example.</li>
<li><i>Permanent</i> - is never hidden. Used for important mode indications, for example, some applications put a Caps Lock indicator in the status bar.</li>
</ul>
<p>QStatusBar lets you display all three types of indicators.</p>
<p>Typically, a request for the status bar functionality occurs in relation to a QMainWindow object. QMainWindow provides a main application window, with a menu bar, tool bars, dock widgets <i>and</i> a status bar around a large central widget. The status bar can be retrieved using the QMainWindow::statusBar() function, and replaced using the QMainWindow::setStatusBar() function.</p>
<p>Use the showMessage() slot to display a <i>temporary</i> message:</p>
<pre>    void MainWindow::createStatusBar()
    {
        statusBar()-&gt;showMessage(tr(&quot;Ready&quot;));
    }</pre>
<p>To remove a temporary message, use the clearMessage() slot, or set a time limit when calling showMessage(). For example:</p>
<pre>    void MainWindow::print()
    {
        QTextDocument *document = textEdit-&gt;document();
        QPrinter printer;

        QPrintDialog *dlg = new QPrintDialog(&amp;printer, this);
        if (dlg-&gt;exec() != QDialog::Accepted)
            return;

        document-&gt;print(&amp;printer);

        statusBar()-&gt;showMessage(tr(&quot;Ready&quot;), 2000);
    }</pre>
<p>Use the currentMessage() function to retrieve the temporary message currently shown. The QStatusBar class also provide the messageChanged() signal which is emitted whenever the temporary status message changes.</p>
<p><i>Normal</i> and <i>Permanent</i> messages are displayed by creating a small widget (QLabel, QProgressBar or even QToolButton) and then adding it to the status bar using the addWidget() or the addPermanentWidget() function. Use the removeWidget() function to remove such messages from the status bar.</p>
<pre>    statusBar()-&gt;addWidget(new MyReadWriteIndication);</pre>
<p>By default QStatusBar provides a QSizeGrip in the lower-right corner. You can disable it using the setSizeGripEnabled() function. Use the isSizeGripEnabled() function to determine the current status of the size grip.</p>
<p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image plastique-statusbar.png]</font></p>
*/">
    <method name="public QStatusBar(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a status bar with a size grip and the given <i>parent</i>.</p>

*/"/>
    <method name="public final void addPermanentWidget(com.trolltech.qt.gui.QWidget widget__0, int stretch__1)" doc="/**
<p>Adds the given <i>widget</i> permanently to this status bar, reparenting the widget if it isn't already a child of this QStatusBar object. The <i>stretch</i> parameter is used to compute a suitable size for the given <i>widget</i> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</p>
<p>Permanently means that the widget may not be obscured by temporary messages. It is is located at the far right of the status bar.</p>

*/"/>
    <method name="public final void addWidget(com.trolltech.qt.gui.QWidget widget__0, int stretch__1)" doc="/**
<p>Adds the given <i>widget</i> to this status bar, reparenting the widget if it isn't already a child of this QStatusBar object. The <i>stretch</i> parameter is used to compute a suitable size for the given <i>widget</i> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</p>
<p>The widget is located to the far left of the first permanent widget (see addPermanentWidget()) and may be obscured by temporary messages.</p>

*/"/>
    <method name="public final void clearMessage()" doc="/**
<p>Removes any temporary message being shown.</p>

*/"/>
    <method name="public final java.lang.String currentMessage()" doc="/**
<p>Returns the temporary message currently shown, or an empty string if there is no such message.</p>

*/"/>
    <method name="protected final void hideOrShow()" doc="/**
<p>Ensures that the right widgets are visible.</p>
<p>Used by the showMessage() and clearMessage() functions.</p>

*/"/>
    <method name="public final int insertPermanentWidget(int index__0, com.trolltech.qt.gui.QWidget widget__1, int stretch__2)" doc="/**
<p>Inserts the given <i>widget</i> at the given <i>index</i> permanently to this status bar, reparenting the widget if it isn't already a child of this QStatusBar object. If <i>index</i> is out of range, the widget is appended (in which case it is the actual index of the widget that is returned).</p>
<p>The <i>stretch</i> parameter is used to compute a suitable size for the given <i>widget</i> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</p>
<p>Permanently means that the widget may not be obscured by temporary messages. It is is located at the far right of the status bar.</p>

*/"/>
    <method name="public final int insertWidget(int index__0, com.trolltech.qt.gui.QWidget widget__1, int stretch__2)" doc="/**
<p>Inserts the given <i>widget</i> at the given <i>index</i> to this status bar, reparenting the widget if it isn't already a child of this QStatusBar object. If <i>index</i> is out of range, the widget is appended (in which case it is the actual index of the widget that is returned).</p>
<p>The <i>stretch</i> parameter is used to compute a suitable size for the given <i>widget</i> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</p>
<p>The widget is located to the far left of the first permanent widget (see addPermanentWidget()) and may be obscured by temporary messages.</p>

*/"/>
    <method name="public final boolean isSizeGripEnabled()"/>
    <method name="protected final void reformat()" doc="/**
<p>Changes the status bar's appearance to account for item changes.</p>
<p>Special subclasses may need this function, but geometry management will usually take care of any necessary rearrangements.</p>

*/"/>
    <method name="public final void removeWidget(com.trolltech.qt.gui.QWidget widget__0)" doc="/**
<p>Removes the specifed <i>widget</i> from the status bar (without deleting it).</p>

*/"/>
    <method name="public final void setSizeGripEnabled(boolean arg__0)"/>
    <method name="public final void showMessage(java.lang.String text__0, int timeout__1)" doc="/**
<p>Hides the normal status indications and displays the given <i>message</i> for the specified <i>timeout</i> milli-seconds (if non-zero), or until clearMessage() or another showMessage() is called, whichever occurs first.</p>

*/"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent arg__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)" doc="/**
<p>Shows the temporary message, if appropriate, in response to the paint <i>event</i>.</p>

*/"/>
    <method name="protected void resizeEvent(com.trolltech.qt.gui.QResizeEvent arg__0)"/>
</class>
