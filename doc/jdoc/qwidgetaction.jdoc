<class name="QWidgetAction" doc="/**
<p>The QWidgetAction class extends QAction by an interface for inserting custom widgets into action based containers, such as toolbars.</p>
<p>Most actions in application are represented as items in menus or buttons in toolbars. However sometimes more complex widgets are necessary. For example a zoom action in a word processor may be realized using a QComboBox in a QToolBar, presenting a range of different zoom levels. QToolBar provides QToolBar::insertWidget() as convenience function for inserting a single widget. However if you want to implement an action that uses custom widgets for visualization in multiple containers then you have to subclass QWidgetAction.</p>
<p>If a QWidgetAction is added for example to a QToolBar then QWidgetAction::createWidget() is called. Reimplementations of that function should create a new custom widget with the specified parent.</p>
<p>If the action is removed from a container widget then QWidgetAction::deleteWidget() is called with the previously created custom widget as argument. The default implementation hides the widget and deletes it using QObject::deleteLater().</p>
<p>If you have only one single custom widget then you can set it as default widget using setDefaultWidget(). That widget will then be used if the action is added to a QToolBar, or in general to an action container that supports QWidgetAction. If a QWidgetAction with only a default widget is added to two toolbars at the same time then the default widget is shown only in the first toolbar the action was added to. QWidgetAction takes over ownership of the default widget.</p>
<p>Note that it is up to the widget to activate the action, for example by reimplementing mouse event handlers and calling QAction::trigger().</p>
<p><b>Mac OS X</b>: If you add widgets to a menu in the application's menu bar on Mac OS X, the widget will be added and function but there are some limitations:</p>
<ol type=&quote;1&quote;>
<li>Focus/Keyboard handling of the widget is not possible</li>
<li>Mouse tracking on the widget currently does not work</li>
<li>Connecting the triggered() signal to a slot that opens a modal dialog will cause a crash in Mac OS X 10.4 (known bug acknowledged by Apple), a workaround is to use a QueuedConnection instead of a DirectConnection.</li>
</ol>

*/">
    <method name="public QWidgetAction(com.trolltech.qt.core.QObject parent__0)" doc="/**
<p>Constructs an action with <i>parent</i>.</p>

*/"/>
    <method name="protected final java.util.List&lt;com.trolltech.qt.gui.QWidget&gt; createdWidgets()" doc="/**
<p>Returns the list of widgets that have been using createWidget() and are currently in use by widgets the action has been added to.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget defaultWidget()" doc="/**
<p>Returns the default widget.</p>

*/"/>
    <method name="public final void releaseWidget(com.trolltech.qt.gui.QWidget widget__0)" doc="/**
<p>Releases the specified <i>widget</i>.</p>
<p>Container widgets that support actions call this function when a widget action is removed.</p>

*/"/>
    <method name="public final com.trolltech.qt.gui.QWidget requestWidget(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Returns a widget that represents the action, with the given <i>parent</i>.</p>
<p>Container widgets that support actions can call this function to request a widget as visual representation of the action.</p>

*/"/>
    <method name="public final void setDefaultWidget(com.trolltech.qt.gui.QWidget w__0)" doc="/**
<p>Sets <i>widget</i> to be the default widget. The ownership is transferred to QWidgetAction. Unless createWidget() is reimplemented by a subclass to return a new widget the default widget is used when a container widget requests a widget through requestWidget().</p>

*/"/>
    <method name="protected com.trolltech.qt.gui.QWidget createWidget(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>This function is called whenever the action is added to a container widget that supports custom widgets. If you don't want a custom widget to be used as representation of the action in the specified <i>parent</i> widget then 0 should be returned.</p>

*/"/>
    <method name="protected void deleteWidget(com.trolltech.qt.gui.QWidget widget__0)" doc="/**
<p>This function is called whenever the action is removed from a container widget that displays the action using a custom <i>widget</i> previously created using createWidget(). The default implementation hides the <i>widget</i> and schedules it for deletion using QObject::deleteLater().</p>

*/"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent arg__0)"/>
</class>
