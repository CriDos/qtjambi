<class name="QScrollBar" doc="/**
<p>The QScrollBar widget provides a vertical or horizontal scroll bar.</p>
<p>A scroll bar is a control that enables the user to access parts of a document that is larger than the widget used to display it. It provides a visual indication of the user's current position within the document and the amount of the document that is visible. Scroll bars are usually equipped with other controls that enable more accurate navigation. Qt displays scroll bars in a way that is appropriate for each platform.</p>
<p>If you need to provide a scrolling view onto another widget, it may be more convenient to use the QScrollArea class because this provides a viewport widget and scroll bars. QScrollBar is useful if you need to implement similar functionality for specialized widgets using QAbstractScrollArea; for example, if you decide to subclass QAbstractItemView. For most other situations where a slider control is used to obtain a value within a given range, the QSlider class may be more appropriate for your needs.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><p align=&quote;center&quote;><font color=&quote;red&quote;>[Missing image qscrollbar-picture.png]</font></p></td><td>Scroll bars typically include four separate controls: a slider, scroll arrows, and a page control.<ul>
<li>a. The slider provides a way to quickly go to any part of the document, but does not support accurate navigation within large documents.</li>
<li>b. The scroll arrows are push buttons which can be used to accurately navigate to a particular place in a document. For a vertical scroll bar connected to a text editor, these typically move the current position one &quot;line&quot; up or down, and adjust the position of the slider by a small amount. In editors and list boxes a &quot;line&quot; might mean one line of text; in an image viewer it might mean 20 pixels.</li>
<li>c. The page control is the area over which the slider is dragged (the scroll bar's background). Clicking here moves the scroll bar towards the click by one &quot;page&quot;. This value is usually the same as the length of the slider.</li>
</ul>
</td></tr>
</table></p>
<p>Each scroll bar has a value that indicates how far the slider is from the start of the scroll bar; this is obtained with value() and set with setValue(). This value always lies within the range of values defined for the scroll bar, from minimum() to maximum() inclusive. The range of acceptable values can be set with setMinimum() and setMaximum(). At the minimum value, the top edge of the slider (for a vertical scroll bar) or left edge (for a horizontal scroll bar) will be at the top (or left) end of the scroll bar. At the maximum value, the bottom (or right) edge of the slider will be at the bottom (or right) end of the scroll bar.</p>
<p>The length of the slider is usually related to the value of the page step, and typically represents the proportion of the document area shown in a scrolling view. The page step is the amount that the value changes by when the user presses the <b>Page Up</b> and <b>Page Down</b> keys, and is set with setPageStep(). Smaller changes to the value defined by the line step are made using the cursor keys, and this quantity is set with setLineStep().</p>
<p>Note that the range of values used is independent of the actual size of the scroll bar widget. You do not need to take this into account when you choose values for the range and the page step.</p>
<p>The range of values specified for the scroll bar are often determined differently to those for a QSlider because the length of the slider needs to be taken into account. If we have a document with 100 lines, and we can only show 20 lines in a widget, we may wish to construct a scroll bar with a page step of 20, a minimum value of 0, and a maximum value of 80. This would give us a scroll bar with five &quot;pages&quot;.</p>
<p><table align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image qscrollbar-values.png]</font></td><td>The relationship between a document length, the range of values used in a scroll bar, and the page step is simple in many common situations. The scroll bar's range of values is determined by subtracting a chosen page step from some value representing the length of the document. In such cases, the following equation is useful:<p><i>document length</i> = maximum() - minimum() + pageStep().</p>
</td></tr>
</table></p>
<p>QScrollBar only provides integer ranges. Note that although QScrollBar handles very large numbers, scroll bars on current screens cannot usefully represent ranges above about 100,000 pixels. Beyond that, it becomes difficult for the user to control the slider using either the keyboard or the mouse, and the scroll arrows will have limited use.</p>
<p>ScrollBar inherits a comprehensive set of signals from QAbstractSlider:</p>
<ul>
<li>valueChanged() is emitted when the scroll bar's value has changed. The tracking() determines whether this signal is emitted during user interaction.</li>
<li>rangeChanged() is emitted when the scroll bar's range of values has changed.</li>
<li>sliderPressed() is emitted when the user starts to drag the slider.</li>
<li>sliderMoved() is emitted when the user drags the slider.</li>
<li>sliderReleased() is emitted when the user releases the slider.</li>
<li>actionTriggered() is emitted when the scroll bar is changed by user interaction or via the triggerAction() function.</li>
</ul>
<p>A scroll bar can be controlled by the keyboard, but it has a default focusPolicy() of Qt::NoFocus. Use setFocusPolicy() to enable keyboard interaction with the scrollbar:</p>
<ul>
<li>Left/Right move a horizontal scrollbar by one single step.</li>
<li>Up/Down move a vertical scrollbar by one single step.</li>
<li>PageUp moves up one page.</li>
<li>PageDown moves down one page.</li>
<li>Home moves to the start (mininum).</li>
<li>End moves to the end (maximum).</li>
</ul>
<p>The slider itself can be controlled by using the triggerAction() function to simulate user interaction with the scroll bar controls. This is useful if you have many different widgets that use a common range of values.</p>
<p>Most GUI styles use the pageStep() value to calculate the size of the slider.</p>
<p><table width=&quote;100%&quote; align=&quote;center&quote; cellpadding=&quote;2&quote; cellspacing=&quote;1&quote; border=&quote;0&quote;>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image macintosh-horizontalscrollbar.png]</font></td><td>A scroll bar shown in the Macintosh widget style.</td></tr>
<tr valign=&quote;top&quote; class=&quote;even&quote;><td><font color=&quote;red&quote;>[Missing image windows-horizontalscrollbar.png]</font></td><td>A scroll bar shown in the Windows XP widget style.</td></tr>
<tr valign=&quote;top&quote; class=&quote;odd&quote;><td><font color=&quote;red&quote;>[Missing image plastique-horizontalscrollbar.png]</font></td><td>A scroll bar shown in the Plastique widget style.</td></tr>
</table></p>

*/">
    <method name="public QScrollBar(com.trolltech.qt.core.Qt.Orientation arg__0, com.trolltech.qt.gui.QWidget parent__1)" doc="/**
<p>Constructs a scroll bar with the given <i>orientation</i>.</p>
<p>The <i>parent</i> argument is passed to the QWidget constructor.</p>
<p>The minimum defaults to 0, the maximum to 99, with a singleStep size of 1 and a pageStep size of 10, and an initial value of 0.</p>

*/"/>
    <method name="public QScrollBar(com.trolltech.qt.gui.QWidget parent__0)" doc="/**
<p>Constructs a vertical scroll bar.</p>
<p>The <i>parent</i> arguments is sent to the QWidget constructor.</p>
<p>The minimum defaults to 0, the maximum to 99, with a singleStep size of 1 and a pageStep size of 10, and an initial value of 0.</p>

*/"/>
    <method name="protected void contextMenuEvent(com.trolltech.qt.gui.QContextMenuEvent arg__0)"/>
    <method name="public boolean event(com.trolltech.qt.core.QEvent event__0)"/>
    <method name="protected void hideEvent(com.trolltech.qt.gui.QHideEvent arg__0)"/>
    <method name="protected void mouseMoveEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void mousePressEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void mouseReleaseEvent(com.trolltech.qt.gui.QMouseEvent arg__0)"/>
    <method name="protected void paintEvent(com.trolltech.qt.gui.QPaintEvent arg__0)"/>
    <method name="public com.trolltech.qt.core.QSize sizeHint()"/>
    <method name="protected void sliderChange(com.trolltech.qt.gui.QAbstractSlider.SliderChange change__0)" doc="/**
<p>Reimplement this virtual function to track slider changes such as SliderRangeChange, SliderOrientationChange, SliderStepsChange, or SliderValueChange. The default implementation only updates the display and ignores the <i>change</i> parameter.</p>

*/"/>
</class>
