<class name="QChildEvent" doc="/**
<p>The QChildEvent class contains event parameters for child object events.</p>
<p>Child events are sent immediately to objects when children are added or removed.</p>
<p>In both cases you can only rely on the child being a QObject (or, if QObject::isWidgetType() returns true, a QWidget). This is because in the QEvent::ChildAdded case the child is not yet fully constructed; in the QEvent::ChildRemoved case it might have already been destructed.</p>
<p>The handler for these events is QObject::childEvent().</p>

*/">
    <method name="public QChildEvent(com.trolltech.qt.core.QEvent.Type type__0, com.trolltech.qt.core.QObject child__1)" doc="/**
<p>Constructs a child event object of a particular <i>type</i> for the <i>child</i>.</p>
<p><i>type</i> can be QEvent::ChildAdded, QEvent::ChildRemoved, QEvent::ChildPolished, or QEvent::ChildRemoved.</p>

*/"/>
    <method name="public final boolean added()" doc="/**
<p>Returns true if type() is QEvent::ChildAdded; otherwise returns false.</p>

*/"/>
    <method name="public final com.trolltech.qt.core.QObject child()" doc="/**
<p>Returns the child object that was added or removed.</p>

*/"/>
    <method name="public final boolean polished()" doc="/**
<p>Returns true if type() is QEvent::ChildPolished; otherwise returns false.</p>

*/"/>
    <method name="public final boolean removed()" doc="/**
<p>Returns true if type() is QEvent::ChildRemoved; otherwise returns false.</p>

*/"/>
    <method name="protected final com.trolltech.qt.core.QObject c()"/>
    <method name="protected final void setC(com.trolltech.qt.core.QObject c)"/>
</class>
