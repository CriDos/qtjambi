/*!
    \page qtjambi-juic.html

    \title Java User Interface Compiler (JUIC)

    The Java User Interface Compiler (JUIC) command-line tool converts
    the user interface definition file (\c .jui) generated by Qt
    Designer to Java source files.

    \section1 Usage

    \code
         juic [option]... <.jui file>
    \endcode

    Note that \QJ also provides an \l {Qt Jambi Eclipse
    Integration}{Eclipse integration} that includes JUIC,
    automatically running the tool whenever the \c .jui files
    change. In Eclipse, JUIC is integrated as a custom build tool
    which will be executed prior to the Eclipse built-in incremental
    builder meaning that all source code is ensured to be up to date
    after the user interface has been edited in Qt Designer.

    See the \l {Simple UI Example} example documentation for details
    on how to implement user interfaces for applications, using \c .jui
    files.

    \section1 Options

    The following table lists the command-line options recognized by
    JUIC:

    \table 100%
    \header \o Option \o Description

    \row
    \o \c -h, \c -help
    \o Describes the usage and lists the command line options.

    \row
    \o \c -v, \c -version
    \o Displays the compiler's version number.

    \row
    \o \c {-d <dir>}
    \o Specifies the output directory.

    \row
    \o \c {-x <xml file>}
    \o Loads a custom configuration file.

    \row
    \o \c {-p <package>}
    \o Specifies a package for the generated \c .class file (relative
    to the output directory).

    \row
    \o \c {-tr <func>}
    \o Use <func> for translating strings instead of tr().

    \row
    \o \c {-cp <path>}

    \o Updates all the \c .jui files in the given path.The path
    argument is optional; the default path is $CLASSPATH.

    \row
    \o \c {-pf <prefix>}

    \o Specifies the the prefix used for the generated classes. JUIC
    automatically adds 'Ui_' prefix to the generated classes. Use this
    option to alter the prefix, omit the argument to remove the prefix.

    \row
    \o \c {-i <file1>:<...>:<fileX>}

    \o Used in combination with the 'cp' option, making JUIC only
    update the specified files.

    \row
    \o \c {-e <file1>:<...>:<fileX>}

    \o Used in combination with the 'cp' option, prohibiting JUIC from
    updating the specified files.

    \row
    \o \c -a
    \o Updates the files regardless of modification date.

    \endtable


    \section1 Compatibility with Qt / C++' .ui Files

    Qt / C++ has used user interface files (.ui files) to represent
    forms for several years. These are generated with Qt Designer and
    converted to code using the tool \c {uic}. These .ui files are xml
    datastructures containing the C++ class names, properties and
    connections. Many of these where C++ specific, such as enum values
    for properties and signal signatures. Up to technology preview 3,
    Qt Jambi also used these .ui files.

    With the release of the beta, Qt Jambi introduced a new file
    format for .ui files, with the extension .jui. This is done add
    better support for custom widgets written in Java with signals and
    properties of their own. The .jui xml data structure is based on
    java syntax.

    As a compatibility for existing Qt / C++ .ui files the Qt Jambi
    generator has an option for converting a C++ .ui file into a Qt
    Jambi .jui file. This is done by running the generator with the
    option \c {--convert-to-jui=[filename]} like this:

    \code
        ./generator qtmasterheaderfile.h jambimastertypesystem.txt --convert-to-jui=calculatorform.ui
    \endcode

    This will convert the calculatorform.ui to calculatorform.jui
    based on the default Qt Jambi Generator settings, e.g. based on
    Qt. For files containing custom widgets one must specify the
    typesystem and headerfile to the generator, similar to how one
    would use the Qt Jambi Generator to create a Java library from
    this custom widget.

*/
