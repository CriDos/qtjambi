/*!
    \page qtjambi-installation
    \title Installing Qt Jambi

    Qt Jambi is available both in prebuilt and source packages for
    Linux, Mac OS X, and Windows. Java 1.5 or later is required to
    install Qt Jambi. 

    The procedure of installing is different depending on whether
    you have downloaded a source or prebuilt package. This
    installation guide has separate sections for each approach.

    Enjoy !

    \tableofcontents

    \section1 Installing from a Prebuilt Package

    After extracting the package, you are ready to run the Launcher,
    which is an application that runs the examples and demos that come
    with Qt Jambi.

    To run the examples and demo launcher on Windows run the

    \code
        qtjambi.exe
    \endcode

    executable from the root directory. On Linux and Mac OS X run the

    \code
        qtjambi.sh
    \endcode

    shell script from the Qt Jambi directory.

    Running these files will verify the virtual machine version and
    set the correct environment for running Qt Jambi applications. If
    you later have problems running your own applications, you can
    examine the script, update the class path, and replace your own
    class with \c{ com.trolltech.launcher.Launcher }.

    When you are ready to distribute your own applications, see the
    \l{Deploying Qt Jambi Applications}{deployment} document.

    \section2 Manually Launching Qt Jambi Applications

    To manually run Qt Jambi, the \c CLASSPATH environment variable
    must include the \c qtjambi.jar file to get access to the library.
    To run the examples or launcher, the classpath must also include
    the Qt Jambi directory.

    The QT_PLUGIN_PATH variable must contain the path to the \c
    plugins directory in the Qt Jambi directory. Qt Jambi will also
    search for plugins in .jar files to which the system property \c
    {com.trolltech.qt.pluginjars} contains paths.

    Finally, Qt Jambi must be enabled to find the native libraries:

    \table 100%
        \header \o Platform \o Comment

    \row
        \o Windows
        \o Set the \c PATH environment variable to include the bin
           directory in the Qt Jambi directory.

    \row
        \o Linux
        \o Set the \c LD_LIBRARY_PATH environment variable to include the
           lib directory in the Qt Jambi directory.

    \row
        \o Mac OS X
        \o Set the \c DYLD_LIBRARY_PATH environment variable to include
           the lib directory in the Qt Jambi directory.

    \endtable

    You are then ready to run Qt Jambi applications. For instance, the
    launcher can be run like this:

    \code
        java -jar qtjambi.jar com.trolltech.launcher.Launcher
    \endcode

    Note that the \c {-jar} option must be given the complete file
    path to the \c .jar file.

    \section1 Building Qt Jambi from a Source Package

    This section describes how to build Qt Jambi from source. We first
    explain how to configure your system, and then we go through the
    procedure of building Qt Jambi from the command line.  Finally, we
    look at some common installation problems.

    Note that a source package requires a Qt installation. On Mac OS
    X, Qt must be configured without frameworks (by running the \c
    configure script with the --no-framework option).

    \section2 Configuring the System for Qt Jambi
    
    The Jambi source package requires Qt to be installed on the
    system. The java version must be at least 1.5.

    The following table describes the environment variables necessary
    to install Qt Jambi. We assume that the JAMBI environment variable
    contains the path to the Qt Jambi directory. The QTDIR variable
    contains the Qt directory.

    \table 80% \header \o Variable \o Value
    \row
        \o QTDIR
        \o This variable must contain the path to the directory
           where Qt is installed.
    \row
        \o JAVADIR
        \o This variable must contain the path to the directory
           where Java is installed.
    \row
        \o PATH
        \o This variable must include the directory JAVADIR/bin.
    \row
        \o 
            \list 
                \o LD_LIBRARY_PATH on Linux
                \o DYLD_LIBRARY_PATH on Mac OS X
                \o PATH on Windows
            \endlist
        \o This variable must include the directory JAMBI/lib and
           QTDIR/Lib
    \row
        \o CLASSPATH
        \o This variable must include the JAMBI directory.
    \endtable

    \section2 Building 

    We will now go through the procedure of building Qt Jambi
    step-by-step from the command line. We give shell transcripts for
    all commands necessary to successfully set up a working Qt Jambi
    environment. The transcripts are given from a Linux shell, but
    are essentially equal on all platforms; we will point out
    differences as we go along.

    \omit
    We also provide a script (build_jambi.sh) on Linux/Mac OS X that
    performs this procedure. The script also checks that the
    environment is set up correctly to build Jambi. It is located in
    the \c scripts subdirectory of the Qt Jambi directory.
    \endomit

    \section3 Building and Running the Jambi Generator 

    The Jambi Generator generates java source files that wrap the
    Qt C++ libraries. In order to build Jambi itself, we need the
    generator. So go into the directory in which it lives:

    \code
        cd $JAMBI/generator
    \endcode

    Then run qmake and the make tool on your system (On windows
    the tool is usually \c gmake or \c nmake):
    
    \code
        qmake
        make
    \endcode

    Then run the generator. Default settings are fine, so no
    command line arguments are necessary:

    On Linux:

    \code
        ./generator
    \endcode

    On Windows:

    \code
        release\generator
    \endcode

    The generator will give several warnings while running. This
    is normal and does not present a problem.

    \section3 Building C++ libraries and tools

    Go back to the JAMBI directory and run \c qmake to generate the
    necessary make file. Finally, build with \c make:

    \code
        cd ..
        qmake -r
        make
    \endcode

    \section3 Generating Ui files

    We now need to build the Ui files, i.e., create java files from UI
    created with the Qt Designer:

    \code
        ./bin/juic -cp .
    \endcode

    \section3 Building the Java Source Files

    The generator and juic have now created the Java source files
    for Qt Jambi. These are all listed in the file \c java_files.
    The Java compiler \c javac can take this file as an argument
    and will then compile all sources.

    \code
        javac @java_files
    \endcode

    Note that on some systems it might be necessary to invoke \c javac
    with the VM option -J-mx1024m to prevent the VM from running out
    of heap space; you may need to choose a different heap size than
    1024.

    \omit (This solution is not publicly available yet)
    \section2 Building with Ant

    Building Qt Jambi with default settings is simply a matter of
    running \c ant without options in the Qt Jambi directory. The
    environment must have been configured as described in the section
    \l {Configuring the System for Qt Jambi}.

    The Jambi build file (build.xml in the Qt Jambi directory)
    contains \c ant targets for each of the steps given in \l{Building
    from the Command Line}, and the default target will follow the
    procedure described there. It will also remove any previous Jambi
    build.

    (gotta implement this first) Targets are also provided for
    building the Jambi documentation including the javadoc API
    reference.

    The build file also contains a target to create a \c .jar  file
    containing the java class files and Qt Jambi examples.

    Below is a table listing the targets with a short description.
    Note that it is only the default target that ensures that targets
    are run in the correct order. If you decide to run other targets,
    you must control target dependencies yourself.
    
    \table 80%
        \header
            \o Option
            \o Description
        \row
            \o clean
            \o Cleans the Jambi installation. This option will remove all
            Java class files and the Jambi native libraries.
        \row
            \o compile.generator
            \o Builds the Qt Jambi Generator.
        \row
            \o compile.generator-example
            \o Compiles the \l{Qt Jambi Generator Example}{generator-example},
               which shows how to use the Qt Jambi generator to
               map an existing c++ project to Java.
        \row
            \o generator-example
            \o Generates code for generator-example, and compiles it.
        \row
            \o generator.generator-example
            \o Runs the generator on the generator example, qmake
               it, and compile it.
        \row
            \o compile.java
            \o Compiles the Qt Jambi core java files, i.e., the
               java files not mapped from c++ by the generator.
        \row
            \o compile.qtjambi
            \o Compiles the c++ Qt Jambi bindings generated by the
               generator. 
        \row
            \o deploy.jar
            \o Makes a jar file 'qtjambi.jar' that you can include
               in your project. This file contains the java class
               files and the native libraries.jar. If included in
               the classpath, java will find the Qt Jambi class
               files and native libraries without setting other
               environment variables.
        \row
            \o generator.qtjambi
            \o Runs the Qt Jambi generator on the Qt source. It
               will use the Qt version found in the QTDIR variable.
        \row
            \o help
            \o Provides detailed help.
        \row
            \o juic
            \o Generates Java source files out of JUI files
               created by designer. juic will search for JUI files
               recursively from the Qt Jambi directory.
        \row
            \o qmake.generator
            \o Runs \c qmake on the generator project.
        \row
            \o qmake.qtjambi
            \o Runs qmake on the Qt Jambi project.
        \row
            \o qtjambi
            \o Builds Qt Jambi.
    \endtable
    \endomit    

    \section2 Running Qt Jambi Applications

    After building Jambi, you should add the JAMBI directory to the
    class path. Then Qt Jambi applications can be run, for instance
    the Launcher:

    \code
        java com.trolltech.launcher.Launcher
    \endcode

    If Qt was built with debugging turned on, you need to use the Qt
    Jambi debug libraries. You specify this with the
    \c{com.trolltech.qt.debug} system property.

    Note that on Mac OS X, the VM must be invoked with the
    -XstartOnFirstThread option. 

    \section2 Trouble Shooting

    If you have trouble compiling and running Qt Jambi, we present
    problems that are commonly encountered in a table. This should be
    sufficient to solve most problems; failing that, try asking
    someone. The \l
    {http://trolltech.com/developer/faqs/Qt%20Jambi}{Jambi FAQ} is a
    good place to start. In the \l
    {http://lists.trolltech.com/qt-jambi-interest/}{Jambi Mailing
    List}, active Jambi users and the Jambi development team can be
    helpful with installation problems; please run Qt Jambi with the
    \c{com.trolltech.qt.verbose-loading} \l{Qt Jambi System Properties
    Reference}{system property} and give stack traces if Qt Jambi
    fails to load native libraries.

    \section3 Common Problems

    In this section, we have tried to gather common problems
    encountered while building Qt Jambi. They are listed in a table
    with columns for the problem description and solution.

    \table 80%
        \header
            \o Problem 
            \o Solution
        \row
            \o On Linux the \c gcj (GNU Java Compiler) is located in \c{/usr/bin};
               the path to the correct java version must be before this in
               the PATH. This usually results in \c{java.lang.ClassFormatError}
               errors.
            \o Make sure that it is the correct java executable in the PATH.
        \row
            \o Environment variables are not set correctly.
            \o Check with the \l{Configuring the System for Qt Jambi} section 
               that your system is properly configured for Jambi.
        \row
            \o Qt Jambi uses the Qt Header files to generate the
               mapping from c++ to java. Unless Qt was built with
               default settings, you may get link problems for
               bindings that are not in the native libraries.
            \o Build Qt with default settings
        \omit \row
            \o Qt headers not in default locations
            \o if using snapshots \endomit
        \row
            \o \c juic does not update .juic files that are
               not modified, which can be a problem if Java sources
               are deleted.
            \o Run juic with the \c -a option.
        \row
            \o Qt Jambi expects that Qt was built with debugging turned off.
               If Qt was built with debugging, the libraries will not be found.
            \o Run Qt Jambi with the \c{com.trolltech.qt.debug} system property.
    \endtable

    \section3 Load Issues

    If Jambi cannot find the native libraries, you will get
    \c{java.lang.UnsatisfiedLinkError}'s or other load issues. The
    search paths - in the order Jambi searches - for libraries are
    listed below.

    \list
        \o The com.trolltech.qt.library-path system property,
           which can be given \c java as command line argument.
        \o The classpath (including jar files).
        \o The subdirectory \c lib (Mac OS X and Linux) or \c bin
           (Windows) under the root of the Jambi package
           structure (i.e., the Qt Jambi directory).
        \o The java.library.path system property, which is set
           to LD_LIBRARY_PATH on Linux, PATH on Windows, and
           DYLD_LIBRARY_PATH on Mac OS X.
    \endlist

    Jambi will tell which libraries fail if you run \c java with the
    \c{-Dcom.trolltech.qt.verbose-loading=true} command line argument.
    You can then check if the library is in one of Jambi's search
    paths. Note that Jambi will report on each attempt to load a
    library.

    Jambi depends on a few common system libraries. Notably, Xinerama
    on Linux, which may be missing on older systems. Information about
    such missing libraries are not propagated from the operating
    system to Jambi; how missing libraries are reported may vary from
    system to system.

    \omit
    Please read the Eclipse integration documentation if you have
    problems running Jambi applications from within the IDE.

    Webstart on Mac notes?
    \endomit

    \section1 Platform Notes

    \table 100%
    \header \o Platform \o Comment
    \row \o Mac OS X
    \o When running a Qt Jambi application, it is necessary to pass
    the \c -XstartOnFirstThread argument to the Java executable. Also,
    if you have a source package, you have to build Qt with the 
    --no-framework option.

    \row \o Linux / 64 bit:

    \o Install a 32 bit virtual machine, e.g., on Ubuntu, install the
    \c ia32-sun-java5-bin package and put \c
    /usr/lib/jvm/ia32-java-1.5.0-sun-1.5.0.06/jre/bin into the \c PATH
    environment variable.

    \endtable

    \section1 Running the Qt Designer
    
    The Qt Designer is Trolltech's tool for designing and building
    user interfaces. If you have a prebuilt package, you can run it
    from the command line with the \c qtdesigner.bat or \c
    qtdesigner.sh scripts.  The \l{Qt Jambi Eclipse
    Integration}{Eclipse integration} handles the designer
    automatically.

    You will find more information in the \l{Qt Designer}{Qt Designer
    document}. 

    \section1 Running the Qt Jambi Generator

    The generator is a Qt application which can be used to map C++
    based Qt APIs onto equivalent Java APIs. The Qt Jambi package
    provides an example on how to use the Qt Jambi Generator, located
    in the \c {path/to/Qt Jambi/generator_example} directory.

    To generate the example's Java library run the

    \code
        generator_example.bat
    \endcode

    script on Windows. On Linux and Mac OS X run

    \code
        generator_example.sh
    \endcode

    These scripts will generate and compile the Java source
    code, as well as compile the C++ side of the example. See the
    script files for details.

    \warning The \QJ generator is written to handle Qt based source
    code, and is not intended for mapping C++ libraries in general.
*/
