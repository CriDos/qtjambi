/*!
    \page qtjambi-installation
    \title Installing Qt Jambi

    Qt Jambi is available both in prebuilt and source packages for
    Linux, Mac OS X, and Windows. Java 1.5 or later is required to
    install Qt Jambi.

    The procedure of installing is different depending on whether
    you have downloaded a source or prebuilt package. This
    installation guide has separate sections for each approach.

    Enjoy !

    \tableofcontents

    \section1 Installing from a Prebuilt Package

    After extracting the package, you are ready to run the Launcher,
    which is an application that runs the examples and demos that come
    with Qt Jambi.

    To run the examples and demo launcher on Windows run the

    \code
        qtjambi.exe
    \endcode

    executable from the Qt Jambi directory. On Linux and Mac OS X run the

    \code
        qtjambi.sh
    \endcode

    shell script from the Qt Jambi directory.

    Running these files will verify the virtual machine version and
    set the correct environment for running Qt Jambi applications.

    When you are ready to distribute your own applications, see the
    \l{Deploying Qt Jambi Applications}{deployment} document.

    \section2 Manually Launching Qt Jambi Applications

    To manually run Qt Jambi, the qtjambi classes archive and qtjambi
    platform archive must be available in the CLASSPATH. The qtjambi
    classes archive is named \c{qtjambi-4.4.0_01.jar} and the platform
    archive is named according to the operating system and compiler
    used to generated the native binaries, such as \c
    {qtjambi-win32-msvc2005-4.4.0_01.jar}

    To run the examples or launcher, the classpath must also include
    the \c{qtjambi-examples-4.4.0_01.jar}.

    \code
        // Linux
        java -cp qtjambi-4.4.0_01.jar:qtjambi-linux32-gcc-4.4.0_01.jar:qtjambi-examples-4.4.0_01.jar com.trolltech.launcher.Launcher

        // Mac OS X
        java -XstartOnFirstThread -cp qtjambi-4.4.0_01.jar:qtjambi-macosx-gcc-4.4.0_01.jar:qtjambi-examples-4.4.0_01.jar com.trolltech.launcher.Launcher

        // Windows
        java -cp qtjambi-4.4.0_01.jar:qtjambi-win32-msvc2005-4.4.0_01.jar:qtjambi-examples-4.4.0_01.jar com.trolltech.launcher.Launcher
    \endcode

    \bold{Note:} When running a Qt Jambi application on Mac, it is necessary to pass
    the \c -XstartOnFirstThread argument to the Java executable.


    \section3 Alternate way of loading native libraries

    Qt Jambi must be enabled to find the native libraries. The Qt
    Jambi libraries is a set of class files contained in the \c
    {qtjambi-4.4.0_01.jar} file and a set of native libraries. The
    native libraries are located in a .jar file named according to
    your operating system, hardware configuration and the compiler
    that was used to build the package, for instance \c
    {qtjambi-win64-msvc2005x64-4.4.0_01.jar}. The native libraries
    will be automatically loaded when this jar file is part of the
    classpath.

    An alternative way of loading the native libraries is to rely on
    Java's standard method of loading native libraries. This is done
    by specifying either the JVM system property
    \c{-Djava.library.path=[path_to_libraries]} or setting the
    following environment variable:

    \table 100%
        \header \o Platform \o Comment

    \row
        \o Windows
        \o Set the \c PATH environment variable to include the bin
           directory in the Qt Jambi directory.

    \row
        \o Linux
        \o Set the \c LD_LIBRARY_PATH environment variable to include the
           lib directory in the Qt Jambi directory.

    \row
        \o Mac OS X
        \o Set the \c DYLD_LIBRARY_PATH environment variable to include
           the lib directory in the Qt Jambi directory.

    \endtable

    Loading directly from files is \b not recommended as the wrong
    libraries can be found, such as /usr/lib/libQtCore.4.so because
    /usr/lib is always part of LD_LIBRARY_PATH.

    Some of Qt's functionality is loaded via native plugins. This
    includes for instance support for jpeg images. When using the
    platform archive, plugins are configured and loaded correctly
    automatically. When loading native libraries from the file system,
    Qt will try to load plugins from the directories in the
    QT_PLUGIN_PATH environment variable.

    You are then ready to run Qt Jambi applications. An example of how
    to run the launcher manually is illustrated below:

    \section1 Building Qt Jambi from a Source Package

    This section describes how to build Qt Jambi from source. We first
    explain how to configure your system, and then we go through the
    procedure of building Qt Jambi from the command line.  Finally, we
    look at some common installation problems.

    Note that a source package requires a Qt to be built. To avoid
    potential binary incompatibilities it is highly recommended that
    you build both Qt from scratch before building Qt Jambi from
    source. On Mac OS X, Qt must be configured without frameworks (by
    running the \c configure script with the --no-framework option).

    \section2 Configuring the System for Qt Jambi

    The Jambi source package requires a Qt source package, JDK 1.5 or
    higher and the build utility \c ant.

    \section2 Building Qt for Qt Jambi

    The first step is to build Qt for Qt Jambi. A normal Qt build will
    normally work, but there are a few exceptions. For more details on
    building Qt on any given system see the Qt installation guides.

    \table 80%

    \header \o Configuration \o Comment

    \row \o All \o Some featuers in Qt are turned on or off for Qt
    Jambi by configuring with \c {-D QT_JAMBI_BUILD}. Qt Jambi also
    has no need for the Qt 3 support library so it is recommended to
    compile with \c {-no-qt3support}.

    \row \o Mac OS X \o Qt Jambi only supports Qt configured with \c
    {-no-framework} and because of compatibility it is recommended to
    configure Qt against the 10.4 SDK, \c{-sdk
    /Developer/SDKs/MacOSX10.4u.sdk}

    \row \o Linux \o Sun's Java Virtual Machine has a bug preventing
    it from using MMX and SSE instructions. For deployment against 1.5
    Java runtimes, configure Qt with the options \c{-no-mmx -no-sse
    -no-sse2 -no-3dnow} to avoid problems.

    \row \o Windows (MSVC 2005 or newer) \o -D QT_JAMBI_BUILD is required
    for plugins to properly load.

    \endtable

    \section2 Setting up the environment

    The following table describes the environment variables necessary
    to install Qt Jambi.

    \table 80% \header \o Variable \o Value
    \row
        \o QTDIR
        \o This variable must contain the path to the directory
           where Qt is installed.
    \row
        \o JAVA_HOME
        \o This variable must contain the path to the directory
           where Java is installed.
    \row
        \o QMAKESPEC
        \o This variable is redundant in most cases, but may be
        required to pick between ambigous compilers, such as MinGW or
        MSVC on windows.

    \endtable


    \section2 Building Qt Jambi

    Qt Jambi provides a ant task which handles all the tasks of
    building the Qt Jambi libraries. To build Qt Jambi simply make
    sure the above requirements are met and type

    \code
    > ant
    \endcode

    in the Qt Jambi directory. Please note that Qt Jambi requires the
    \c ant-trax module of \c ant which is optional in some linux
    distributions. Running \c ant will automatically go through the following
   = steps:

    \list
    \i Compile the Qt Jambi Generator
    \i Generate the Qt Jambi libraries based on the Qt specified by $QTDIR
    \i Compile the Juic tool
    \i Compile the and bundle the native libraries
    \i Compile and bundle the class libraries
    \i Run Juic over the examples.
    \i Compile and bundle the examples
    \endlist

    For a description of the various sub-targets of the ant build one can:

    \code
    > ant -projecthelp
    \endcode

    For a description of the various build configurations, one can do:

    \code
    > ant help
    \endcode


    \section2 Trouble Shooting

    If you have trouble compiling and running Qt Jambi, we present
    problems that are commonly encountered in a table. This should be
    sufficient to solve most problems; failing that, try asking
    someone. The \l
    {http://trolltech.com/developer/faqs/Qt%20Jambi}{Jambi FAQ} is a
    good place to start. In the \l
    {http://lists.trolltech.com/qt-jambi-interest/}{Jambi Mailing
    List}, active Jambi users and the Jambi development team can be
    helpful with installation problems; please run Qt Jambi with the
    \c{com.trolltech.qt.verbose-loading} \l{Qt Jambi System Properties
    Reference}{system property} and give stack traces if Qt Jambi
    fails to load native libraries.

    \section3 Common Problems

    In this section, we have tried to gather common problems
    encountered while building Qt Jambi. They are listed in a table
    with columns for the problem description and solution.

    \table 80%
        \header
            \o Problem
            \o Solution
        \row
            \o On Linux the \c gcj (GNU Java Compiler) is located in \c{/usr/bin};
               the path to the correct java version must be before this in
               the PATH. This usually results in \c{java.lang.ClassFormatError}
               errors.
            \o Make sure that it is the correct java executable in the PATH.
        \row
            \o Environment variables are not set correctly.
            \o Check with the \l{Configuring the System for Qt Jambi} section
               that your system is properly configured for Jambi.
        \row
            \o Qt Jambi uses the Qt Header files to generate the
               mapping from c++ to java. Unless Qt was built with
               default settings, you may get link problems for
               bindings that are not in the native libraries.
            \o Build Qt with default settings
        \omit \row
            \o Qt headers not in default locations
            \o if using snapshots \endomit
        \row
            \o \c juic does not update .jui files that are
               not modified, which can be a problem if Java sources
               are deleted.
            \o Run juic with the \c -a option.
        \row
            \o Qt Jambi expects that Qt was built with debugging turned off.
               If Qt was built with debugging, the libraries will not be found.
            \o Run Qt Jambi with the \c{com.trolltech.qt.debug} system property.
    \endtable

    \section3 Load Issues

    If Jambi cannot find the native libraries, you will get
    \c{java.lang.UnsatisfiedLinkError}'s or other load issues. The
    search paths - in the order Jambi searches - for libraries are
    listed below.

    \list
        \o The com.trolltech.qt.library-path system property,
           which can be given \c java as command line argument.
        \o The classpath (including jar files).
        \o The subdirectory \c lib (Mac OS X and Linux) or \c bin
           (Windows) under the root of the Jambi package
           structure (i.e., the Qt Jambi directory).
        \o The java.library.path system property, which is set
           to LD_LIBRARY_PATH on Linux, PATH on Windows, and
           DYLD_LIBRARY_PATH on Mac OS X.
    \endlist

    \section1 Platform Notes

    \table 100%
    \header \o Platform \o Comment
    \row \o Mac OS X
    \o When running a Qt Jambi application, it is necessary to pass
    the \c -XstartOnFirstThread argument to the Java executable. Also,
    if you have a source package, you have to build Qt with the
    --no-framework option.

    \row \o Linux / 64 bit:

    \o Install a 32 bit virtual machine, e.g., on Ubuntu, install the
    \c ia32-sun-java5-bin package and put \c
    /usr/lib/jvm/ia32-java-1.5.0-sun-1.5.0.06/jre/bin into the \c PATH
    environment variable.

    \endtable

    \section1 Running the Qt Designer

    The Qt Designer is Trolltech's tool for designing and building
    user interfaces. If you have a prebuilt package, you can run it
    from the command line with the \c designer.bat or \c
    designer.sh scripts.  The \l{Qt Jambi Eclipse
    Integration}{Eclipse integration} handles the designer
    automatically.

    You will find more information in the \l{Qt Designer}{Qt Designer
    document}.

    \section1 Running the Qt Jambi Generator

    The generator is a Qt application which can be used to map C++
    based Qt APIs onto equivalent Java APIs. The Qt Jambi package
    provides an example on how to use the Qt Jambi Generator, located
    in the \c {path/to/Qt Jambi/generator_example} directory.

    To build the generator example from the source package simply do:

    \code
    ant -f build_generator_example.xml
    \endcode

    \warning The \QJ generator is written to handle Qt based source
    code, and is not intended for mapping C++ libraries in general.
*/
