<project default="all" name="Basic generator example">

    <property environment="env"/>

    <property file="build.properties"/>

    <import file="${jambi.directory}/setenv.xml"/>

    <property name="jardir" value="${jambi.directory}/jars"/>

    <property name="generator.out" value="${basedir}/build/generator"/>

    <tstamp/>

    <target name="init.taskdef">
        <taskdef resource="com/trolltech/tools/ant/ant-qtjambi.xml">
            <classpath>
                <pathelement path="${jambi.directory}/${jardir}/qtjambi-util.jar"/>
                <pathelement path="${jambi.directory}/${jardir}/nobundle/ant-qtjambi.jar"/>
            </classpath>
        </taskdef>
        <taskdef resource="net/sf/antcontrib/antlib.xml"
            classpath="${jambi.directory}/extjars/ant-contrib.jar"/>
    </target>

    <target name="help" description="Provides detailed help.">
        <echo>Generates the test jambi jar file</echo>
    </target>

    <target name="init" depends="init.taskdef, setup-properties">
        <qtjambi-initialize verbose="true" configuration="${qtjambi.config}"/>
        <!-- We need the ${jambi.directory} to be an absolute path -->
        <qtjambi-resolve-path var="jambi.directory.abspath" path="${jambi.directory}" verbose="true"/>
    </target>

    <target name="compile" depends="init">
        <!-- Stage 1 - build the liborg_qtjambi_org{,_debuglib}.so -->
        <mkdir dir="${basedir}/build/qmake/cpp"/>
        <qmake config="${qtjambi.configuration}"
               dir="${basedir}/build/qmake/cpp"
               pro="${basedir}/src/test.pro"
               qmakebinary="${qmake.binary}"/>

        <make dir="${basedir}/build/qmake/cpp"/>


        <!-- Stage 2 - build the liborg_qtjambi_org{,_debuglib}.so -->
        <mkdir dir="${generator.out}"/>
        <generator dir="${generator.out}"
                   generatorExe="${jambi.directory.abspath}/build/qmake-generator/generator"
                   debugTools="${qtjambi.debug-tools}"
                   inputDirectory=".${psep}${jambi.directory.abspath}/generator"
                   outputDirectory="${generator.out}"
                   generatorDirectory="${jambi.directory.abspath}/generator"
                   jambiDirectory="${jambi.directory.abspath}"
                   typesystem="typesystem/typesystem.xml"
                   header="typesystem/global.h"
                   phononpath="${qtjambi.phonon.includedir}"
                   qtincludedirectory="${qtjambi.qt.includedir}"
                   qtlibdirectory="${qtjambi.tools.qt.libdir}"
                   includepaths="${generator.includepaths}${psep}${basedir}"
                   kdephonon="${qtjambi.phonon.kdephonon-path}"/>

        <mkdir dir="${basedir}/build/qmake/org_qtjambi_test"/>
        <qmake config="${qtjambi.configuration}"
               dir="${basedir}/build/qmake/org_qtjambi_test"
               pro="${basedir}/org_qtjambi_test/org_qtjambi_test.pro"
               qmakebinary="${qmake.binary}"/>

        <make dir="${basedir}/build/qmake/org_qtjambi_test"/>


        <!-- Stage 3 - build Java parts -->
        <mkdir dir="${basedir}/build/platform-output"/>
        <javac destdir="${basedir}/build/platform-output"
               debug="true"
               includeantruntime="false"
               source="1.5" target="1.5">
            <classpath>
                <pathelement location="${jambi.directory.abspath}/qtjambi-${qtjambi.version}.jar"/>
            </classpath>
            <src path="${jambi.directory.abspath}/src/java/qtjambi-util"/>
            <src path="${generator.out}/java"/>
            <src path="${basedir}/java"/>
            <include name="org/qtjambi/test/*.java"/>
            <include name="com/trolltech/qt/osinfo/*.java"/>
            <include name="test/*.java"/>
        </javac>
    </target>

    <target name="package"
            depends="init"
            description="Creating .jar file with native libs...">

        <qtjambi-platform-jar cacheKey="genex-${qtjambi.compiler}-${DSTAMP}-${TSTAMP}"
                              outdir="${basedir}/build/platform-output">

            <!-- Qt Libraries... -->
            <library name="QtCore"              type="qt"     rootPath="${qtjambi.qt.libdir}" if="${qtjambi.core}" />
            <library name="QtGui"               type="qt"     rootPath="${qtjambi.qt.libdir}" if="${qtjambi.gui}" />
            <library name="QtOpenGL"            type="qt"     rootPath="${qtjambi.qt.libdir}" if="${qtjambi.opengl}" />
            <library name="QtXml"               type="qt"     rootPath="${qtjambi.qt.libdir}" if="${qtjambi.xml}" />

            <!-- Qt Plugins... -->
            <library name="qtaccessiblewidgets" type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/accessible"   load="never" if="${qtjambi.plugins.accessible.qtaccessiblewidgets}" />

            <library name="qsvgicon"            type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/iconengines"  load="never" if="${qtjambi.plugins.iconengines.svgicon}" />

            <library name="qgif"                type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/imageformats" load="never" if="${qtjambi.plugins.imageformats.gif}" />
            <library name="qico"                type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/imageformats" load="never" if="${qtjambi.plugins.imageformats.ico}" />
            <library name="qjpeg"               type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/imageformats" load="never" if="${qtjambi.plugins.imageformats.jpeg}" />
            <library name="qmng"                type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/imageformats" load="never" if="${qtjambi.plugins.imageformats.mng}" />
            <library name="qsvg"                type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/imageformats" load="never" if="${qtjambi.plugins.imageformats.svg}" />
            <library name="qtiff"               type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/imageformats" load="never" if="${qtjambi.plugins.imageformats.tiff}" />

            <library name="qcncodecs"           type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/codecs"       load="never" if="${qtjambi.plugins.codecs.cncodecs}" />
            <library name="qjpcodecs"           type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/codecs"       load="never" if="${qtjambi.plugins.codecs.jpcodecs}" />
            <library name="qkrcodecs"           type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/codecs"       load="never" if="${qtjambi.plugins.codecs.krcodecs}" />
            <library name="qtwcodecs"           type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/codecs"       load="never" if="${qtjambi.plugins.codecs.twcodecs}" />

            <library name="qsqlite"             type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/sqldrivers"   load="never" if="${qtjambi.plugins.sqldrivers.sqlite}" />
            <library name="qsqlite2"            type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/sqldrivers"   load="never" if="${qtjambi.plugins.sqldrivers.sqlite2}" />
            <library name="qsqlmysql"           type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/sqldrivers"   load="never" if="${qtjambi.plugins.sqldrivers.sqlmysql}" />
            <library name="qsqlodbc"            type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/sqldrivers"   load="never" if="${qtjambi.plugins.sqldrivers.sqlodbc}" />
            <library name="qsqlpsql"            type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/sqldrivers"   load="never" if="${qtjambi.plugins.sqldrivers.sqlpsql}" />
            <library name="qsqltds"             type="plugin" rootPath="${qtjambi.qt.pluginsdir}" subdir="plugins/sqldrivers"   load="never" if="${qtjambi.plugins.sqldrivers.sqltds}" />

            <!-- Qt Jambi Libraries -->
            <library name="qtjambi"                 type="qtjambi" rootPath="${qtjambi.jambi.libdir}" />
            <library name="com_trolltech_qt_core"   type="qtjambi" rootPath="${qtjambi.jambi.libdir}" if="${qtjambi.core}" />
            <library name="com_trolltech_qt_gui"    type="qtjambi" rootPath="${qtjambi.jambi.libdir}" if="${qtjambi.gui}" />
            <library name="com_trolltech_qt_opengl" type="qtjambi" rootPath="${qtjambi.jambi.libdir}" if="${qtjambi.opengl}" />

            <!-- Win32/Win64 MinGW only -->
            <library name="libstdc++-6"     type="system"
                    rootPath="${qtjambi.qt.bindir}"
                    load="never"
                    if="${qtjambi.packaging.dso.libstdc++-6}"/>
            <!-- Win32 MinGW only -->
            <library name="libgcc_s_dw2-1"  type="system"
                    rootPath="${qtjambi.qt.bindir}"
                    load="never"
                    if="${qtjambi.packaging.dso.libgcc_s_dw2-1}"/>
            <!-- Win32/Win64 MinGW-W64 only -->
            <library name="libgcc_s_sjlj-1"  type="system"
                    rootPath="${qtjambi.qt.bindir}"
                    load="never"
                    if="${qtjambi.packaging.dso.libgcc_s_sjlj-1}"/>
            <!-- Win32/Win64 MinGW related but unable to find it required at runtime
                 by current toolchain versions (mingw gcc 4.5.2, mingw-w64 gcc 4.7.0) -->
            <library name="mingwm10"  type="system"
                    rootPath="${qtjambi.qt.bindir}"
                    load="never"
                    if="${qtjambi.packaging.dso.mingwm10}"/>

            <!-- Win32/Win64 zlib1.dll -->
            <library name="zlib1"           type="dso"
                    rootPath="${qtjambi.qt.libdir}"
                    load="never"
                    if="${qtjambi.packaging.dso.zlib1}"/>

            <!-- Win32/Win64 libssl32.dll MinGW only -->
            <library name="libssl32"        type="dso"
                    rootPath="${qtjambi.qt.libdir}"
                    load="never"
                    if="${qtjambi.packaging.dso.libssl32}"/>
            <!-- Win32/Win64 ssleay32.dll MSVC only -->
            <library name="ssleay32"        type="dso"
                    rootPath="${qtjambi.qt.libdir}"
                    load="never"
                    if="${qtjambi.packaging.dso.ssleay32}"/>

            <!-- Win32/Win64 libeay32.dll -->
            <library name="libeay32"        type="dso"
                    rootPath="${qtjambi.qt.libdir}"
                    load="never"
                    if="${qtjambi.packaging.dso.libeay32}"/>

            <plugin path="plugins"/>

            <!-- Finally the generated library  -->
            <library name="org_qtjambi_test"        type="qtjambi"  rootPath="build/qmake/lib"/>

        </qtjambi-platform-jar>

        <delete file="${basedir}/test-*.jar"/>
        <jar destfile="test-${qtjambi.osname}-${qtjambi.compiler}-${qtjambi.version}.jar">
            <fileset dir="${basedir}/build/platform-output"/>
            <manifest>
                <attribute name="Built-By" value="${user.name} - ${TODAY}"/>
                <!-- Should of course put TestMapBorealis here.... attribute name="Main-Class" value="com.trolltech.examples.GeneratorExample"/ -->
                <attribute name="Class-Path" value="qtjambi-${qtjambi.version}.jar"/>
                <attribute name="Main-Class" value="test.TestJava"/>
            </manifest>
        </jar>
    </target>

    <target name="clean" depends="init">
        <delete file="${basedir}/test-${qtjambi.osname}-${qtjambi.compiler}-${qtjambi.version}.jar"/>
        <delete dir="${basedir}/build/platform-output"/>
        <delete dir="${basedir}/build"/>
    </target>

    <target name="all" depends="init, compile, package"/>

</project>
