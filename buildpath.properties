

java.srcdir                     = src/java
java.outdir                     = build/java
jardir                          = jars

qtjambi.builddir                = build/qmake-qtjambi

generator.builddir              = build/qmake-generator
generator.outputdir             = build/generator/out
generator.xmlmerge.srcdir       = generator/typesystem/xml
generator.xmlmerge.outputdir    = build/generator

juic.builddir                   = build/qmake-juic
juic.outputdir                  = build/juic-out

# Required by some memory management related unit tests, to run properly.
# It does not make any difference in building, but lowers the runtime performance.
# You should leave it as false unless you want fully working unit tests.
qtjambi.debug-tools = false

#TODO: this one should be provided externally, handled by ant configure, external file or something...
#this is just too hacky
# Do not set anything to this variable, unless you have machine which
# whines about empty java.library.path in some stage (Gentoo)
qtjambi.java.library.path       = /usr/lib/gcc/i686-pc-linux-gnu/4.5.2

## NOTE: following variables are set automatically if QTDIR is set


# name of qmake binary, found from qt.bindir
qt.qmake                        = qmake

# path to directory where qmake is
qt.bindir                       = /usr/bin
# path where Qt's libraries are
qt.libdir                       = /usr/lib/qt4
# path to Qt's include directory
qt.includedir                   = /usr/include/qt4
# path to directory where Qt's plugins directory is
qt.pluginsdir                   = /usr/lib/qt4/plugins

## these paths are same than above, but for phonon
## keep them commented out if your phonon is within Qt

qtjambi.phonon.kdephonon        = true
qtjambi.phonon.includedir       = /usr/include
qtjambi.phonon.libdir           = /usr/lib
qtjambi.phonon.pluginsdir       = /usr/lib/kde4/plugins

# If you are crosscompiling, following vars can be used to
# specify paths to native Qt version that will be used to compile
# native tools that are used to generate bindings

#tools.qt.bindir                 = /usr/bin
#tools.qt.libdir                 = /usr/lib
#tools.qt.qmake                  = qmake

# For crosscompiling this can be used to set JDK of target machine. This
# is used to compile the bindings for that machine.
# Defaults to $JAVA_HOME. Alternatively, if $JAVA_HOME_TARGET is set,
# that variable is used if this one is not set.
#java.home.target               = /opt/jdk1.5.0_22

# If there is need to set (crosscompiling, for example), arch of target machine,
# this can be used to set it. By default this is detected automatically (host machine).
# This is label added to include path that is used
# to compile the native bindings: "$JAVA_HOME_TARGET/include/$JAVA_OSARCH_TARGET".
# You can also use environment variable $JAVA_OSARCH_TARGET.
#java.osarch.target             = win32
#java.osarch.target             = linux

# We have to add this here since different systems used different pathSeparators
#  due to drive letter syntax in windows etc.
# Linux/MacOSX minimum
generator.includepaths          = ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:${java.home.target}/include/${java.osarch.target}
# Windows minimum
#generator.includepaths         = ${basedir}/generator/targets;${basedir}/src/cpp;${java.home.target}/include;${java.home.target}/include/${java.osarch.target}
#
# Linux maximum, no missing header warnings (adjust to suit your GNUC version and location)
#generator.includepaths         = ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:${java.home.target}/include/${java.osarch.target}:/usr/include:/usr/include/c++/4.4.4:/usr/include/c++/4.4.4/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include
# MacOSX maximum (OS 10.6.x, XCode 3.0 gcc 4.0.1, -arch i386 -mmacosx-version-min=10.4) JAVA_HOME=/Library/Java/Home -isysroot /Developer/SDKs/MacOSX10.4u.sdk
# Having to provide /Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/include for <GL/gl.h>
#generator.includepaths         = ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:/Developer/SDKs/MacOSX10.4u.sdk/usr/include:/Developer/SDKs/MacOSX10.4u.sdk/usr/include/c++/4.0.0:/Developer/SDKs/MacOSX10.4u.sdk/usr/include/c++/4.0.0/i686-apple-darwin9:/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/include:/Developer/SDKs/MacOSX10.4u.sdk/System/Library/Frameworks:/Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/include
# Windows maximum, no missing header warnings
#generator.includepaths         = ${basedir}/generator/targets;${basedir}/src/cpp;${java.home.target}/include;${java.home.target}/include/${java.osarch.target};${env.INCLUDE}
