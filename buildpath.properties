
# This seems to be only used by examples...
# Should be removed and source / output moved to its correct location.
java.generated.srcdir           = build/java/generated-source

java.srcdir                     = src/java
java.outdir                     = build/java/out
jardir                          = jars

generator.outputdir             = build/generator/out
generator.xmlmerge.srcdir       = generator/typesystem/xml
generator.xmlmerge.outputdir    = build/generator

juic.outputdir                  = build/juic/out

# Required by some memory management related unit tests, to run properly.
# It does not make any difference in building, but lowers the runtime performance.
# You should leave it as false unless you want fully working unit tests.
qtjambi.debug-tools = false

#TODO: this one should be provided externally, handled by ant configure, external file or something...
#this is just too hacky
# Do not set anything to this variable, unless you have machine which
# whines about empty java.library.path in some stage (Gentoo)
qtjambi.java.library.path       = /usr/lib/gcc/i686-pc-linux-gnu/4.5.2

## NOTE: following variables are set automatically if QTDIR is set


# name of qmake binary, found from qt.bindir
qt.qmake                        = qmake

# path to directory where qmake is
qt.bindir                       = /usr/bin
# path where Qt's libraries are
qt.libdir                       = /usr/lib/qt4
# path to Qt's include directory
qt.includedir                   = /usr/include/qt4
# path to directory where Qt's plugins directory is
qt.pluginsdir                   = /usr/lib/qt4

## these paths are same than above, but for phonon
## keep them commented out if your phonon is within Qt

qtjambi.phonon.kdephonon        = true
qtjambi.phonon.includedir       = /usr/include
qtjambi.phonon.libdir           = /usr/lib
qtjambi.phonon.pluginsdir       = /usr/lib/kde4

# If you are crosscompiling, following vars can be used to
# specify paths to native Qt version that will be used to compile
# native tools that are used to generate bindings

#tools.qt.bindir                 = /usr/bin
#tools.qt.libdir                 = /usr/lib
#tools.qt.qmake                  = qmake

# We have to add this here since different systems used different pathSeparators
#  due to drive letter syntax in windows etc.
# Linux/MacOSX minimum
generator.includepaths		= ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:${java.home.target}/include/${java.osarch.target}
# Windows minimum
#generator.includepaths		= ${basedir}/generator/targets;${basedir}/src/cpp;${java.home.target}/include;${java.home.target}/include/${java.osarch.target}
#
# Linux maximum, no missing header warnings (adjust to suit your GNUC version and location)
#generator.includepaths		= ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:${java.home.target}/include/${java.osarch.target}:/usr/include:/usr/include/c++/4.4.4:/usr/include/c++/4.4.4/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include
# Windows maximum, no missing header warnings
#generator.includepaths		= ${basedir}/generator/targets;${basedir}/src/cpp;${java.home.target}/include;${java.home.target}/include/${java.osarch.target};${env.INCLUDE}

# This is the JDK of the target you are building QtJambi for cross-compiling.
# It is prefered to use $JAVA_HOME_TARGET directly, uncommenting this will override
#  $JAVA_HOME_TARGET for the build process.  If $JAVA_HOME_TARGET is not set
#  (and this property is not set) and then the default value from $JAVA_HOME is used.
#java.home.target		= /opt/jdk1.5.0_22

# Normal you don't need to mess with this, this is the machine label added to
#  the include search path $JAVA_HOME_TARGET/include/$JAVA_OSARCH_TARGET
# You can also setup the environment variable $JAVA_OSARCH_TARGET.
# By default this value is auto-detected, you usually do not need to specify it.
#java.osarch.target		= win32
#java.osarch.target		= linux
